program_idx,file_path,idx,src,dst,src_code,dst_code,reason,offset,sa_lb_direct,sa_lb,da_lb,dst_name_match,dst_funcname,actual_lb,actual_lb_trans,is_static,src_class,mvs,src_ancestors,src_descendants,dst_class,dst_ancestors,dst_descendants
1,../replication_package/raw_data/url433bec1e56_sarobe_DifficultyInvestigation_tgz-pJ8-fr_inria_optimization_cmaes_examples_CMAExample1J8/wala0cfa.csv,2,fr/inria/optimization/cmaes/PrintfFormat.sprintf:(I)Ljava/lang/String;,fr/inria/optimization/cmaes/PrintfFormat$ConversionSpecification.internalsprintf:(I)Ljava/lang/String;,"public String sprintf(int x) throws IllegalArgumentException {
    Enumeration e = vFmt.elements();
    ConversionSpecification cs = null;
    char c = 0;
    StringBuffer sb = new StringBuffer();
    while (e.hasMoreElements()) {
        cs = (ConversionSpecification) e.nextElement();
        c = cs.getConversionCharacter();
        if (c == '\0')
            sb.append(cs.getLiteral());
        else if (c == '%')
            sb.append(""%"");
        else
            sb.append(cs.internalsprintf(x));
    }
    return sb.toString();
}","String internalsprintf(int s) throws IllegalArgumentException {
    String s2 = """";
    switch(conversionCharacter) {
        case 'd':
        case 'i':
            if (optionalh)
                s2 = printDFormat((short) s);
            else if (optionall)
                s2 = printDFormat((long) s);
            else
                s2 = printDFormat(s);
            break;
        case 'x':
        case 'X':
            if (optionalh)
                s2 = printXFormat((short) s);
            else if (optionall)
                s2 = printXFormat((long) s);
            else
                s2 = printXFormat(s);
            break;
        case 'o':
            if (optionalh)
                s2 = printOFormat((short) s);
            else if (optionall)
                s2 = printOFormat((long) s);
            else
                s2 = printOFormat(s);
            break;
        case 'c':
        case 'C':
            s2 = printCFormat((char) s);
            break;
        default:
            throw new IllegalArgumentException(""Cannot format a int with a format using a "" + conversionCharacter + "" conversion character."");
    }
    return s2;
}",invocation_new,87,1,1,1,TRUE,internalsprintf,1,1,0,fr.inria.optimization.cmaes.PrintfFormat,,[],[],fr.inria.optimization.cmaes.PrintfFormat$ConversionSpecification,[],[]
1,../replication_package/raw_data/url433bec1e56_sarobe_DifficultyInvestigation_tgz-pJ8-fr_inria_optimization_cmaes_examples_CMAExample1J8/wala0cfa.csv,5,fr/inria/optimization/cmaes/CMAEvolutionStrategy.readProperties:(Ljava/lang/String;)Ljava/util/Properties;,fr/inria/optimization/cmaes/IntDouble.compare:(Ljava/lang/Object;Ljava/lang/Object;)I,"public Properties readProperties(String fileName) {
    this.propertiesFileName = fileName;
    try {
        java.io.FileInputStream fis = new java.io.FileInputStream(fileName);
        properties.load(fis);
        fis.close();
    } catch (java.io.IOException e) {
        warning(""File '"" + fileName + ""' not found, no options read"");
    }
    setFromProperties(properties);
    return properties;
}","class IntDouble { int compare ( Object a0, Object a1, ) { return int1; }",trans,10,0,1,0,FALSE,compare,0,0,0,fr.inria.optimization.cmaes.CMAEvolutionStrategy,"public final java.lang.String versionNumber;, public fr.inria.optimization.cmaes.CMAOptions options;, public fr.inria.optimization.cmaes.CMAParameters parameters;, public fr.inria.optimization.cmaes.CMAEvolutionStrategy$StopCondition stopConditions;, java.util.Random rand;, final fr.inria.optimization.cmaes.CMAEvolutionStrategy$MyMath math;, protected fr.inria.optimization.cmaes.CMAEvolutionStrategy$FitnessCollector fit;, java.lang.String propertiesFileName;, java.util.Properties properties;, fr.inria.optimization.cmaes.CMAEvolutionStrategy$Timing timings;",[java.io.Serializable],[],fr.inria.optimization.cmaes.IntDouble,[java.util.Comparator<fr.inria.optimization.cmaes.IntDouble>],[]
1,../replication_package/raw_data/url433bec1e56_sarobe_DifficultyInvestigation_tgz-pJ8-fr_inria_optimization_cmaes_examples_CMAExample1J8/wala0cfa.csv,7,fr/inria/optimization/cmaes/CMAEvolutionStrategy.getPrintLine:()Ljava/lang/String;,fr/inria/optimization/cmaes/PrintfFormat.<init>:(Ljava/util/Locale;Ljava/lang/String;)V,"public String getPrintLine() {
    String s;
    if (state < 0)
        s = new String(new PrintfFormat(Locale.US, "" %4d"").sprintf(countiter) + new PrintfFormat(Locale.US, ""(%2d), "").sprintf(0) + new PrintfFormat(Locale.US, ""%6.0d: "").sprintf(counteval));
    else
        s = new String(new PrintfFormat(Locale.US, "" %4d"").sprintf(countiter) + new PrintfFormat(Locale.US, ""(%2d), "").sprintf(idxRecentOffspring + 1) + new PrintfFormat(Locale.US, ""%6.0d: "").sprintf(counteval) + new PrintfFormat(Locale.US, ""%.16e "").sprintf(recentFunctionValue) + new PrintfFormat(Locale.US, ""(%+.0e,"").sprintf(getBestFunctionValue() - recentFunctionValue) + new PrintfFormat(Locale.US, ""%.0e) | "").sprintf(recentMaxFunctionValue - recentFunctionValue) + new PrintfFormat(Locale.US, ""%2d:"").sprintf(math.maxidx(math.diag(C))) + new PrintfFormat(Locale.US, ""%8.1e "").sprintf(sigma * maxsqrtdiagC) + new PrintfFormat(Locale.US, ""%2d:"").sprintf(math.minidx(math.diag(C))) + new PrintfFormat(Locale.US, ""%8.1e "").sprintf(sigma * minsqrtdiagC) + new PrintfFormat(Locale.US, ""| %6.1e "").sprintf(sigma * math.min(diagD)) + new PrintfFormat(Locale.US, ""%6.1e "").sprintf(sigma) + new PrintfFormat(Locale.US, ""%6.2f"").sprintf(axisratio) + new PrintfFormat(Locale.US, ""   | %4.1f "").sprintf((System.currentTimeMillis() - timings.start) / 1000.) + new PrintfFormat(Locale.US, ""%4.1f "").sprintf(timings.eigendecomposition / 1000.));
    return s;
}","public PrintfFormat(Locale locale, String fmtArg) throws IllegalArgumentException {
    dfs = new DecimalFormatSymbols(locale);
    int ePos = 0;
    ConversionSpecification sFmt = null;
    String unCS = this.nonControl(fmtArg, 0);
    if (unCS != null) {
        sFmt = new ConversionSpecification();
        sFmt.setLiteral(unCS);
        vFmt.addElement(sFmt);
    }
    while (cPos != -1 && cPos < fmtArg.length()) {
        for (ePos = cPos + 1; ePos < fmtArg.length(); ePos++) {
            char c = 0;
            c = fmtArg.charAt(ePos);
            if (c == 'i')
                break;
            if (c == 'd')
                break;
            if (c == 'f')
                break;
            if (c == 'g')
                break;
            if (c == 'G')
                break;
            if (c == 'o')
                break;
            if (c == 'x')
                break;
            if (c == 'X')
                break;
            if (c == 'e')
                break;
            if (c == 'E')
                break;
            if (c == 'c')
                break;
            if (c == 's')
                break;
            if (c == '%')
                break;
        }
        ePos = Math.min(ePos + 1, fmtArg.length());
        sFmt = new ConversionSpecification(fmtArg.substring(cPos, ePos));
        vFmt.addElement(sFmt);
        unCS = this.nonControl(fmtArg, ePos);
        if (unCS != null) {
            sFmt = new ConversionSpecification();
            sFmt.setLiteral(unCS);
            vFmt.addElement(sFmt);
        }
    }
}",invocation_constructor,30,1,1,0,TRUE,PrintfFormat,1,1,0,fr.inria.optimization.cmaes.CMAEvolutionStrategy,"public final java.lang.String versionNumber;, public fr.inria.optimization.cmaes.CMAOptions options;, public fr.inria.optimization.cmaes.CMAParameters parameters;, public fr.inria.optimization.cmaes.CMAEvolutionStrategy$StopCondition stopConditions;, java.util.Random rand;, final fr.inria.optimization.cmaes.CMAEvolutionStrategy$MyMath math;, protected fr.inria.optimization.cmaes.CMAEvolutionStrategy$FitnessCollector fit;, java.lang.String propertiesFileName;, java.util.Properties properties;, fr.inria.optimization.cmaes.CMAEvolutionStrategy$Timing timings;",[java.io.Serializable],[],fr.inria.optimization.cmaes.PrintfFormat,[],[]
2,../replication_package/raw_data/url354ce1a2d1_dagaren_gladiator_chess_tgz-pJ8-es_dagaren_gladiator_main_MainJ8/wala0cfa.csv,45,es/dagaren/gladiator/representation/BitboardPosition.doMove:(Les/dagaren/gladiator/representation/Movement;)Z,es/dagaren/gladiator/representation/IrreversibleState.<init>:()V,"public boolean doMove(Movement mov) {
    IrreversibleState state = new IrreversibleState();
    state.enPassantSquare = this.enPassantSquare;
    state.fiftyMovesCounter = this.fiftyMovesRuleIndex;
    state.longCastling[Colour.WHITE.index] = this.whiteCastlingLong;
    state.longCastling[Colour.BLACK.index] = this.blackCastlingLong;
    state.shortCastling[Colour.WHITE.index] = this.whiteCastlingShort;
    state.shortCastling[Colour.BLACK.index] = this.blackCastlingShort;
    stateStack.addLast(state);
    resetMoves();
    Piece sp = mov.getSourcePiece();
    Piece dp = mov.getDestinationPiece();
    Piece pp = mov.getPromotionPiece();
    Square ss = mov.getSource();
    Square ds = mov.getDestination();
    removePiece(ss);
    removePiece(ds);
    if (mov.isInPassant()) {
        removePiece(enPassantSquareSource[ds.index]);
    }
    if (pp != null) {
        putPiece(pp, ds);
    } else {
        putPiece(sp, ds);
    }
    if (sp == Piece.WHITE_KING && ss == Square.e1) {
        if (ds == Square.g1) {
            removePiece(Square.h1);
            putPiece(Piece.WHITE_ROOK, Square.f1);
        } else if (ds == Square.c1) {
            removePiece(Square.a1);
            putPiece(Piece.WHITE_ROOK, Square.d1);
        }
    } else if (sp == Piece.BLACK_KING && ss == Square.e8) {
        if (ds == Square.g8) {
            removePiece(Square.h8);
            putPiece(Piece.BLACK_ROOK, Square.f8);
        } else if (ds == Square.c8) {
            removePiece(Square.a8);
            putPiece(Piece.BLACK_ROOK, Square.d8);
        }
    }
    if (sp.genericPiece == GenericPiece.KING) {
        if (sp == Piece.WHITE_KING) {
            this.setCastlingLong(Colour.WHITE, false);
            this.setCastlingShort(Colour.WHITE, false);
        } else if (sp == Piece.BLACK_KING) {
            this.setCastlingLong(Colour.BLACK, false);
            this.setCastlingShort(Colour.BLACK, false);
        }
    } else if (sp.genericPiece == GenericPiece.ROOK) {
        if (sp == Piece.WHITE_ROOK) {
            if (ss == Square.a1) {
                this.setCastlingLong(Colour.WHITE, false);
            } else if (ss == Square.h1) {
                this.setCastlingShort(Colour.WHITE, false);
            }
        } else if (sp == Piece.BLACK_ROOK) {
            if (ss == Square.a8) {
                this.setCastlingLong(Colour.BLACK, false);
            } else if (ss == Square.h8) {
                this.setCastlingShort(Colour.BLACK, false);
            }
        }
    }
    if (dp != null && dp.genericPiece == GenericPiece.ROOK) {
        if (ds == Square.a1 && this.whiteCastlingLong) {
            this.setCastlingLong(Colour.WHITE, false);
        } else if (ds == Square.a8 && this.blackCastlingLong) {
            this.setCastlingLong(Colour.BLACK, false);
        } else if (ds == Square.h1 && this.whiteCastlingShort) {
            this.setCastlingShort(Colour.WHITE, false);
        } else if (ds == Square.h8 && this.blackCastlingShort) {
            this.setCastlingShort(Colour.BLACK, false);
        }
    }
    this.setEnPassantSquare(null);
    if (sp.genericPiece == GenericPiece.PAWN) {
        if (sp == Piece.WHITE_PAWN) {
            if (ss.getRank() == Rank._2 && ds.getRank() == Rank._4) {
                this.setEnPassantSquare(enPassantSquareDestination[ds.index]);
            }
        } else {
            if (ss.getRank() == Rank._7 && ds.getRank() == Rank._5) {
                this.setEnPassantSquare(enPassantSquareDestination[ds.index]);
            }
        }
    }
    if (dp != null || sp.genericPiece == GenericPiece.PAWN || mov.isInPassant()) {
        this.fiftyMovesRuleIndex = 0;
    } else {
        this.fiftyMovesRuleIndex++;
    }
    setTurn(turn.opposite());
    Integer keyValue = gamePositionsHash.get(zobristKey.getKey());
    if (keyValue != null) {
        gamePositionsHash.put(zobristKey.getKey(), keyValue + 1);
    } else {
        gamePositionsHash.put(zobristKey.getKey(), 1);
    }
    updateAttackedFromFull();
    return true;
}",class IrreversibleState { void <init> ( ) { return void1; },invocation_constructor,4,1,1,0,TRUE,IrreversibleState,1,1,0,es.dagaren.gladiator.representation.BitboardPosition,"public static es.dagaren.gladiator.representation.Square[] square;, public static es.dagaren.gladiator.representation.Square[][] bbCastlingShortSquares;, public static es.dagaren.gladiator.representation.Square[][] castlingShortKingSquares;, public static es.dagaren.gladiator.representation.Square[] castlingSourceSquares;, public static es.dagaren.gladiator.representation.Square[] castlingLongDestinationSquares;, public static es.dagaren.gladiator.representation.Square[] castlingShortDestinationSquares;, public static es.dagaren.gladiator.representation.Square[] enPassantSquareDestination;, public static es.dagaren.gladiator.representation.Square[] enPassantSquareSource;, protected java.util.LinkedList<es.dagaren.gladiator.representation.IrreversibleState> stateStack;, es.dagaren.gladiator.representation.Piece[] pieceInSquare;, protected java.util.List<es.dagaren.gladiator.representation.Movement> movesList;, es.dagaren.gladiator.representation.Piece piece;, es.dagaren.gladiator.representation.Piece capture;, es.dagaren.gladiator.representation.Movement mov;, es.dagaren.gladiator.representation.GenericPiece genericPiece;, es.dagaren.gladiator.representation.Piece squarePiece;, es.dagaren.gladiator.representation.Piece capturePiece;, es.dagaren.gladiator.representation.Square sourceSquare;, es.dagaren.gladiator.representation.Square destinationSquare;",[es.dagaren.gladiator.representation.AbstractPosition][es.dagaren.gladiator.representation.Position],[],es.dagaren.gladiator.representation.IrreversibleState,[],[]
2,../replication_package/raw_data/url354ce1a2d1_dagaren_gladiator_chess_tgz-pJ8-es_dagaren_gladiator_main_MainJ8/wala0cfa.csv,47,es/dagaren/gladiator/main/Main.executeXboard:()V,es/dagaren/gladiator/communication/ConsoleCommandController.start:()V,"public static void executeXboard() {
    Engine gladiatorEngine = new Engine();
    CommandController commandController = new ConsoleCommandController();
    EngineController xboardController = new EngineController();
    xboardController.setCommandController(commandController);
    EngineAdapter xboardAdapter = new EngineAdapter();
    xboardAdapter.setEngine(gladiatorEngine);
    xboardAdapter.setEngineController(xboardController);
    xboardController.setReceiver(xboardAdapter);
    commandController.start();
    gladiatorEngine.waitForFinish();
    commandController.stop();
    logger.info(""Terminaci normal de programa"");
}","@Override
public synchronized void start() {
    if (stopped) {
        t = new Thread(this);
        t.setDaemon(true);
        t.start();
    }
}",invocation_new,53,1,1,1,TRUE,start,1,1,1,es.dagaren.gladiator.main.Main,,[],[],es.dagaren.gladiator.communication.ConsoleCommandController,[es.dagaren.gladiator.communication.CommandController][java.lang.Runnable],[]
2,../replication_package/raw_data/url354ce1a2d1_dagaren_gladiator_chess_tgz-pJ8-es_dagaren_gladiator_main_MainJ8/wala0cfa.csv,48,es/dagaren/gladiator/main/Main.executeXboard:()V,es/dagaren/gladiator/communication/ConsoleCommandController.stop:()V,"public static void executeXboard() {
    Engine gladiatorEngine = new Engine();
    CommandController commandController = new ConsoleCommandController();
    EngineController xboardController = new EngineController();
    xboardController.setCommandController(commandController);
    EngineAdapter xboardAdapter = new EngineAdapter();
    xboardAdapter.setEngine(gladiatorEngine);
    xboardAdapter.setEngineController(xboardController);
    xboardController.setReceiver(xboardAdapter);
    commandController.start();
    gladiatorEngine.waitForFinish();
    commandController.stop();
    logger.info(""Terminaci normal de programa"");
}","@Override
public synchronized void stop() {
    stopped = true;
    if (t != null) {
        t.interrupt();
    }
}",invocation_new,61,1,1,0,TRUE,stop,1,1,1,es.dagaren.gladiator.main.Main,,[],[],es.dagaren.gladiator.communication.ConsoleCommandController,[es.dagaren.gladiator.communication.CommandController][java.lang.Runnable],[]
3,../replication_package/raw_data/url4df616fce9_s3e0n1g1_prototype3_tgz-pJ8-Trading_Engine_MainJ8/wala0cfa.csv,239,gui/ChooseStrategy.actionPerformed:(Ljava/awt/event/ActionEvent;)V,gui/ResultDisplay$1.actionPerformed:(Ljava/awt/event/ActionEvent;)V,"public void actionPerformed(ActionEvent e) {
    if (ok == e.getSource()) {
        try {
            Double.parseDouble(threshold.getText());
        } catch (NumberFormatException e1) {
            threshold.setText(""Please enter a number"");
            return;
        }
        thresholdno = Double.parseDouble(threshold.getText());
        try {
            Integer.parseInt(stockAmount.getText());
        } catch (NumberFormatException e1) {
            stockAmount.setText(""Please enter a number"");
            return;
        }
        stockNumber = Integer.parseInt(stockAmount.getText());
        setVisible(false);
        run = true;
    } else if (cancel == e.getSource()) {
        setVisible(false);
        run = false;
    }
}","class ResultDisplay$ { void actionPerformed ( ActionEvent a0, ) { return void1; }",listener,44,0,1,0,FALSE,actionPerformed,0,1,0,gui.ChooseStrategy,,[javax.swing.JDialog][java.awt.event.ActionListener],[],gui.ResultDisplay$1,[java.awt.event.ActionListener],[]
3,../replication_package/raw_data/url4df616fce9_s3e0n1g1_prototype3_tgz-pJ8-Trading_Engine_MainJ8/wala0cfa.csv,245,gui/ChooseStrategy.actionPerformed:(Ljava/awt/event/ActionEvent;)V,gui/FinalOrderbookTable.isCellEditable:(II)Z,"public void actionPerformed(ActionEvent e) {
    if (ok == e.getSource()) {
        try {
            Double.parseDouble(threshold.getText());
        } catch (NumberFormatException e1) {
            threshold.setText(""Please enter a number"");
            return;
        }
        thresholdno = Double.parseDouble(threshold.getText());
        try {
            Integer.parseInt(stockAmount.getText());
        } catch (NumberFormatException e1) {
            stockAmount.setText(""Please enter a number"");
            return;
        }
        stockNumber = Integer.parseInt(stockAmount.getText());
        setVisible(false);
        run = true;
    } else if (cancel == e.getSource()) {
        setVisible(false);
        run = false;
    }
}","public boolean isCellEditable(int row, int col) {
    return false;
}",listener,44,0,1,0,FALSE,isCellEditable,0,1,0,gui.ChooseStrategy,,[javax.swing.JDialog][java.awt.event.ActionListener],[],gui.FinalOrderbookTable,[javax.swing.table.AbstractTableModel],[]
3,../replication_package/raw_data/url4df616fce9_s3e0n1g1_prototype3_tgz-pJ8-Trading_Engine_MainJ8/wala0cfa.csv,255,gui/ChooseStrategy.actionPerformed:(Ljava/awt/event/ActionEvent;)V,org/jfree/chart/ChartPanel.paintComponent:(Ljava/awt/Graphics;)V,"public void actionPerformed(ActionEvent e) {
    if (ok == e.getSource()) {
        try {
            Double.parseDouble(threshold.getText());
        } catch (NumberFormatException e1) {
            threshold.setText(""Please enter a number"");
            return;
        }
        thresholdno = Double.parseDouble(threshold.getText());
        try {
            Integer.parseInt(stockAmount.getText());
        } catch (NumberFormatException e1) {
            stockAmount.setText(""Please enter a number"");
            return;
        }
        stockNumber = Integer.parseInt(stockAmount.getText());
        setVisible(false);
        run = true;
    } else if (cancel == e.getSource()) {
        setVisible(false);
        run = false;
    }
}","class ChartPanel { void paintComponent ( Graphics a0, ) { return void1; }",listener,44,0,1,0,FALSE,paintComponent,0,1,0,gui.ChooseStrategy,,[javax.swing.JDialog][java.awt.event.ActionListener],[],org.jfree.chart.ChartPanel,,
3,../replication_package/raw_data/url4df616fce9_s3e0n1g1_prototype3_tgz-pJ8-Trading_Engine_MainJ8/wala0cfa.csv,1998,gui/StrategySelected.<init>:(Ljava/util/LinkedList;Ljava/util/LinkedList;Ljava/util/LinkedList;Ljava/util/LinkedList;Ljava/util/LinkedList;Ljava/util/LinkedList;)V,org/jfree/text/TextLine.hashCode:()I,"public StrategySelected(LinkedList<String> runResult, LinkedList<ResultData> allTrades, LinkedList<GraphData> allFirstAskList, LinkedList<GraphData> allFirstBidList, LinkedList<GraphData> allStraAsk, LinkedList<GraphData> allStraBid) {
    strategyResult = runResult;
    allCompletedTrade = allTrades;
    askFirstList = allFirstAskList;
    bidFirstList = allFirstBidList;
    strategyAsk = allStraAsk;
    strategyBid = allStraBid;
    JTabbedPane jtb = new JTabbedPane();
    Container con = this.getContentPane();
    con.add(jtb);
    setTitle(""Momentum strategy used"");
    setSize(800, 600);
    setLocationRelativeTo(null);
    setResizable(false);
    JMenuBar menubar = new JMenuBar();
    JMenu file = new JMenu(""File"");
    JMenuItem quit = new JMenuItem(""Close"");
    menubar.add(file);
    file.add(quit);
    setJMenuBar(menubar);
    jtb.addTab(""Analysis"", analysisPanel());
    jtb.addTab(""All Trades"", orderbookPanel());
    jtb.addTab(""Strategy Trades"", strategyTradePanel());
    jtb.addTab(""Strategy Graph"", graphPanel());
    jtb.addTab(""Best Price Graph"", graphPanelLines());
    quit.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent event) {
            setVisible(false);
            dispose();
        }
    });
    setVisible(true);
}",class TextLine { int hashCode ( ) { return int1; },trans,1,0,1,0,FALSE,hashCode,0,0,0,gui.StrategySelected,"public javax.swing.JLabel Strategy;, public javax.swing.JLabel Threshold;, public javax.swing.JLabel LinesRead;, public javax.swing.JLabel MatchedLines;, public javax.swing.JLabel StrategyMatched;, public javax.swing.JLabel UpdatedLines;, public javax.swing.JLabel DeletedLines;, public javax.swing.JLabel BidList;, public javax.swing.JLabel AskList;, public javax.swing.JLabel StrategyBuy;, public javax.swing.JLabel StrategySell;, public javax.swing.JLabel StrategyEndResult;",[javax.swing.JFrame],[],org.jfree.text.TextLine,,
4,../replication_package/raw_data/url3ee04818e8_abliss_poker_tgz-pJ8-TestJ8/wala0cfa.csv,860,Hand.compareTo:(LHand;)I,com/google/common/collect/EmptyImmutableList.get:(I)Ljava/lang/Object;,"@Override
public int compareTo(Hand otherHand) {
    List<Card> thisHand = getHandValues().get(this);
    List<Card> thatHand = getHandValues().get(otherHand);
    if (thisHand == null || thatHand == null) {
        return 0;
    }
    if (thisHand.size() > thatHand.size()) {
        return 1;
    } else if (thisHand.size() < thatHand.size()) {
        return -1;
    }
    for (int i = thisHand.size() - 1; i >= 0; --i) {
        if (thisHand.get(i).getRank().ordinal() < thatHand.get(i).getRank().ordinal()) {
            return 1;
        } else if (thisHand.get(i).getRank().ordinal() > thatHand.get(i).getRank().ordinal()) {
            return -1;
        }
    }
    return 0;
}","class EmptyImmutableList { Object get ( int a0, ) { return Object1; }",invocation_polymorphism,88,1,1,0,TRUE,get,1,1,0,Hand,,[java.lang.Comparable<Hand>],[],com.google.common.collect.EmptyImmutableList,,
4,../replication_package/raw_data/url3ee04818e8_abliss_poker_tgz-pJ8-TestJ8/wala0cfa.csv,945,Deck.remove:(LCard;)LCard;,com/google/common/collect/Multisets$EntrySet.contains:(Ljava/lang/Object;)Z,"public Card remove(Card c) {
    if (cards.contains(c)) {
        cards.remove(c);
        return c;
    } else {
        throw new IllegalArgumentException(""Deck doesn't contain "" + c);
    }
}","class Multisets$EntrySet { boolean contains ( Object a0, ) { return boolean1; }",invocation_polymorphism,5,0,1,0,TRUE,contains,0,0,0,Deck,java.util.List<Card> cards;,[],[],com.google.common.collect.Multisets$EntrySet,,
4,../replication_package/raw_data/url3ee04818e8_abliss_poker_tgz-pJ8-TestJ8/wala0cfa.csv,1071,Hand.equals:(Ljava/lang/Object;)Z,Hand.equals:(Ljava/lang/Object;)Z,"public boolean equals(Object other) {
    if (!(other instanceof Hand)) {
        return false;
    }
    Hand h = (Hand) other;
    return getCards().equals(h.getCards());
}","public boolean equals(Object other) {
    if (!(other instanceof Hand)) {
        return false;
    }
    Hand h = (Hand) other;
    return getCards().equals(h.getCards());
}",invocation_error,22,0,1,0,TRUE,equals,0,0,0,Hand,,[java.lang.Comparable<Hand>],[],Hand,[java.lang.Comparable<Hand>],[]
5,../replication_package/raw_data/url3472127e1f_SergeyKrivohatskiy_tiny_database_tgz-pJ8-ru_spbau_tinydb_bufferManager_IndexTestJ8/wala0cfa.csv,14,ru/spbau/tinydb/bufferManager/BufferManager.<init>:(Ljava/io/File;)V,ru/spbau/tinydb/queries/Attribute$DoubleType.toString:()Ljava/lang/String;,"public BufferManager(File dbFile) throws DBException {
    try {
        this.dbFile = new RandomAccessFile(dbFile, ""rw"");
    } catch (FileNotFoundException e) {
        throw new DBException(e);
    }
    init();
}","@Override
@NotNull
public String toString() {
    return ""double"";
}",tostring_not_found_trans,97,0,1,0,FALSE,toString,0,0,0,ru.spbau.tinydb.bufferManager.BufferManager,,[],[],ru.spbau.tinydb.queries.Attribute$DoubleType,[ru.spbau.tinydb.queries.Attribute$DataType],[]
5,../replication_package/raw_data/url3472127e1f_SergeyKrivohatskiy_tiny_database_tgz-pJ8-ru_spbau_tinydb_bufferManager_IndexTestJ8/wala0cfa.csv,75,ru/spbau/tinydb/engine/DataBaseEngine$DataBase.insert:(Ljava/lang/String;Ljava/util/List;Ljava/util/List;)I,ru/spbau/tinydb/engine/DataBaseEngine$DataBase.getDefault:(Lru/spbau/tinydb/queries/Attribute$DataType;)Ljava/lang/Object;,"public int insert(@NotNull String tableName, @NotNull List<String> attrs, @NotNull List<Object> record) throws DBException {
    Table table = findTable(tableName);
    Collection<Attribute> schema = table.getSchema();
    Object[] row = new Object[schema.size()];
    int i = 0;
    for (Attribute attr : schema) {
        int idx = attrs.indexOf(attr.getAttributeName());
        if (idx == -1) {
            row[i] = getDefault(attr.getDataType());
        } else {
            row[i] = record.get(idx);
        }
        i += 1;
    }
    try {
        table.insertRecord(row);
    } catch (UnsupportedEncodingException | ExecutionException | ClassCastException e) {
        throw new DBException(e);
    }
    return 1;
}","class DataBaseEngine$DataBase { Object getDefault ( Attribute a0, ) { return Object1; }",invocation_this,89,1,1,0,TRUE,getDefault,1,1,0,ru.spbau.tinydb.engine.DataBaseEngine$DataBase,,[ru.spbau.tinydb.engine.IDataBase][java.lang.AutoCloseable],[],ru.spbau.tinydb.engine.DataBaseEngine$DataBase,[ru.spbau.tinydb.engine.IDataBase][java.lang.AutoCloseable],[]
6,../replication_package/raw_data/url0e7d57473a_kyorohiro_HetimaUtil_tgz-pJ8-net_hetimatan_net_http_HttpServer3xxJ8/wala0cfa.csv,2,net/hetimatan/util/http/HttpGetRequestUri.encode:(Ljava/io/OutputStream;)V,net/hetimatan/util/http/HttpGetRequestUri.encodeAbsolutePath:(Ljava/io/OutputStream;)V,"@Override
public void encode(OutputStream output) throws IOException {
    if (mAbsPath) {
        encodeAbsPath(output);
    } else {
        encodeAbsolutePath(output);
    }
}","public void encodeAbsolutePath(OutputStream output) throws IOException {
    output.write((""http://"" + mHost + "":"" + mPort).getBytes());
    encodeAbsPath(output);
}",invocation_this,17,1,1,0,TRUE,encodeAbsolutePath,1,1,0,net.hetimatan.util.http.HttpGetRequestUri,,[net.hetimatan.util.http.HttpObject],[],net.hetimatan.util.http.HttpGetRequestUri,[net.hetimatan.util.http.HttpObject],[]
6,../replication_package/raw_data/url0e7d57473a_kyorohiro_HetimaUtil_tgz-pJ8-net_hetimatan_net_http_HttpServer3xxJ8/wala0cfa.csv,9,net/hetimatan/util/http/HttpGetRequestUri.absPath:(Lnet/hetimatan/io/file/MarkableReader;)Lnet/hetimatan/util/http/HttpGetRequestUri;,net/hetimatan/util/http/HttpGetRequestUri.fragment:(Lnet/hetimatan/io/file/MarkableReader;)Ljava/lang/String;,"public static HttpGetRequestUri absPath(MarkableReader reader) throws IOException {
    String path = ""/"";
    try {
        path = path(reader);
    } catch (IOException e) {
        ;
    }
    HttpGetRequestUri ret = new HttpGetRequestUri(path);
    try {
        MarkableReaderHelper.match(reader, ""?"".getBytes());
        query(reader, ret);
    } catch (IOException e) {
    }
    try {
        fragment(reader);
    } catch (IOException e) {
    }
    return ret;
}","public static String fragment(MarkableReader reader) throws IOException {
    try {
        MarkableReaderHelper.match(reader, ""#"".getBytes());
        return ""#"" + new String(MarkableReaderHelper.asciiAndGet(reader, """".getBytes(), 256));
    } catch (IOException e) {
        throw e;
    }
}",invocation_this,40,1,1,0,TRUE,fragment,1,1,1,net.hetimatan.util.http.HttpGetRequestUri,,[net.hetimatan.util.http.HttpObject],[],net.hetimatan.util.http.HttpGetRequestUri,[net.hetimatan.util.http.HttpObject],[]
6,../replication_package/raw_data/url0e7d57473a_kyorohiro_HetimaUtil_tgz-pJ8-net_hetimatan_net_http_HttpServer3xxJ8/wala0cfa.csv,16,net/hetimatan/util/http/HttpGetRequestUri.absoluteUri:(Lnet/hetimatan/io/file/MarkableReader;)Lnet/hetimatan/util/http/HttpGetRequestUri;,net/hetimatan/util/http/HttpGetRequestUri.host:(Lnet/hetimatan/io/file/MarkableReader;)Ljava/lang/String;,"public static HttpGetRequestUri absoluteUri(MarkableReader reader) throws IOException {
    int port = 80;
    String path = ""/"";
    scheme(reader);
    MarkableReaderHelper.match(reader, ""://"".getBytes());
    String host = host(reader);
    try {
        MarkableReaderHelper.match(reader, "":"".getBytes());
        port = port(reader);
    } catch (IOException e) {
    }
    try {
        path = path(reader);
    } catch (IOException e) {
        ;
    }
    HttpGetRequestUri ret = new HttpGetRequestUri(path);
    ret.mHost = host;
    ret.mPort = port;
    try {
        MarkableReaderHelper.match(reader, ""?"".getBytes());
        query(reader, ret);
    } catch (IOException e) {
    }
    try {
        fragment(reader);
    } catch (IOException e) {
    }
    return ret;
}","public static String host(MarkableReader reader) throws IOException {
    final byte[] available = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '.', '-' };
    try {
        return new String(MarkableReaderHelper.jumpAndGet(reader, available, 256));
    } catch (IOException e) {
        throw e;
    }
}",invocation_this,21,1,1,0,TRUE,host,1,1,1,net.hetimatan.util.http.HttpGetRequestUri,,[net.hetimatan.util.http.HttpObject],[],net.hetimatan.util.http.HttpGetRequestUri,[net.hetimatan.util.http.HttpObject],[]
6,../replication_package/raw_data/url0e7d57473a_kyorohiro_HetimaUtil_tgz-pJ8-net_hetimatan_net_http_HttpServer3xxJ8/wala0cfa.csv,59,net/hetimatan/util/event/net/io/KyoroSelector.select:(I)I,net/hetimatan/net/http/task/server/HttpServerBootTask.toString:()Ljava/lang/String;,"public int select(int timeout) throws IOException {
    int ret = selectFromMock_Zero();
    if (ret != 0) {
        return ret;
    }
    Selector selector = getSelector();
    if (selector == null) {
        return 0;
    }
    ret = 0;
    if (timeout == 0) {
        ret = selector.selectNow();
    } else {
        ret = selector.select(timeout);
    }
    return ret;
}","@Override
public String toString() {
    return TAG;
}",tostring_not_found_trans,39,0,1,0,FALSE,toString,0,0,0,net.hetimatan.util.event.net.io.KyoroSelector,,[],[],net.hetimatan.net.http.task.server.HttpServerBootTask,[net.hetimatan.util.event.EventTask],[]
7,../replication_package/raw_data/url1a41b8e9f2_mr1azl_INF345_tgz-pJ8-TestParserJ8/wala0cfa.csv,1,xx/SimpleCharStream.readChar:()C,xx/SimpleCharStream.FillBuff:()V,"public char readChar() throws java.io.IOException {
    if (inBuf > 0) {
        --inBuf;
        if (++bufpos == bufsize)
            bufpos = 0;
        return buffer[bufpos];
    }
    if (++bufpos >= maxNextCharInd)
        FillBuff();
    char c = buffer[bufpos];
    UpdateLineColumn(c);
    return c;
}","protected void FillBuff() throws java.io.IOException {
    if (maxNextCharInd == available) {
        if (available == bufsize) {
            if (tokenBegin > 2048) {
                bufpos = maxNextCharInd = 0;
                available = tokenBegin;
            } else if (tokenBegin < 0)
                bufpos = maxNextCharInd = 0;
            else
                ExpandBuff(false);
        } else if (available > tokenBegin)
            available = bufsize;
        else if ((tokenBegin - available) < 2048)
            ExpandBuff(true);
        else
            available = tokenBegin;
    }
    int i;
    try {
        if ((i = inputStream.read(buffer, maxNextCharInd, available - maxNextCharInd)) == -1) {
            inputStream.close();
            throw new java.io.IOException();
        } else
            maxNextCharInd += i;
        return;
    } catch (java.io.IOException e) {
        --bufpos;
        backup(0);
        if (tokenBegin == -1)
            tokenBegin = bufpos;
        throw e;
    }
}",invocation_this,69,1,1,1,TRUE,FillBuff,1,1,0,xx.SimpleCharStream,protected java.io.Reader inputStream;,[],[],xx.SimpleCharStream,[],[]
7,../replication_package/raw_data/url1a41b8e9f2_mr1azl_INF345_tgz-pJ8-TestParserJ8/wala0cfa.csv,536,xx/XPathParser.jj_3R_18:()Z,xx/XPathParser.jj_3R_39:()Z,"private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_27()) {
        jj_scanpos = xsp;
        if (jj_3R_28()) {
            jj_scanpos = xsp;
            if (jj_3R_29()) {
                jj_scanpos = xsp;
                if (jj_3R_30()) {
                    jj_scanpos = xsp;
                    if (jj_3R_31()) {
                        jj_scanpos = xsp;
                        if (jj_3R_32()) {
                            jj_scanpos = xsp;
                            if (jj_3R_33()) {
                                jj_scanpos = xsp;
                                if (jj_3R_34()) {
                                    jj_scanpos = xsp;
                                    if (jj_3R_35()) {
                                        jj_scanpos = xsp;
                                        if (jj_3R_36()) {
                                            jj_scanpos = xsp;
                                            if (jj_3R_37()) {
                                                jj_scanpos = xsp;
                                                if (jj_3R_38()) {
                                                    jj_scanpos = xsp;
                                                    if (jj_3R_39()) {
                                                        jj_scanpos = xsp;
                                                        if (jj_3R_40()) {
                                                            jj_scanpos = xsp;
                                                            if (jj_3R_41()) {
                                                                jj_scanpos = xsp;
                                                                if (jj_3R_42()) {
                                                                    jj_scanpos = xsp;
                                                                    if (jj_3R_43()) {
                                                                        jj_scanpos = xsp;
                                                                        if (jj_3R_44()) {
                                                                            jj_scanpos = xsp;
                                                                            if (jj_3R_45()) {
                                                                                jj_scanpos = xsp;
                                                                                if (jj_3R_46()) {
                                                                                    jj_scanpos = xsp;
                                                                                    if (jj_3R_47()) {
                                                                                        jj_scanpos = xsp;
                                                                                        if (jj_3R_48()) {
                                                                                            jj_scanpos = xsp;
                                                                                            if (jj_3R_49()) {
                                                                                                jj_scanpos = xsp;
                                                                                                if (jj_3R_50()) {
                                                                                                    jj_scanpos = xsp;
                                                                                                    if (jj_3R_51()) {
                                                                                                        jj_scanpos = xsp;
                                                                                                        if (jj_3R_52()) {
                                                                                                            jj_scanpos = xsp;
                                                                                                            if (jj_3R_53()) {
                                                                                                                jj_scanpos = xsp;
                                                                                                                if (jj_3R_54()) {
                                                                                                                    jj_scanpos = xsp;
                                                                                                                    if (jj_3R_55()) {
                                                                                                                        jj_scanpos = xsp;
                                                                                                                        if (jj_3R_56())
                                                                                                                            return true;
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return false;
}","private boolean jj_3R_39() {
    if (jj_scan_token(FUNCTION_SUBSTRING_AFTER))
        return true;
    return false;
}",invocation_this,150,1,1,1,TRUE,jj_3R_39,1,1,0,xx.XPathParser,"public xx.XPathParserTokenManager token_source;, xx.SimpleCharStream jj_input_stream;, public xx.Token token;, public xx.Token jj_nt;",[xx.XPathParserConstants],[],xx.XPathParser,[xx.XPathParserConstants],[]
7,../replication_package/raw_data/url1a41b8e9f2_mr1azl_INF345_tgz-pJ8-TestParserJ8/wala0cfa.csv,545,xx/XPathParser.jj_3R_115:()Z,xx/XPathParser.jj_3R_118:()Z,"private boolean jj_3R_115() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_118()) {
        jj_scanpos = xsp;
        if (jj_3R_119())
            return true;
    }
    return false;
}","private boolean jj_3R_118() {
    if (jj_scan_token(EQ))
        return true;
    if (jj_3R_114())
        return true;
    return false;
}",invocation_this,6,1,1,0,TRUE,jj_3R_118,1,1,0,xx.XPathParser,"public xx.XPathParserTokenManager token_source;, xx.SimpleCharStream jj_input_stream;, public xx.Token token;, public xx.Token jj_nt;",[xx.XPathParserConstants],[],xx.XPathParser,[xx.XPathParserConstants],[]
7,../replication_package/raw_data/url1a41b8e9f2_mr1azl_INF345_tgz-pJ8-TestParserJ8/wala0cfa.csv,1013,xx/XPathParser.CoreFunctionName:()I,xx/ParseException.<init>:()V,"final public int CoreFunctionName() throws ParseException {
    int code;
    switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
        case FUNCTION_LAST:
            jj_consume_token(FUNCTION_LAST);
            code = Compiler.FUNCTION_LAST;
            break;
        case FUNCTION_POSITION:
            jj_consume_token(FUNCTION_POSITION);
            code = Compiler.FUNCTION_POSITION;
            break;
        case FUNCTION_COUNT:
            jj_consume_token(FUNCTION_COUNT);
            code = Compiler.FUNCTION_COUNT;
            break;
        case FUNCTION_ID:
            jj_consume_token(FUNCTION_ID);
            code = Compiler.FUNCTION_ID;
            break;
        case FUNCTION_LOCAL_NAME:
            jj_consume_token(FUNCTION_LOCAL_NAME);
            code = Compiler.FUNCTION_LOCAL_NAME;
            break;
        case FUNCTION_NAMESPACE_URI:
            jj_consume_token(FUNCTION_NAMESPACE_URI);
            code = Compiler.FUNCTION_NAMESPACE_URI;
            break;
        case FUNCTION_NAME:
            jj_consume_token(FUNCTION_NAME);
            code = Compiler.FUNCTION_NAME;
            break;
        case FUNCTION_STRING:
            jj_consume_token(FUNCTION_STRING);
            code = Compiler.FUNCTION_STRING;
            break;
        case FUNCTION_CONCAT:
            jj_consume_token(FUNCTION_CONCAT);
            code = Compiler.FUNCTION_CONCAT;
            break;
        case FUNCTION_STARTS_WITH:
            jj_consume_token(FUNCTION_STARTS_WITH);
            code = Compiler.FUNCTION_STARTS_WITH;
            break;
        case FUNCTION_CONTAINS:
            jj_consume_token(FUNCTION_CONTAINS);
            code = Compiler.FUNCTION_CONTAINS;
            break;
        case FUNCTION_SUBSTRING_BEFORE:
            jj_consume_token(FUNCTION_SUBSTRING_BEFORE);
            code = Compiler.FUNCTION_SUBSTRING_BEFORE;
            break;
        case FUNCTION_SUBSTRING_AFTER:
            jj_consume_token(FUNCTION_SUBSTRING_AFTER);
            code = Compiler.FUNCTION_SUBSTRING_AFTER;
            break;
        case FUNCTION_SUBSTRING:
            jj_consume_token(FUNCTION_SUBSTRING);
            code = Compiler.FUNCTION_SUBSTRING;
            break;
        case FUNCTION_STRING_LENGTH:
            jj_consume_token(FUNCTION_STRING_LENGTH);
            code = Compiler.FUNCTION_STRING_LENGTH;
            break;
        case FUNCTION_NORMALIZE_SPACE:
            jj_consume_token(FUNCTION_NORMALIZE_SPACE);
            code = Compiler.FUNCTION_NORMALIZE_SPACE;
            break;
        case FUNCTION_TRANSLATE:
            jj_consume_token(FUNCTION_TRANSLATE);
            code = Compiler.FUNCTION_TRANSLATE;
            break;
        case FUNCTION_BOOLEAN:
            jj_consume_token(FUNCTION_BOOLEAN);
            code = Compiler.FUNCTION_BOOLEAN;
            break;
        case FUNCTION_NOT:
            jj_consume_token(FUNCTION_NOT);
            code = Compiler.FUNCTION_NOT;
            break;
        case FUNCTION_TRUE:
            jj_consume_token(FUNCTION_TRUE);
            code = Compiler.FUNCTION_TRUE;
            break;
        case FUNCTION_FALSE:
            jj_consume_token(FUNCTION_FALSE);
            code = Compiler.FUNCTION_FALSE;
            break;
        case FUNCTION_NULL:
            jj_consume_token(FUNCTION_NULL);
            code = Compiler.FUNCTION_NULL;
            break;
        case FUNCTION_LANG:
            jj_consume_token(FUNCTION_LANG);
            code = Compiler.FUNCTION_LANG;
            break;
        case FUNCTION_NUMBER:
            jj_consume_token(FUNCTION_NUMBER);
            code = Compiler.FUNCTION_NUMBER;
            break;
        case FUNCTION_SUM:
            jj_consume_token(FUNCTION_SUM);
            code = Compiler.FUNCTION_SUM;
            break;
        case FUNCTION_FLOOR:
            jj_consume_token(FUNCTION_FLOOR);
            code = Compiler.FUNCTION_FLOOR;
            break;
        case FUNCTION_CEILING:
            jj_consume_token(FUNCTION_CEILING);
            code = Compiler.FUNCTION_CEILING;
            break;
        case FUNCTION_ROUND:
            jj_consume_token(FUNCTION_ROUND);
            code = Compiler.FUNCTION_ROUND;
            break;
        case FUNCTION_KEY:
            jj_consume_token(FUNCTION_KEY);
            code = Compiler.FUNCTION_KEY;
            break;
        case FUNCTION_FORMAT_NUMBER:
            jj_consume_token(FUNCTION_FORMAT_NUMBER);
            code = Compiler.FUNCTION_FORMAT_NUMBER;
            break;
        default:
            jj_la1[2] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
    }
    {
        if (true)
            return code;
    }
    throw new Error(""Missing return statement in function"");
}","public ParseException() {
    super();
}",exception_throw,557,1,1,0,TRUE,ParseException,1,1,0,xx.XPathParser,"public xx.XPathParserTokenManager token_source;, xx.SimpleCharStream jj_input_stream;, public xx.Token token;, public xx.Token jj_nt;",[xx.XPathParserConstants],[],xx.ParseException,[java.lang.Exception],[]
7,../replication_package/raw_data/url1a41b8e9f2_mr1azl_INF345_tgz-pJ8-TestParserJ8/wala0cfa.csv,1071,xx/XPathParser.NodeType:()I,xx/XPathParser.jj_ntk:()I,"final public int NodeType() throws ParseException {
    int type;
    switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
        case TEXT:
            jj_consume_token(TEXT);
            type = Compiler.NODE_TYPE_TEXT;
            break;
        case NODE:
            jj_consume_token(NODE);
            type = Compiler.NODE_TYPE_NODE;
            break;
        case COMMENT:
            jj_consume_token(COMMENT);
            type = Compiler.NODE_TYPE_COMMENT;
            break;
        case PI:
            jj_consume_token(PI);
            type = Compiler.NODE_TYPE_PI;
            break;
        default:
            jj_la1[38] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
    }
    {
        if (true)
            return type;
    }
    throw new Error(""Missing return statement in function"");
}","private int jj_ntk() {
    if ((jj_nt = token.next) == null)
        return (jj_ntk = (token.next = token_source.getNextToken()).kind);
    else
        return (jj_ntk = jj_nt.kind);
}",invocation_this,9,1,1,0,TRUE,jj_ntk,1,1,0,xx.XPathParser,"public xx.XPathParserTokenManager token_source;, xx.SimpleCharStream jj_input_stream;, public xx.Token token;, public xx.Token jj_nt;",[xx.XPathParserConstants],[],xx.XPathParser,[xx.XPathParserConstants],[]
8,../replication_package/raw_data/url054c08669f_jules2689_CSI4124_tgz-pJ8-SMThemeParkExperi3J8/wala0cfa.csv,29,simModel/SMThemePark.<init>:(DDIIIZLsimModel/Seeds;Z)V,simModel/Output.<init>:(LsimModel/SMThemePark;)V,"public SMThemePark(double t0time, double tftime, int nTrains, int nCars, int boardingOption, boolean fixBoardingTime, Seeds sd, boolean traceFlag) {
    this.traceFlag = traceFlag;
    this.numberOfTrains = nTrains;
    this.totalNumberOfCars = nCars;
    this.boardingOption = boardingOption;
    this.fixBoardingTime = fixBoardingTime;
    rvp = new RVPs(this, sd);
    String[] names = new String[] { Constants.FP_S, Constants.SH_S, Constants.GI_S, Constants.RC_S };
    for (int i = 0; i < Constants.NUM_STATIONS; i++) {
        this.gStations[i] = new Stations(names[i]);
    }
    for (int i = 0; i < this.rqTracks.length; i++) {
        this.rqTracks[i] = new Tracks();
    }
    closingTime = tftime - 30;
    initAOSimulModel(t0time, tftime);
    Initialise init = new Initialise(this);
    scheduleAction(init);
    ArriveAtStationFP arrivalFP = new ArriveAtStationFP(this);
    scheduleAction(arrivalFP);
    ArriveAtStationGI arrivalGI = new ArriveAtStationGI(this);
    scheduleAction(arrivalGI);
    ArriveAtStationRC arrivalRC = new ArriveAtStationRC(this);
    scheduleAction(arrivalRC);
    ArriveAtStationSH arrivalSH = new ArriveAtStationSH(this);
    scheduleAction(arrivalSH);
}","Output(SMThemePark model) {
    this.model = model;
}",member_variable_initialization,50,1,1,1,FALSE,Output,1,1,0,simModel.SMThemePark,"simModel.Tracks[] rqTracks;, simModel.Stations[] gStations;, simModel.Trains[] rcgTrains;, protected simModel.RVPs rvp;, protected simModel.DVPs dvp;, protected simModel.UDPs udp;, public simModel.Output output;",[absmodJ.AOSimulationModel],[],simModel.Output,[],[]
8,../replication_package/raw_data/url054c08669f_jules2689_CSI4124_tgz-pJ8-SMThemeParkExperi3J8/wala0cfa.csv,183,SMThemeParkExperi3.computeLastCFLevel:([D)[D,absmodJ/SBNotice.equals:(Ljava/lang/Object;)Z,"public static double[] computeLastCFLevel(double[] levels) {
    double[] newLevels = new double[levels.length + 1];
    double alphaK = 1.0 - levels[0];
    newLevels[0] = levels[0];
    for (int k = 1; k < levels.length; k++) {
        alphaK = alphaK - (1 - levels[k]);
        newLevels[k] = levels[k];
    }
    newLevels[newLevels.length - 1] = 1.0 - alphaK;
    double sum = 0.0;
    for (int k = 1; k < newLevels.length; k++) sum = sum + (1 - newLevels[k]);
    if (Math.abs(newLevels[0] - (1.0 - sum)) > 0.001) {
        System.out.println(""Last value invalid in Confidence Levels: "" + Arrays.toString(newLevels));
        newLevels = null;
    }
    return (newLevels);
}","class SBNotice { boolean equals ( Object a0, ) { return boolean1; }",trans,134,0,1,0,FALSE,equals,0,0,1,SMThemeParkExperi3,,[],[],absmodJ.SBNotice,,
8,../replication_package/raw_data/url054c08669f_jules2689_CSI4124_tgz-pJ8-SMThemeParkExperi3J8/wala0cfa.csv,326,simModel/SMThemePark.eventOccured:()V,absmodJ/SBNotice.compareTo:(Ljava/lang/Object;)I,"protected void eventOccured() {
    if (traceFlag) {
        if (!ScheduledAction.class.isInstance(this.sbl.peek().behaviourInstance)) {
            System.out.println(""Clock: "" + getClock() + "": "");
            for (int i = 0; i < Constants.NUM_STATIONS; i++) {
                System.out.println(gStations[i].name + "" numCustomers="" + gStations[i].numCustomers);
                System.out.println(gStations[i].name + ""'s Track size="" + this.rqTracks[i].getN());
                for (int j = 0; j < this.rqTracks[i].getN(); j++) {
                    Trains t = rcgTrains[rqTracks[i].trainList.get(j)];
                    System.out.println(""Train "" + j + "" numCustomers="" + t.numCustomers + "" status="" + t.status + "" numLeavingCustomers="" + t.numLeavingCustomers[i]);
                }
                System.out.println();
            }
            System.out.println(""Number of Type 1 Events: "" + output.getType1BoardingEvent());
            System.out.println(""Number of Type 2 Events: "" + output.getType2BoardingEvent());
            System.out.println(""Number of Type 3 Events: "" + output.getType3BoardingEvent());
            System.out.println(""Number of Type 4 Events: "" + output.getType4BoardingEvent() + ""\n"");
            this.showSBL();
        }
    }
}","class SBNotice { int compareTo ( Object a0, ) { return int1; }",trans,270,0,1,0,FALSE,compareTo,0,0,0,simModel.SMThemePark,"simModel.Tracks[] rqTracks;, simModel.Stations[] gStations;, simModel.Trains[] rcgTrains;, protected simModel.RVPs rvp;, protected simModel.DVPs dvp;, protected simModel.UDPs udp;, public simModel.Output output;",[absmodJ.AOSimulationModel],[],absmodJ.SBNotice,,
9,../replication_package/raw_data/url0d084b4168_zhourui392_BaiduPicDown_tgz-pJ8-org_json_TestJ8/wala0cfa.csv,6,org/json/JSONObject.getDouble:(Ljava/lang/String;)D,org/json/JSONObject$Null.toString:()Ljava/lang/String;,"public double getDouble(String key) throws JSONException {
    Object o = get(key);
    try {
        return o instanceof Number ? ((Number) o).doubleValue() : Double.valueOf((String) o).doubleValue();
    } catch (Exception e) {
        throw new JSONException(""JSONObject["" + quote(key) + ""] is not a number."");
    }
}","public String toString() {
    return ""null"";
}",tostring_not_found_multijump,27,0,1,0,FALSE,toString,0,0,0,org.json.JSONObject,public static final java.lang.Object NULL;,[],[],org.json.JSONObject$Null,[],[]
9,../replication_package/raw_data/url0d084b4168_zhourui392_BaiduPicDown_tgz-pJ8-org_json_TestJ8/wala0cfa.csv,18,org/json/JSONObject.stringToValue:(Ljava/lang/String;)Ljava/lang/Object;,org/json/Test$1Obj.toString:()Ljava/lang/String;,"static public Object stringToValue(String s) {
    if (s.equals("""")) {
        return s;
    }
    if (s.equalsIgnoreCase(""true"")) {
        return Boolean.TRUE;
    }
    if (s.equalsIgnoreCase(""false"")) {
        return Boolean.FALSE;
    }
    if (s.equalsIgnoreCase(""null"")) {
        return JSONObject.NULL;
    }
    char b = s.charAt(0);
    if ((b >= '0' && b <= '9') || b == '.' || b == '-' || b == '+') {
        if (b == '0' && s.length() > 2 && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {
            try {
                return new Integer(Integer.parseInt(s.substring(2), 16));
            } catch (Exception ignore) {
            }
        }
        try {
            if (s.indexOf('.') > -1 || s.indexOf('e') > -1 || s.indexOf('E') > -1) {
                return Double.valueOf(s);
            } else {
                Long myLong = new Long(s);
                if (myLong.longValue() == myLong.intValue()) {
                    return new Integer(myLong.intValue());
                } else {
                    return myLong;
                }
            }
        } catch (Exception ignore) {
        }
    }
    return s;
}",class Test$Obj { String toString ( ) { return String1; },tostring_not_found_trans,170,0,1,0,FALSE,toString,0,0,1,org.json.JSONObject,public static final java.lang.Object NULL;,[],[],org.json.Test$1Obj,[org.json.JSONString],[]
9,../replication_package/raw_data/url0d084b4168_zhourui392_BaiduPicDown_tgz-pJ8-org_json_TestJ8/wala0cfa.csv,673,org/json/HTTP.toString:(Lorg/json/JSONObject;)Ljava/lang/String;,org/json/JSONException.getCause:()Ljava/lang/Throwable;,"public static String toString(JSONObject o) throws JSONException {
    Iterator keys = o.keys();
    String s;
    StringBuffer sb = new StringBuffer();
    if (o.has(""Status-Code"") && o.has(""Reason-Phrase"")) {
        sb.append(o.getString(""HTTP-Version""));
        sb.append(' ');
        sb.append(o.getString(""Status-Code""));
        sb.append(' ');
        sb.append(o.getString(""Reason-Phrase""));
    } else if (o.has(""Method"") && o.has(""Request-URI"")) {
        sb.append(o.getString(""Method""));
        sb.append(' ');
        sb.append('""');
        sb.append(o.getString(""Request-URI""));
        sb.append('""');
        sb.append(' ');
        sb.append(o.getString(""HTTP-Version""));
    } else {
        throw new JSONException(""Not enough material for an HTTP header."");
    }
    sb.append(CRLF);
    while (keys.hasNext()) {
        s = keys.next().toString();
        if (!s.equals(""HTTP-Version"") && !s.equals(""Status-Code"") && !s.equals(""Reason-Phrase"") && !s.equals(""Method"") && !s.equals(""Request-URI"") && !o.isNull(s)) {
            sb.append(s);
            sb.append("": "");
            sb.append(o.getString(s));
            sb.append(CRLF);
        }
    }
    sb.append(CRLF);
    return sb.toString();
}","public Throwable getCause() {
    return this.cause;
}",exception_info,195,0,1,0,FALSE,getCause,0,1,1,org.json.HTTP,public static final java.lang.String CRLF;,[],[],org.json.JSONException,[java.lang.Exception],[]
9,../replication_package/raw_data/url0d084b4168_zhourui392_BaiduPicDown_tgz-pJ8-org_json_TestJ8/wala0cfa.csv,876,org/json/JSONObject.populateMap:(Ljava/lang/Object;)V,org/json/JSONObject$Null.equals:(Ljava/lang/Object;)Z,"private void populateMap(Object bean) {
    Class klass = bean.getClass();
    boolean includeSuperClass = klass.getClassLoader() != null;
    Method[] methods = (includeSuperClass) ? klass.getMethods() : klass.getDeclaredMethods();
    for (int i = 0; i < methods.length; i += 1) {
        try {
            Method method = methods[i];
            if (Modifier.isPublic(method.getModifiers())) {
                String name = method.getName();
                String key = """";
                if (name.startsWith(""get"")) {
                    if (name.equals(""getClass"") || name.equals(""getDeclaringClass"")) {
                        key = """";
                    } else {
                        key = name.substring(3);
                    }
                } else if (name.startsWith(""is"")) {
                    key = name.substring(2);
                }
                if (key.length() > 0 && Character.isUpperCase(key.charAt(0)) && method.getParameterTypes().length == 0) {
                    if (key.length() == 1) {
                        key = key.toLowerCase();
                    } else if (!Character.isUpperCase(key.charAt(1))) {
                        key = key.substring(0, 1).toLowerCase() + key.substring(1);
                    }
                    Object result = method.invoke(bean, (Object[]) null);
                    map.put(key, wrap(result));
                }
            }
        } catch (Exception ignore) {
        }
    }
}","public boolean equals(Object object) {
    return object == null || object == this;
}",invocation_error,258,0,1,0,TRUE,equals,0,0,0,org.json.JSONObject,public static final java.lang.Object NULL;,[],[],org.json.JSONObject$Null,[],[]
9,../replication_package/raw_data/url0d084b4168_zhourui392_BaiduPicDown_tgz-pJ8-org_json_TestJ8/wala0cfa.csv,960,org/json/Cookie.toString:(Lorg/json/JSONObject;)Ljava/lang/String;,org/json/Cookie.escape:(Ljava/lang/String;)Ljava/lang/String;,"public static String toString(JSONObject o) throws JSONException {
    StringBuffer sb = new StringBuffer();
    sb.append(escape(o.getString(""name"")));
    sb.append(""="");
    sb.append(escape(o.getString(""value"")));
    if (o.has(""expires"")) {
        sb.append("";expires="");
        sb.append(o.getString(""expires""));
    }
    if (o.has(""domain"")) {
        sb.append("";domain="");
        sb.append(escape(o.getString(""domain"")));
    }
    if (o.has(""path"")) {
        sb.append("";path="");
        sb.append(escape(o.getString(""path"")));
    }
    if (o.optBoolean(""secure"")) {
        sb.append("";secure"");
    }
    return sb.toString();
}","public static String escape(String string) {
    char c;
    String s = string.trim();
    StringBuffer sb = new StringBuffer();
    int len = s.length();
    for (int i = 0; i < len; i += 1) {
        c = s.charAt(i);
        if (c < ' ' || c == '+' || c == '%' || c == '=' || c == ';') {
            sb.append('%');
            sb.append(Character.forDigit((char) ((c >>> 4) & 0x0f), 16));
            sb.append(Character.forDigit((char) (c & 0x0f), 16));
        } else {
            sb.append(c);
        }
    }
    return sb.toString();
}",invocation_this,123,1,1,0,TRUE,escape,1,1,1,org.json.Cookie,,[],[],org.json.Cookie,[],[]
10,../replication_package/raw_data/url47087446e9_kellrott_SparqlScape_tgz-pJ8-org_json_TestJ8/wala0cfa.csv,2885,org/json/Test.main:([Ljava/lang/String;)V,org/json/JSONObject$Null.toString:()Ljava/lang/String;,"public static void main(String[] args) {
    Iterator it;
    JSONArray a;
    JSONObject j;
    JSONStringer jj;
    Object o;
    String s;
    class Obj implements JSONString {
        public String aString;
        public double aNumber;
        public boolean aBoolean;
        public Obj(String string, double n, boolean b) {
            this.aString = string;
            this.aNumber = n;
            this.aBoolean = b;
        }
        public double getNumber() {
            return this.aNumber;
        }
        public String getString() {
            return this.aString;
        }
        public boolean isBoolean() {
            return this.aBoolean;
        }
        public String getBENT() {
            return ""All uppercase key"";
        }
        public String getX() {
            return ""x"";
        }
        public String toJSONString() {
            return ""{"" + JSONObject.quote(this.aString) + "":"" + JSONObject.doubleToString(this.aNumber) + ""}"";
        }
        public String toString() {
            return this.getString() + "" "" + this.getNumber() + "" "" + this.isBoolean() + ""."" + this.getBENT() + "" "" + this.getX();
        }
    }
    Obj obj = new Obj(""A beany object"", 42, true);
    try {
        s = ""[0.1]"";
        a = new JSONArray(s);
        System.out.println(a.toString());
        System.out.println("""");
        j = XML.toJSONObject(""<![CDATA[This is a collection of test patterns and examples for org.json.]]>  Ignore the stuff past the end.  "");
        System.out.println(j.toString());
        System.out.println("""");
        j = new JSONObject();
        o = null;
        j.put(""booga"", o);
        j.put(""wooga"", JSONObject.NULL);
        System.out.println(j.toString());
        System.out.println("""");
        j = new JSONObject();
        j.increment(""two"");
        j.increment(""two"");
        System.out.println(j.toString());
        System.out.println("""");
        s = ""<test><blank></blank><empty/></test>"";
        j = XML.toJSONObject(s);
        System.out.println(j.toString(2));
        System.out.println(XML.toString(j));
        System.out.println("""");
        s = ""{     \""list of lists\"" : [         [1, 2, 3],         [4, 5, 6],     ] }"";
        j = new JSONObject(s);
        System.out.println(j.toString(4));
        System.out.println(XML.toString(j));
        s = ""<recipe name=\""bread\"" prep_time=\""5 mins\"" cook_time=\""3 hours\""> <title>Basic bread</title> <ingredient amount=\""8\"" unit=\""dL\"">Flour</ingredient> <ingredient amount=\""10\"" unit=\""grams\"">Yeast</ingredient> <ingredient amount=\""4\"" unit=\""dL\"" state=\""warm\"">Water</ingredient> <ingredient amount=\""1\"" unit=\""teaspoon\"">Salt</ingredient> <instructions> <step>Mix all ingredients together.</step> <step>Knead thoroughly.</step> <step>Cover with a cloth, and leave for one hour in warm room.</step> <step>Knead again.</step> <step>Place in a bread baking tin.</step> <step>Cover with a cloth, and leave for one hour in warm room.</step> <step>Bake in the oven at 180(degrees)C for 30 minutes.</step> </instructions> </recipe> "";
        j = XML.toJSONObject(s);
        System.out.println(j.toString(4));
        System.out.println();
        j = JSONML.toJSONObject(s);
        System.out.println(j.toString());
        System.out.println(JSONML.toString(j));
        System.out.println();
        a = JSONML.toJSONArray(s);
        System.out.println(a.toString(4));
        System.out.println(JSONML.toString(a));
        System.out.println();
        s = ""<div id=\""demo\"" class=\""JSONML\""><p>JSONML is a transformation between <b>JSON</b> and <b>XML</b> that preserves ordering of document features.</p><p>JSONML can work with JSON arrays or JSON objects.</p><p>Three<br/>little<br/>words</p></div>"";
        j = JSONML.toJSONObject(s);
        System.out.println(j.toString(4));
        System.out.println(JSONML.toString(j));
        System.out.println();
        a = JSONML.toJSONArray(s);
        System.out.println(a.toString(4));
        System.out.println(JSONML.toString(a));
        System.out.println();
        s = ""<person created=\""2006-11-11T19:23\"" modified=\""2006-12-31T23:59\"">\n <firstName>Robert</firstName>\n <lastName>Smith</lastName>\n <address type=\""home\"">\n <street>12345 Sixth Ave</street>\n <city>Anytown</city>\n <state>CA</state>\n <postalCode>98765-4321</postalCode>\n </address>\n </person>"";
        j = XML.toJSONObject(s);
        System.out.println(j.toString(4));
        j = new JSONObject(obj);
        System.out.println(j.toString());
        s = ""{ \""entity\"": { \""imageURL\"": \""\"", \""name\"": \""IXXXXXXXXXXXXX\"", \""id\"": 12336, \""ratingCount\"": null, \""averageRating\"": null } }"";
        j = new JSONObject(s);
        System.out.println(j.toString(2));
        jj = new JSONStringer();
        s = jj.object().key(""single"").value(""MARIE HAA'S"").key(""Johnny"").value(""MARIE HAA\\'S"").key(""foo"").value(""bar"").key(""baz"").array().object().key(""quux"").value(""Thanks, Josh!"").endObject().endArray().key(""obj keys"").value(JSONObject.getNames(obj)).endObject().toString();
        System.out.println(s);
        System.out.println(new JSONStringer().object().key(""a"").array().array().array().value(""b"").endArray().endArray().endArray().endObject().toString());
        jj = new JSONStringer();
        jj.array();
        jj.value(1);
        jj.array();
        jj.value(null);
        jj.array();
        jj.object();
        jj.key(""empty-array"").array().endArray();
        jj.key(""answer"").value(42);
        jj.key(""null"").value(null);
        jj.key(""false"").value(false);
        jj.key(""true"").value(true);
        jj.key(""big"").value(123456789e+88);
        jj.key(""small"").value(123456789e-88);
        jj.key(""empty-object"").object().endObject();
        jj.key(""long"");
        jj.value(9223372036854775807L);
        jj.endObject();
        jj.value(""two"");
        jj.endArray();
        jj.value(true);
        jj.endArray();
        jj.value(98.6);
        jj.value(-100.0);
        jj.object();
        jj.endObject();
        jj.object();
        jj.key(""one"");
        jj.value(1.00);
        jj.endObject();
        jj.value(obj);
        jj.endArray();
        System.out.println(jj.toString());
        System.out.println(new JSONArray(jj.toString()).toString(4));
        int[] ar = { 1, 2, 3 };
        JSONArray ja = new JSONArray(ar);
        System.out.println(ja.toString());
        String[] sa = { ""aString"", ""aNumber"", ""aBoolean"" };
        j = new JSONObject(obj, sa);
        j.put(""Testing JSONString interface"", obj);
        System.out.println(j.toString(4));
        j = new JSONObject(""{slashes: '///', closetag: '</script>', backslash:'\\\\', ei: {quotes: '\""\\''},eo: {a: '\""quoted\""', b:\""don't\""}, quotes: [\""'\"", '\""']}"");
        System.out.println(j.toString(2));
        System.out.println(XML.toString(j));
        System.out.println("""");
        j = new JSONObject(""{foo: [true, false,9876543210,    0.0, 1.00000001,  1.000000000001, 1.00000000000000001,"" + "" .00000000000000001, 2.00, 0.1, 2e100, -32,[],{}, \""string\""], "" + ""  to   : null, op : 'Good',"" + ""ten:10} postfix comment"");
        j.put(""String"", ""98.6"");
        j.put(""JSONObject"", new JSONObject());
        j.put(""JSONArray"", new JSONArray());
        j.put(""int"", 57);
        j.put(""double"", 123456789012345678901234567890.);
        j.put(""true"", true);
        j.put(""false"", false);
        j.put(""null"", JSONObject.NULL);
        j.put(""bool"", ""true"");
        j.put(""zero"", -0.0);
        j.put(""\\u2028"", ""\u2028"");
        j.put(""\\u2029"", ""\u2029"");
        a = j.getJSONArray(""foo"");
        a.put(666);
        a.put(2001.99);
        a.put(""so \""fine\""."");
        a.put(""so <fine>."");
        a.put(true);
        a.put(false);
        a.put(new JSONArray());
        a.put(new JSONObject());
        j.put(""keys"", JSONObject.getNames(j));
        System.out.println(j.toString(4));
        System.out.println(XML.toString(j));
        System.out.println(""String: "" + j.getDouble(""String""));
        System.out.println(""  bool: "" + j.getBoolean(""bool""));
        System.out.println(""    to: "" + j.getString(""to""));
        System.out.println(""  true: "" + j.getString(""true""));
        System.out.println(""   foo: "" + j.getJSONArray(""foo""));
        System.out.println(""    op: "" + j.getString(""op""));
        System.out.println(""   ten: "" + j.getInt(""ten""));
        System.out.println(""  oops: "" + j.optBoolean(""oops""));
        s = ""<xml one = 1 two=' \""2\"" '><five></five>First \u0009&lt;content&gt;<five></five> This is \""content\"". <three>  3  </three>JSON does not preserve the sequencing of elements and contents.<three>  III  </three>  <three>  T H R E E</three><four/>Content text is an implied structure in XML. <six content=\""6\""/>JSON does not have implied structure:<seven>7</seven>everything is explicit.<![CDATA[CDATA blocks<are><supported>!]]></xml>"";
        j = XML.toJSONObject(s);
        System.out.println(j.toString(2));
        System.out.println(XML.toString(j));
        System.out.println("""");
        ja = JSONML.toJSONArray(s);
        System.out.println(ja.toString(4));
        System.out.println(JSONML.toString(ja));
        System.out.println("""");
        s = ""<xml do='0'>uno<a re='1' mi='2'>dos<b fa='3'/>tres<c>true</c>quatro</a>cinqo<d>seis<e/></d></xml>"";
        ja = JSONML.toJSONArray(s);
        System.out.println(ja.toString(4));
        System.out.println(JSONML.toString(ja));
        System.out.println("""");
        s = ""<mapping><empty/>   <class name = \""Customer\"">      <field name = \""ID\"" type = \""string\"">         <bind-xml name=\""ID\"" node=\""attribute\""/>      </field>      <field name = \""FirstName\"" type = \""FirstName\""/>      <field name = \""MI\"" type = \""MI\""/>      <field name = \""LastName\"" type = \""LastName\""/>   </class>   <class name = \""FirstName\"">      <field name = \""text\"">         <bind-xml name = \""text\"" node = \""text\""/>      </field>   </class>   <class name = \""MI\"">      <field name = \""text\"">         <bind-xml name = \""text\"" node = \""text\""/>      </field>   </class>   <class name = \""LastName\"">      <field name = \""text\"">         <bind-xml name = \""text\"" node = \""text\""/>      </field>   </class></mapping>"";
        j = XML.toJSONObject(s);
        System.out.println(j.toString(2));
        System.out.println(XML.toString(j));
        System.out.println("""");
        ja = JSONML.toJSONArray(s);
        System.out.println(ja.toString(4));
        System.out.println(JSONML.toString(ja));
        System.out.println("""");
        j = XML.toJSONObject(""<?xml version=\""1.0\"" ?><Book Author=\""Anonymous\""><Title>Sample Book</Title><Chapter id=\""1\"">This is chapter 1. It is not very long or interesting.</Chapter><Chapter id=\""2\"">This is chapter 2. Although it is longer than chapter 1, it is not any more interesting.</Chapter></Book>"");
        System.out.println(j.toString(2));
        System.out.println(XML.toString(j));
        System.out.println("""");
        j = XML.toJSONObject(""<!DOCTYPE bCard 'http://www.cs.caltech.edu/~adam/schemas/bCard'><bCard><?xml default bCard        firstname = ''        lastname  = '' company   = '' email = '' homepage  = ''?><bCard        firstname = 'Rohit'        lastname  = 'Khare'        company   = 'MCI'        email     = 'khare@mci.net'        homepage  = 'http://pest.w3.org/'/><bCard        firstname = 'Adam'        lastname  = 'Rifkin'        company   = 'Caltech Infospheres Project'        email     = 'adam@cs.caltech.edu'        homepage  = 'http://www.cs.caltech.edu/~adam/'/></bCard>"");
        System.out.println(j.toString(2));
        System.out.println(XML.toString(j));
        System.out.println("""");
        j = XML.toJSONObject(""<?xml version=\""1.0\""?><customer>    <firstName>        <text>Fred</text>    </firstName>    <ID>fbs0001</ID>    <lastName> <text>Scerbo</text>    </lastName>    <MI>        <text>B</text>    </MI></customer>"");
        System.out.println(j.toString(2));
        System.out.println(XML.toString(j));
        System.out.println("""");
        j = XML.toJSONObject(""<!ENTITY tp-address PUBLIC '-//ABC University::Special Collections Library//TEXT (titlepage: name and address)//EN' 'tpspcoll.sgm'><list type='simple'><head>Repository Address </head><item>Special Collections Library</item><item>ABC University</item><item>Main Library, 40 Circle Drive</item><item>Ourtown, Pennsylvania</item><item>17654 USA</item></list>"");
        System.out.println(j.toString());
        System.out.println(XML.toString(j));
        System.out.println("""");
        j = XML.toJSONObject(""<test intertag status=ok><empty/>deluxe<blip sweet=true>&amp;&quot;toot&quot;&toot;&#x41;</blip><x>eks</x><w>bonus</w><w>bonus2</w></test>"");
        System.out.println(j.toString(2));
        System.out.println(XML.toString(j));
        System.out.println("""");
        j = HTTP.toJSONObject(""GET / HTTP/1.0\nAccept: image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, application/vnd.ms-powerpoint, application/vnd.ms-excel, application/msword, */*\nAccept-Language: en-us\nUser-Agent: Mozilla/4.0 (compatible; MSIE 5.5; Windows 98; Win 9x 4.90; T312461; Q312461)\nHost: www.nokko.com\nConnection: keep-alive\nAccept-encoding: gzip, deflate\n"");
        System.out.println(j.toString(2));
        System.out.println(HTTP.toString(j));
        System.out.println("""");
        j = HTTP.toJSONObject(""HTTP/1.1 200 Oki Doki\nDate: Sun, 26 May 2002 17:38:52 GMT\nServer: Apache/1.3.23 (Unix) mod_perl/1.26\nKeep-Alive: timeout=15, max=100\nConnection: Keep-Alive\nTransfer-Encoding: chunked\nContent-Type: text/html\n"");
        System.out.println(j.toString(2));
        System.out.println(HTTP.toString(j));
        System.out.println("""");
        j = new JSONObject(""{nix: null, nux: false, null: 'null', 'Request-URI': '/', Method: 'GET', 'HTTP-Version': 'HTTP/1.0'}"");
        System.out.println(j.toString(2));
        System.out.println(""isNull: "" + j.isNull(""nix""));
        System.out.println(""   has: "" + j.has(""nix""));
        System.out.println(XML.toString(j));
        System.out.println(HTTP.toString(j));
        System.out.println("""");
        j = XML.toJSONObject(""<?xml version='1.0' encoding='UTF-8'?>"" + ""\n\n"" + ""<SOAP-ENV:Envelope"" + "" xmlns:SOAP-ENV=\""http://schemas.xmlsoap.org/soap/envelope/\"""" + "" xmlns:xsi=\""http://www.w3.org/1999/XMLSchema-instance\"""" + "" xmlns:xsd=\""http://www.w3.org/1999/XMLSchema\"">"" + ""<SOAP-ENV:Body><ns1:doGoogleSearch"" + "" xmlns:ns1=\""urn:GoogleSearch\"""" + "" SOAP-ENV:encodingStyle=\""http://schemas.xmlsoap.org/soap/encoding/\"">"" + ""<key xsi:type=\""xsd:string\"">GOOGLEKEY</key> <q"" + "" xsi:type=\""xsd:string\"">'+search+'</q> <start"" + "" xsi:type=\""xsd:int\"">0</start> <maxResults"" + "" xsi:type=\""xsd:int\"">10</maxResults> <filter"" + "" xsi:type=\""xsd:boolean\"">true</filter> <restrict"" + "" xsi:type=\""xsd:string\""></restrict> <safeSearch"" + "" xsi:type=\""xsd:boolean\"">false</safeSearch> <lr"" + "" xsi:type=\""xsd:string\""></lr> <ie"" + "" xsi:type=\""xsd:string\"">latin1</ie> <oe"" + "" xsi:type=\""xsd:string\"">latin1</oe>"" + ""</ns1:doGoogleSearch>"" + ""</SOAP-ENV:Body></SOAP-ENV:Envelope>"");
        System.out.println(j.toString(2));
        System.out.println(XML.toString(j));
        System.out.println("""");
        j = new JSONObject(""{Envelope: {Body: {\""ns1:doGoogleSearch\"": {oe: \""latin1\"", filter: true, q: \""'+search+'\"", key: \""GOOGLEKEY\"", maxResults: 10, \""SOAP-ENV:encodingStyle\"": \""http://schemas.xmlsoap.org/soap/encoding/\"", start: 0, ie: \""latin1\"", safeSearch:false, \""xmlns:ns1\"": \""urn:GoogleSearch\""}}}}"");
        System.out.println(j.toString(2));
        System.out.println(XML.toString(j));
        System.out.println("""");
        j = CookieList.toJSONObject(""  f%oo = b+l=ah  ; o;n%40e = t.wo "");
        System.out.println(j.toString(2));
        System.out.println(CookieList.toString(j));
        System.out.println("""");
        j = Cookie.toJSONObject(""f%oo=blah; secure ;expires = April 24, 2002"");
        System.out.println(j.toString(2));
        System.out.println(Cookie.toString(j));
        System.out.println("""");
        j = new JSONObject(""{script: 'It is not allowed in HTML to send a close script tag in a string<script>because it confuses browsers</script>so we insert a backslash before the /'}"");
        System.out.println(j.toString());
        System.out.println("""");
        JSONTokener jt = new JSONTokener(""{op:'test', to:'session', pre:1}{op:'test', to:'session', pre:2}"");
        j = new JSONObject(jt);
        System.out.println(j.toString());
        System.out.println(""pre: "" + j.optInt(""pre""));
        int i = jt.skipTo('{');
        System.out.println(i);
        j = new JSONObject(jt);
        System.out.println(j.toString());
        System.out.println("""");
        a = CDL.toJSONArray(""Comma delimited list test, '\""Strip\""Quotes', 'quote, comma', No quotes, 'Single Quotes', \""Double Quotes\""\n1,'2',\""3\""\n,'It is \""good,\""', \""It works.\""\n\n"");
        s = CDL.toString(a);
        System.out.println(s);
        System.out.println("""");
        System.out.println(a.toString(4));
        System.out.println("""");
        a = CDL.toJSONArray(s);
        System.out.println(a.toString(4));
        System.out.println("""");
        a = new JSONArray("" [\""<escape>\"", next is an implied null , , ok,] "");
        System.out.println(a.toString());
        System.out.println("""");
        System.out.println(XML.toString(a));
        System.out.println("""");
        j = new JSONObject(""{ fun => with non-standard forms ; forgiving => This package can be used to parse formats that are similar to but not stricting conforming to JSON; why=To make it easier to migrate existing data to JSON,one = [[1.00]]; uno=[[{1=>1}]];'+':+6e66 ;pluses=+++;empty = '' , 'double':0.666,true: TRUE, false: FALSE, null=NULL;[true] = [[!,@;*]]; string=>  o. k. ; \r oct=0666; hex=0x666; dec=666; o=0999; noh=0x0x}"");
        System.out.println(j.toString(4));
        System.out.println("""");
        if (j.getBoolean(""true"") && !j.getBoolean(""false"")) {
            System.out.println(""It's all good"");
        }
        System.out.println("""");
        j = new JSONObject(j, new String[] { ""dec"", ""oct"", ""hex"", ""missing"" });
        System.out.println(j.toString(4));
        System.out.println("""");
        System.out.println(new JSONStringer().array().value(a).value(j).endArray());
        j = new JSONObject(""{string: \""98.6\"", long: 2147483648, int: 2147483647, longer: 9223372036854775807, double: 9223372036854775808}"");
        System.out.println(j.toString(4));
        System.out.println(""\ngetInt"");
        System.out.println(""int    "" + j.getInt(""int""));
        System.out.println(""long   "" + j.getInt(""long""));
        System.out.println(""longer "" + j.getInt(""longer""));
        System.out.println(""double "" + j.getInt(""double""));
        System.out.println(""string "" + j.getInt(""string""));
        System.out.println(""\ngetLong"");
        System.out.println(""int    "" + j.getLong(""int""));
        System.out.println(""long   "" + j.getLong(""long""));
        System.out.println(""longer "" + j.getLong(""longer""));
        System.out.println(""double "" + j.getLong(""double""));
        System.out.println(""string "" + j.getLong(""string""));
        System.out.println(""\ngetDouble"");
        System.out.println(""int    "" + j.getDouble(""int""));
        System.out.println(""long   "" + j.getDouble(""long""));
        System.out.println(""longer "" + j.getDouble(""longer""));
        System.out.println(""double "" + j.getDouble(""double""));
        System.out.println(""string "" + j.getDouble(""string""));
        j.put(""good sized"", 9223372036854775807L);
        System.out.println(j.toString(4));
        a = new JSONArray(""[2147483647, 2147483648, 9223372036854775807, 9223372036854775808]"");
        System.out.println(a.toString(4));
        System.out.println(""\nKeys: "");
        it = j.keys();
        while (it.hasNext()) {
            s = (String) it.next();
            System.out.println(s + "": "" + j.getString(s));
        }
        System.out.println(""\naccumulate: "");
        j = new JSONObject();
        j.accumulate(""stooge"", ""Curly"");
        j.accumulate(""stooge"", ""Larry"");
        j.accumulate(""stooge"", ""Moe"");
        a = j.getJSONArray(""stooge"");
        a.put(5, ""Shemp"");
        System.out.println(j.toString(4));
        System.out.println(""\nwrite:"");
        System.out.println(j.write(new StringWriter()));
        s = ""<xml empty><a></a><a>1</a><a>22</a><a>333</a></xml>"";
        j = XML.toJSONObject(s);
        System.out.println(j.toString(4));
        System.out.println(XML.toString(j));
        s = ""<book><chapter>Content of the first chapter</chapter><chapter>Content of the second chapter      <chapter>Content of the first subchapter</chapter>      <chapter>Content of the second subchapter</chapter></chapter><chapter>Third Chapter</chapter></book>"";
        j = XML.toJSONObject(s);
        System.out.println(j.toString(4));
        System.out.println(XML.toString(j));
        a = JSONML.toJSONArray(s);
        System.out.println(a.toString(4));
        System.out.println(JSONML.toString(a));
        Collection c = null;
        Map m = null;
        j = new JSONObject(m);
        a = new JSONArray(c);
        j.append(""stooge"", ""Joe DeRita"");
        j.append(""stooge"", ""Shemp"");
        j.accumulate(""stooges"", ""Curly"");
        j.accumulate(""stooges"", ""Larry"");
        j.accumulate(""stooges"", ""Moe"");
        j.accumulate(""stoogearray"", j.get(""stooges""));
        j.put(""map"", m);
        j.put(""collection"", c);
        j.put(""array"", a);
        a.put(m);
        a.put(c);
        System.out.println(j.toString(4));
        s = ""{plist=Apple; AnimalSmells = { pig = piggish; lamb = lambish; worm = wormy; }; AnimalSounds = { pig = oink; lamb = baa; worm = baa;  Lisa = \""Why is the worm talking like a lamb?\"" } ; AnimalColors = { pig = pink; lamb = black; worm = pink; } } "";
        j = new JSONObject(s);
        System.out.println(j.toString(4));
        s = "" (\""San Francisco\"", \""New York\"", \""Seoul\"", \""London\"", \""Seattle\"", \""Shanghai\"")"";
        a = new JSONArray(s);
        System.out.println(a.toString());
        s = ""<a ichi='1' ni='2'><b>The content of b</b> and <c san='3'>The content of c</c><d>do</d><e></e><d>re</d><f/><d>mi</d></a>"";
        j = XML.toJSONObject(s);
        System.out.println(j.toString(2));
        System.out.println(XML.toString(j));
        System.out.println("""");
        ja = JSONML.toJSONArray(s);
        System.out.println(ja.toString(4));
        System.out.println(JSONML.toString(ja));
        System.out.println("""");
        s = ""<Root><MsgType type=\""node\""><BatchType type=\""string\"">111111111111111</BatchType></MsgType></Root>"";
        j = JSONML.toJSONObject(s);
        System.out.println(j);
        ja = JSONML.toJSONArray(s);
        System.out.println(ja);
        System.out.println(""\nTesting Exceptions: "");
        System.out.print(""Exception: "");
        try {
            a = new JSONArray(""[\n\r\n\r}"");
            System.out.println(a.toString());
        } catch (Exception e) {
            System.out.println(e);
        }
        System.out.print(""Exception: "");
        try {
            a = new JSONArray(""<\n\r\n\r      "");
            System.out.println(a.toString());
        } catch (Exception e) {
            System.out.println(e);
        }
        System.out.print(""Exception: "");
        try {
            a = new JSONArray();
            a.put(Double.NEGATIVE_INFINITY);
            a.put(Double.NaN);
            System.out.println(a.toString());
        } catch (Exception e) {
            System.out.println(e);
        }
        System.out.print(""Exception: "");
        try {
            System.out.println(j.getDouble(""stooge""));
        } catch (Exception e) {
            System.out.println(e);
        }
        System.out.print(""Exception: "");
        try {
            System.out.println(j.getDouble(""howard""));
        } catch (Exception e) {
            System.out.println(e);
        }
        System.out.print(""Exception: "");
        try {
            System.out.println(j.put(null, ""howard""));
        } catch (Exception e) {
            System.out.println(e);
        }
        System.out.print(""Exception: "");
        try {
            System.out.println(a.getDouble(0));
        } catch (Exception e) {
            System.out.println(e);
        }
        System.out.print(""Exception: "");
        try {
            System.out.println(a.get(-1));
        } catch (Exception e) {
            System.out.println(e);
        }
        System.out.print(""Exception: "");
        try {
            System.out.println(a.put(Double.NaN));
        } catch (Exception e) {
            System.out.println(e);
        }
        System.out.print(""Exception: "");
        try {
            j = XML.toJSONObject(""<a><b>    "");
        } catch (Exception e) {
            System.out.println(e);
        }
        System.out.print(""Exception: "");
        try {
            j = XML.toJSONObject(""<a></b>    "");
        } catch (Exception e) {
            System.out.println(e);
        }
        System.out.print(""Exception: "");
        try {
            j = XML.toJSONObject(""<a></a    "");
        } catch (Exception e) {
            System.out.println(e);
        }
        System.out.print(""Exception: "");
        try {
            ja = new JSONArray(new Object());
            System.out.println(ja.toString());
        } catch (Exception e) {
            System.out.println(e);
        }
        System.out.print(""Exception: "");
        try {
            s = ""[)"";
            a = new JSONArray(s);
            System.out.println(a.toString());
        } catch (Exception e) {
            System.out.println(e);
        }
        System.out.print(""Exception: "");
        try {
            s = ""<xml"";
            ja = JSONML.toJSONArray(s);
            System.out.println(ja.toString(4));
        } catch (Exception e) {
            System.out.println(e);
        }
        System.out.print(""Exception: "");
        try {
            s = ""<right></wrong>"";
            ja = JSONML.toJSONArray(s);
            System.out.println(ja.toString(4));
        } catch (Exception e) {
            System.out.println(e);
        }
        System.out.print(""Exception: "");
        try {
            s = ""{\""koda\"": true, \""koda\"": true}"";
            j = new JSONObject(s);
            System.out.println(j.toString(4));
        } catch (Exception e) {
            System.out.println(e);
        }
        System.out.print(""Exception: "");
        try {
            jj = new JSONStringer();
            s = jj.object().key(""bosanda"").value(""MARIE HAA'S"").key(""bosanda"").value(""MARIE HAA\\'S"").endObject().toString();
            System.out.println(j.toString(4));
        } catch (Exception e) {
            System.out.println(e);
        }
    } catch (Exception e) {
        System.out.println(e.toString());
    }
}","public String toString() {
    return ""null"";
}",tostring_not_found_specific,4466,0,1,0,FALSE,toString,1,1,1,org.json.Test,,[],[],org.json.JSONObject$Null,[],[]
10,../replication_package/raw_data/url47087446e9_kellrott_SparqlScape_tgz-pJ8-org_json_TestJ8/wala0cfa.csv,3090,org/json/JSONObject.wrap:(Ljava/lang/Object;)Ljava/lang/Object;,org/json/JSONObject$Null.equals:(Ljava/lang/Object;)Z,"static Object wrap(Object object) {
    try {
        if (object == null) {
            return NULL;
        }
        if (object instanceof JSONObject || object instanceof JSONArray || object instanceof Byte || object instanceof Character || object instanceof Short || object instanceof Integer || object instanceof Long || object instanceof Boolean || object instanceof Float || object instanceof Double || object instanceof String || NULL.equals(object)) {
            return object;
        }
        if (object instanceof Collection) {
            return new JSONArray((Collection) object);
        }
        if (object.getClass().isArray()) {
            return new JSONArray(object);
        }
        if (object instanceof Map) {
            return new JSONObject((Map) object);
        }
        Package objectPackage = object.getClass().getPackage();
        String objectPackageName = (objectPackage != null ? objectPackage.getName() : """");
        if (objectPackageName.startsWith(""java."") || objectPackageName.startsWith(""javax."") || object.getClass().getClassLoader() == null) {
            return object.toString();
        }
        return new JSONObject(object);
    } catch (Exception exception) {
        return null;
    }
}","public boolean equals(Object object) {
    return object == null || object == this;
}",invocation_static,198,0,1,0,TRUE,equals,1,1,1,org.json.JSONObject,public static final java.lang.Object NULL;,[],[],org.json.JSONObject$Null,[],[]
10,../replication_package/raw_data/url47087446e9_kellrott_SparqlScape_tgz-pJ8-org_json_TestJ8/wala0cfa.csv,3091,org/json/JSONObject.wrap:(Ljava/lang/Object;)Ljava/lang/Object;,org/json/JSONStringer.toString:()Ljava/lang/String;,"static Object wrap(Object object) {
    try {
        if (object == null) {
            return NULL;
        }
        if (object instanceof JSONObject || object instanceof JSONArray || object instanceof Byte || object instanceof Character || object instanceof Short || object instanceof Integer || object instanceof Long || object instanceof Boolean || object instanceof Float || object instanceof Double || object instanceof String || NULL.equals(object)) {
            return object;
        }
        if (object instanceof Collection) {
            return new JSONArray((Collection) object);
        }
        if (object.getClass().isArray()) {
            return new JSONArray(object);
        }
        if (object instanceof Map) {
            return new JSONObject((Map) object);
        }
        Package objectPackage = object.getClass().getPackage();
        String objectPackageName = (objectPackage != null ? objectPackage.getName() : """");
        if (objectPackageName.startsWith(""java."") || objectPackageName.startsWith(""javax."") || object.getClass().getClassLoader() == null) {
            return object.toString();
        }
        return new JSONObject(object);
    } catch (Exception exception) {
        return null;
    }
}","public String toString() {
    return this.mode == 'd' ? this.writer.toString() : null;
}",invocation_polymorphism,198,0,1,0,TRUE,toString,0,0,1,org.json.JSONObject,public static final java.lang.Object NULL;,[],[],org.json.JSONStringer,[org.json.JSONWriter],[]
11,../replication_package/raw_data/url36deadcd05_SCass1986_spawncamping_cyril_tgz-pJ8-org_stephen_hashmap_MainJ8/wala0cfa.csv,283,org/stephen/hashmap/Main.testCache:(Lorg/stephen/hashmap/caches/ClassPropertyCache;I)V,org/stephen/hashmap/caches/lru/LeastRecentlyUsedCache.get:(Ljava/lang/String;)Ljava/lang/Object;,"private static void testCache(final ClassPropertyCache<PropertyKey, PropertyHolder> cache, final int testIterations) throws ClassNotFoundException {
    List<String> propertyList = getPropertyList();
    final String cacheClass = cache.getClass().getSimpleName();
    long iterationStartTime, iterationEndTime, startTime, endTime;
    final CacheObject cacheObject = new CacheObject(""stringValue"", 134678L, 10.99);
    startTime = System.nanoTime();
    for (int i = 0; i < testIterations; ++i) {
        for (final String property : propertyList) {
            iterationStartTime = System.nanoTime();
            cache.get(property).getValue(cacheObject);
            iterationEndTime = System.nanoTime();
            if (LOGGING_VERBOSE_ON) {
                if (i % 50 == 0) {
                    final long timeForIteration = iterationEndTime - iterationStartTime;
                    final String times = getTimeString(timeForIteration);
                    Logger.verbose(""[%05d] [%s] Time to retrieve property <%s>%-"" + (50 - property.length()) + ""s: %010d ns (%s)"", i, cacheClass, property, "" "", iterationEndTime - iterationStartTime, times);
                }
            }
        }
    }
    endTime = System.nanoTime() - startTime;
    Logger.info(""[%s] Total Time : %010d ns (%s)"", cacheClass, endTime, getTimeString(endTime));
}","class LeastRecentlyUsedCache { Object get ( String a0, ) { return Object1; }",invocation_polymorphism,81,1,1,1,TRUE,get,1,1,1,org.stephen.hashmap.Main,,[],[],org.stephen.hashmap.caches.lru.LeastRecentlyUsedCache,"[org.stephen.hashmap.caches.ClassPropertyCache<org.stephen.hashmap.caches.property.PropertyKeyFactory$PropertyKey, org.stephen.hashmap.caches.property.PropertyHolder>]",[]
11,../replication_package/raw_data/url36deadcd05_SCass1986_spawncamping_cyril_tgz-pJ8-org_stephen_hashmap_MainJ8/wala0cfa.csv,5576,org/stephen/hashmap/Main.getPropertyList:()Ljava/util/List;,org/apache/commons/logging/LogConfigurationException.getCause:()Ljava/lang/Throwable;,"private static List<String> getPropertyList() {
    List<String> propertyList = new ArrayList<>(3);
    propertyList.add(String.format(""%s.stringValue_01"", CacheObject.class.getName()));
    propertyList.add(String.format(""%s.stringValue_02"", CacheObject.class.getName()));
    propertyList.add(String.format(""%s.stringValue_03"", CacheObject.class.getName()));
    propertyList.add(String.format(""%s.stringValue_04"", CacheObject.class.getName()));
    propertyList.add(String.format(""%s.doubleValue_01"", CacheObject.class.getName()));
    propertyList.add(String.format(""%s.doubleValue_02"", CacheObject.class.getName()));
    propertyList.add(String.format(""%s.doubleValue_03"", CacheObject.class.getName()));
    propertyList.add(String.format(""%s.doubleValue_04"", CacheObject.class.getName()));
    propertyList.add(String.format(""%s.longValue_01"", CacheObject.class.getName()));
    propertyList.add(String.format(""%s.longValue_02"", CacheObject.class.getName()));
    propertyList.add(String.format(""%s.longValue_03"", CacheObject.class.getName()));
    propertyList.add(String.format(""%s.longValue_04"", CacheObject.class.getName()));
    return propertyList;
}",class LogConfigurationException { Throwable getCause ( ) { return Throwable1; },exception_trans,24,0,1,0,FALSE,getCause,0,0,1,org.stephen.hashmap.Main,,[],[],org.apache.commons.logging.LogConfigurationException,,
12,../replication_package/raw_data/url147ce07ebe_JoshuaKissoon_Kademlia_tgz-pJ8-kademlia_simulations_RoutingTableStateTestingJ8/wala0cfa.csv,974,kademlia/KadServer.listen:()V,kademlia/operation/NodeLookupOperation.receive:(Lkademlia/message/Message;I)V,"private void listen() {
    try {
        while (isRunning) {
            try {
                byte[] buffer = new byte[DATAGRAM_BUFFER_SIZE];
                DatagramPacket packet = new DatagramPacket(buffer, buffer.length);
                socket.receive(packet);
                this.statistician.receivedData(packet.getLength());
                if (this.config.isTesting()) {
                    int pause = packet.getLength() / 100;
                    try {
                        Thread.sleep(pause);
                    } catch (InterruptedException ex) {
                    }
                }
                try (ByteArrayInputStream bin = new ByteArrayInputStream(packet.getData(), packet.getOffset(), packet.getLength());
                    DataInputStream din = new DataInputStream(bin)) {
                    int comm = din.readInt();
                    byte messCode = din.readByte();
                    Message msg = messageFactory.createMessage(messCode, din);
                    din.close();
                    Receiver receiver;
                    if (this.receivers.containsKey(comm)) {
                        synchronized (this) {
                            receiver = this.receivers.remove(comm);
                            TimerTask task = (TimerTask) tasks.remove(comm);
                            if (task != null) {
                                task.cancel();
                            }
                        }
                    } else {
                        receiver = messageFactory.createReceiver(messCode, this);
                    }
                    if (receiver != null) {
                        receiver.receive(msg, comm);
                    }
                }
            } catch (IOException e) {
                System.err.println(""Server ran into a problem in listener method. Message: "" + e.getMessage());
            }
        }
    } finally {
        if (!socket.isClosed()) {
            socket.close();
        }
        this.isRunning = false;
    }
}","@Override
public synchronized void receive(Message incoming, int comm) throws IOException {
    if (!(incoming instanceof NodeReplyMessage)) {
        return;
    }
    NodeReplyMessage msg = (NodeReplyMessage) incoming;
    Node origin = msg.getOrigin();
    this.localNode.getRoutingTable().insert(origin);
    this.nodes.put(origin, ASKED);
    this.messagesTransiting.remove(comm);
    this.addNodes(msg.getNodes());
    this.askNodesorFinish();
}",invocation_polymorphism,258,1,1,1,TRUE,receive,1,1,0,kademlia.KadServer,,[],[],kademlia.operation.NodeLookupOperation,[kademlia.operation.Operation][kademlia.message.Receiver],[]
12,../replication_package/raw_data/url147ce07ebe_JoshuaKissoon_Kademlia_tgz-pJ8-kademlia_simulations_RoutingTableStateTestingJ8/wala0cfa.csv,4407,kademlia/JKademliaNode.saveKadState:()V,com/google/gson/internal/$Gson$Types$WildcardTypeImpl.getLowerBounds:()[Ljava/lang/reflect/Type;,"@Override
public void saveKadState() throws IOException {
    DataOutputStream dout;
    dout = new DataOutputStream(new FileOutputStream(getStateStorageFolderName(this.ownerId, this.config) + File.separator + ""kad.kns""));
    new JsonSerializer<JKademliaNode>().write(this, dout);
    dout = new DataOutputStream(new FileOutputStream(getStateStorageFolderName(this.ownerId, this.config) + File.separator + ""node.kns""));
    new JsonSerializer<Node>().write(this.localNode, dout);
    dout = new DataOutputStream(new FileOutputStream(getStateStorageFolderName(this.ownerId, this.config) + File.separator + ""routingtable.kns""));
    new JsonRoutingTableSerializer(this.config).write(this.getRoutingTable(), dout);
    dout = new DataOutputStream(new FileOutputStream(getStateStorageFolderName(this.ownerId, this.config) + File.separator + ""dht.kns""));
    new JsonDHTSerializer().write(this.dht, dout);
}",class $Gson { Type[] getLowerBounds ( ) { return Type[]1; },trans,170,0,1,0,FALSE,getLowerBounds,0,0,0,kademlia.JKademliaNode,,[kademlia.KademliaNode],[],com.google.gson.internal.$Gson$Types$WildcardTypeImpl,,
13,../replication_package/raw_data/url3010dbde70_nbartlett_Sequence_Memoizer_tgz-pJ8-edu_columbia_stat_wood_pub_sequencememoizer_IntSequenceMemoizerJ8/wala0cfa.csv,231,edu/columbia/stat/wood/pub/sequencememoizer/IntSequenceMemoizer.main:([Ljava/lang/String;)V,edu/columbia/stat/wood/pub/sequencememoizer/util/Pair.hashCode:()I,"public static void main(String[] args) throws FileNotFoundException, IOException {
    IntSequenceMemoizerParameters smp = new IntSequenceMemoizerParameters(100);
    IntSequenceMemoizer sm = new IntSequenceMemoizer(smp);
    sm.continueSequence(new int[] { 97, 98, 99, 44, 97, 98, 99, 44, 97, 98, 99, 44, 97, 98, 99, 44, 97, 98, 99 });
    sm.sample(100);
    int[] samp = sm.generate(new int[] { 97, 98 }, 100);
    for (int i = 0; i < 100; i++) {
        System.out.println(samp[i]);
    }
}","@Override
public int hashCode() {
    int hash = 5;
    hash = 41 * hash + (this.first != null ? this.first.hashCode() : 0);
    hash = 41 * hash + (this.second != null ? this.second.hashCode() : 0);
    return hash;
}",trans,180,0,1,0,FALSE,hashCode,0,0,1,edu.columbia.stat.wood.pub.sequencememoizer.IntSequenceMemoizer,public static edu.columbia.stat.wood.pub.sequencememoizer.util.MersenneTwisterFast RNG;,[edu.columbia.stat.wood.pub.sequencememoizer.IntSequenceMemoizerInterface][java.io.Serializable],[],edu.columbia.stat.wood.pub.sequencememoizer.util.Pair,,
13,../replication_package/raw_data/url3010dbde70_nbartlett_Sequence_Memoizer_tgz-pJ8-edu_columbia_stat_wood_pub_sequencememoizer_IntSequenceMemoizerJ8/wala0cfa.csv,357,edu/columbia/stat/wood/pub/sequencememoizer/util/IntSamplingNode$TypeSeatingArrangement.check:()Z,edu/columbia/stat/wood/pub/sequencememoizer/util/Pair.equals:(Ljava/lang/Object;)Z,"public boolean check() {
    int c = 0, t = 0;
    for (int cust : sa) {
        c += cust;
        if (cust > 0) {
            t++;
        }
    }
    assert c == typeCustomers : ""c = "" + c + "" typeCustomers = "" + typeCustomers;
    assert t == typeTables;
    return true;
}","@Override
public boolean equals(Object o) {
    if (o == null) {
        return false;
    } else if (o.getClass() != this.getClass()) {
        return false;
    } else if (((Pair) o).first().equals(first) && ((Pair) o).second().equals(second)) {
        return true;
    } else {
        return false;
    }
}",trans,97,0,1,0,FALSE,equals,0,0,0,edu.columbia.stat.wood.pub.sequencememoizer.util.IntSamplingNode$TypeSeatingArrangement,final edu.columbia.stat.wood.pub.sequencememoizer.util.IntSamplingNode this$0;,[],[],edu.columbia.stat.wood.pub.sequencememoizer.util.Pair,,
13,../replication_package/raw_data/url3010dbde70_nbartlett_Sequence_Memoizer_tgz-pJ8-edu_columbia_stat_wood_pub_sequencememoizer_IntSequenceMemoizerJ8/wala0cfa.csv,358,edu/columbia/stat/wood/pub/sequencememoizer/util/IntSamplingNode$TypeSeatingArrangement.check:()Z,edu/columbia/stat/wood/pub/sequencememoizer/util/Pair.hashCode:()I,"public boolean check() {
    int c = 0, t = 0;
    for (int cust : sa) {
        c += cust;
        if (cust > 0) {
            t++;
        }
    }
    assert c == typeCustomers : ""c = "" + c + "" typeCustomers = "" + typeCustomers;
    assert t == typeTables;
    return true;
}","@Override
public int hashCode() {
    int hash = 5;
    hash = 41 * hash + (this.first != null ? this.first.hashCode() : 0);
    hash = 41 * hash + (this.second != null ? this.second.hashCode() : 0);
    return hash;
}",trans,97,0,1,0,FALSE,hashCode,0,0,0,edu.columbia.stat.wood.pub.sequencememoizer.util.IntSamplingNode$TypeSeatingArrangement,final edu.columbia.stat.wood.pub.sequencememoizer.util.IntSamplingNode this$0;,[],[],edu.columbia.stat.wood.pub.sequencememoizer.util.Pair,,
13,../replication_package/raw_data/url3010dbde70_nbartlett_Sequence_Memoizer_tgz-pJ8-edu_columbia_stat_wood_pub_sequencememoizer_IntSequenceMemoizerJ8/wala0cfa.csv,428,edu/columbia/stat/wood/pub/sequencememoizer/util/IntRestaurant.removeFromTree:(Ledu/columbia/stat/wood/pub/sequencememoizer/util/MutableLong;)V,edu/columbia/stat/wood/pub/sequencememoizer/util/MutableLong.decrement:()V,"public final void removeFromTree(MutableLong restCount) {
    parent.remove(edgeNode.intChunk()[edgeStart]);
    if (!parent.isEmpty()) {
        parent.decrementLeafNodeCount();
    }
    restCount.decrement();
}","public void decrement() {
    l--;
}",invocation_same_class,37,1,1,0,TRUE,decrement,1,1,0,edu.columbia.stat.wood.pub.sequencememoizer.util.IntRestaurant,"public edu.columbia.stat.wood.pub.sequencememoizer.util.IntRestaurant parent;, public edu.columbia.stat.wood.pub.sequencememoizer.util.IntSequence$IntSeqNode edgeNode;",[edu.columbia.stat.wood.pub.sequencememoizer.util.IntMap<edu.columbia.stat.wood.pub.sequencememoizer.util.IntRestaurant>][java.io.Serializable],[],edu.columbia.stat.wood.pub.sequencememoizer.util.MutableLong,[],[]
14,../replication_package/raw_data/url28dfd00382_byang223_TurnBAPI_tgz-pJ8-units_upgrades_UpgradeTestJ8/wala0cfa.csv,193,map/Tile.fillRankMap:()V,units/interactions/ButtonEvolve.toString:()Ljava/lang/String;,"private void fillRankMap() {
    rankMap = new HashMap<Integer, String>();
    rankMap.put(ORIGINAL_BACKGROUND_RANK, ""resources/tiles/tile.png"");
    rankMap.put(CURRENT_PLAYER_OWNED_BACKGROUND_RANK, ""resources/tiles/tile2.png"");
    rankMap.put(SELECTED_TILE_BACKGROUND_IMAGE_RANK, ""resources/tiles/tile3.png"");
    rankMap.put(IN_RANGE_TILE_BACKGROUND_RANK, ""resources/tiles/tile4.png"");
    rankMap.put(ATTACK_RANGE_TILE_BACKGROUND_RANK, ""resources/tiles/tile5.png"");
}","@Override
public String toString() {
    return ""Evolve"";
}",tostring_not_found_trans,37,0,1,0,FALSE,toString,0,0,0,map.Tile,,[java.io.Serializable],[],units.interactions.ButtonEvolve,[units.interactions.InteractionUnitButton][units.interactions.Interaction][java.io.Serializable][java.io.Serializable],[]
14,../replication_package/raw_data/url28dfd00382_byang223_TurnBAPI_tgz-pJ8-units_upgrades_UpgradeTestJ8/wala0cfa.csv,251,achievement/Achievement.notifyObservers:(Lachiever/Achiever;)V,achievement/AchievementKill.notifyObserver:(Lobservers/GameObserver;Lachiever/Achiever;)V,"public void notifyObservers(Achiever achiever) {
    for (GameObserver o : observers) {
        notifyObserver(o, achiever);
        setAchievementMessage(createAchievementMessage(achiever));
    }
}","class AchievementKill { void notifyObserver ( GameObserver a0, Achiever a1, ) { return void1; }",invocation_this,30,1,1,0,TRUE,notifyObserver,0,0,0,achievement.Achievement,,[],[achievement.AchievementDeathEffectsMap][achievement.AchievementTime],achievement.AchievementKill,[achievement.Achievement<attribute.AttributeKills>],[]
14,../replication_package/raw_data/url28dfd00382_byang223_TurnBAPI_tgz-pJ8-units_upgrades_UpgradeTestJ8/wala0cfa.csv,265,map/Tile.<init>:(II)V,com/golden/gamedev/object/background/ImageBackground.<init>:(Ljava/awt/image/BufferedImage;II)V,"public Tile(int xCor, int yCor) {
    tileRankList = new ArrayList<Integer>();
    fillRankMap();
    myEnvironment = new ArrayList<Environment>();
    tileDimX = 50;
    tileDimY = 50;
    try {
        myBackground = new ImageBackground(ImageUtil.resize(ImageIO.read(new File(rankMap.get(ORIGINAL_BACKGROUND_RANK))), tileDimX, tileDimY), tileDimX, tileDimY);
    } catch (IOException e) {
        e.printStackTrace();
    }
    x = xCor;
    y = yCor;
    tileCoordinateX = x / tileDimX;
    tileCoordinateY = y / tileDimY;
    renderable = true;
}","class ImageBackground { void <init> ( BufferedImage a0, int a1, int a2, ) { return void1; }",invocation_constructor,92,1,1,0,TRUE,ImageBackground,1,1,0,map.Tile,,[java.io.Serializable],[],com.golden.gamedev.object.background.ImageBackground,,
14,../replication_package/raw_data/url28dfd00382_byang223_TurnBAPI_tgz-pJ8-units_upgrades_UpgradeTestJ8/wala0cfa.csv,663,observers/ObserverUnlockUnits.notifyObserverTemplate:(Lachiever/Achiever;)V,units/interactions/UnitButtonAttack.toString:()Ljava/lang/String;,"@Override
public void notifyObserverTemplate(Achiever achiever) {
    if (achiever.getAttribute(Attribute.UNIT_GROUP) != null) {
        AchieverUnlockUnitModification unlockUnit = new AchieverUnlockUnitModification(achiever, unlockablesMap.get(nextUnlockLevel));
        unlockUnit.modify();
    } else {
        System.out.println(Attribute.INCORRECT_ATTRIBUTE_ERROR);
    }
}","@Override
public String toString() {
    return ""Attack"";
}",tostring_not_found_trans,27,0,1,0,FALSE,toString,0,0,0,observers.ObserverUnlockUnits,,[observers.GameObserver],[],units.interactions.UnitButtonAttack,[units.interactions.ButtonTargetRequired][units.interactions.InteractionUnitButton][units.interactions.Interaction][java.io.Serializable][java.io.Serializable][java.io.Serializable],[]
15,../replication_package/raw_data/url27a7ae3508_serkan_ozal_ocean_of_memories_tgz-pJ8-com_zeroturnaround_rebellabs_oceanofmemories_article1_objectlayout_ObjectMemoryLayoutDemoJ8/wala0cfa.csv,24,com/zeroturnaround/rebellabs/oceanofmemories/common/util/JvmUtil.init:()V,org/apache/log4j/config/PropertySetterException.getMessage:()Ljava/lang/String;,"private static void init() {
    if (isJvmSupported() == false) {
        throw new AssertionError(""JVM is not supported: "" + JVM_NAME);
    }
    try {
        Field unsafeField = Unsafe.class.getDeclaredField(""theUnsafe"");
        unsafeField.setAccessible(true);
        unsafe = (Unsafe) unsafeField.get(null);
    } catch (NoSuchFieldException e) {
        throw new RuntimeException(""Unable to get unsafe"", e);
    } catch (IllegalAccessException e) {
        throw new RuntimeException(""Unable to get unsafe"", e);
    }
    try {
        findProcessId();
    } catch (Exception e) {
        throw new RuntimeException(""Couldn't find current process id"", e);
    }
    objArray = new Object[1];
    int headerSize;
    try {
        long off1 = unsafe.objectFieldOffset(HeaderClass.class.getField(""b1""));
        headerSize = (int) off1;
    } catch (NoSuchFieldException e) {
        throw new RuntimeException(""Unable to calculate header size"", e);
    }
    JvmUtil.addressSize = unsafe.addressSize();
    JvmUtil.baseOffset = unsafe.arrayBaseOffset(Object[].class);
    JvmUtil.indexScale = unsafe.arrayIndexScale(Object[].class);
    JvmUtil.headerSize = headerSize;
    JvmUtil.arrayHeaderSize = headerSize + indexScale;
    JvmUtil.options = findOptions();
    switch(addressSize) {
        case SIZE_32_BIT:
            if (isHotspotJvm()) {
                JvmUtil.classDefPointerOffsetInObject = CLASS_DEF_POINTER_OFFSET_IN_OBJECT_FOR_32_BIT;
                if (isJava_6()) {
                    JvmUtil.classDefPointerOffsetInClass = CLASS_DEF_POINTER_OFFSET_IN_CLASS_32_BIT_FOR_JAVA_6;
                } else if (isJava_7()) {
                    JvmUtil.classDefPointerOffsetInClass = CLASS_DEF_POINTER_OFFSET_IN_CLASS_32_BIT_FOR_JAVA_7;
                } else if (isJava_8()) {
                    JvmUtil.classDefPointerOffsetInClass = CLASS_DEF_POINTER_OFFSET_IN_CLASS_32_BIT_FOR_JAVA_8;
                } else {
                    throw new AssertionError(""Java version is not supported: "" + JAVA_SPEC_VERSION);
                }
                JvmUtil.sizeFieldOffsetOffsetInClass = SIZE_FIELD_OFFSET_IN_CLASS_32_BIT;
                jvmAwareUtil = new Address32BitJvmUtil();
            } else if (isJRockitJvm()) {
                jvmAwareUtil = new Address32BitJRockitJvmUtil();
            }
            break;
        case SIZE_64_BIT:
            if (isHotspotJvm()) {
                JvmUtil.classDefPointerOffsetInObject = CLASS_DEF_POINTER_OFFSET_IN_OBJECT_FOR_64_BIT;
                if (isJava_6()) {
                    if (options.compressedRef) {
                        JvmUtil.classDefPointerOffsetInClass = CLASS_DEF_POINTER_OFFSET_IN_CLASS_64_BIT_WITH_COMPRESSED_REF_FOR_JAVA_6;
                        jvmAwareUtil = new Address64BitWithCompressedOopsJvmUtil();
                    } else {
                        JvmUtil.classDefPointerOffsetInClass = CLASS_DEF_POINTER_OFFSET_IN_CLASS_64_BIT_WITHOUT_COMPRESSED_REF_FOR_JAVA_6;
                        jvmAwareUtil = new Address64BitWithoutCompressedOopsJvmUtil();
                    }
                } else if (isJava_7()) {
                    if (options.compressedRef) {
                        JvmUtil.classDefPointerOffsetInClass = CLASS_DEF_POINTER_OFFSET_IN_CLASS_64_BIT_WITH_COMPRESSED_REF_FOR_JAVA_7;
                        jvmAwareUtil = new Address64BitWithCompressedOopsJvmUtil();
                    } else {
                        JvmUtil.classDefPointerOffsetInClass = CLASS_DEF_POINTER_OFFSET_IN_CLASS_64_BIT_WITHOUT_COMPRESSED_REF_FOR_JAVA_7;
                        jvmAwareUtil = new Address64BitWithoutCompressedOopsJvmUtil();
                    }
                } else if (isJava_8()) {
                    if (options.compressedRef) {
                        JvmUtil.classDefPointerOffsetInClass = CLASS_DEF_POINTER_OFFSET_IN_CLASS_64_BIT_WITH_COMPRESSED_REF_FOR_JAVA_8;
                        jvmAwareUtil = new Address64BitWithCompressedOopsJvmUtil();
                    } else {
                        JvmUtil.classDefPointerOffsetInClass = CLASS_DEF_POINTER_OFFSET_IN_CLASS_64_BIT_WITHOUT_COMPRESSED_REF_FOR_JAVA_8;
                        jvmAwareUtil = new Address64BitWithoutCompressedOopsJvmUtil();
                    }
                } else {
                    throw new AssertionError(""Java version is not supported: "" + JAVA_SPEC_VERSION);
                }
                JvmUtil.sizeFieldOffsetOffsetInClass = SIZE_FIELD_OFFSET_IN_CLASS_64_BIT;
            } else if (isJRockitJvm()) {
                if (options.compressedRef) {
                    jvmAwareUtil = new Address64BitWithCompressedOopsJRockitJvmUtil();
                } else {
                    jvmAwareUtil = new Address64BitWithoutCompressedOopsJRockitJvmUtil();
                }
            }
            break;
        default:
            throw new AssertionError(""Unsupported address size: "" + addressSize);
    }
}",class PropertySetterException { String getMessage ( ) { return String1; },exception_info,118,0,1,0,FALSE,getMessage,0,0,1,com.zeroturnaround.rebellabs.oceanofmemories.common.util.JvmUtil,"public static final java.lang.String JAVA_6;, public static final java.lang.String JAVA_7;, public static final java.lang.String JAVA_8;, public static final java.lang.String JAVA_VERSION;, public static final java.lang.String JAVA_SPEC_VERSION;, public static final java.lang.String JAVA_RUNTIME_VERSION;, public static final java.lang.String JAVA_VENDOR;, public static final java.lang.String JVM_VENDOR;, public static final java.lang.String JVM_VERSION;, public static final java.lang.String JVM_NAME;, public static final java.lang.String OS_ARCH;, public static final java.lang.String OS_NAME;, public static final java.lang.String OS_VERSION;, public static final com.zeroturnaround.rebellabs.oceanofmemories.common.util.JvmUtil$JavaVersionInfo JAVA_VERSION_INFO;, public static final com.zeroturnaround.rebellabs.oceanofmemories.common.util.JvmUtil$JvmInfo JVM_INFO;, public static final byte BITS_32;, public static final byte BITS_64;, public static final byte SIZE_32_BIT;, public static final byte SIZE_64_BIT;, public static final byte DEFAULT_COMPRESSED_REF_SHIFT_SIZE;, public static final byte INVALID_ADDRESS;, public static final byte ADDRESSING_4_BYTE;, public static final byte ADDRESSING_8_BYTE;, public static final byte ADDRESSING_16_BYTE;",[],[],org.apache.log4j.config.PropertySetterException,,
15,../replication_package/raw_data/url27a7ae3508_serkan_ozal_ocean_of_memories_tgz-pJ8-com_zeroturnaround_rebellabs_oceanofmemories_article1_objectlayout_ObjectMemoryLayoutDemoJ8/wala0cfa.csv,37,com/zeroturnaround/rebellabs/oceanofmemories/common/util/JvmUtil.fieldsLayoutAsString:(Ljava/lang/Class;)Ljava/lang/String;,org/apache/log4j/Priority.toString:()Ljava/lang/String;,"@SuppressWarnings({ ""unchecked"" })
public static String fieldsLayoutAsString(Class<?> clazz) {
    TreeMap<Long, String> fields = new TreeMap<Long, String>();
    for (Class<?> c = clazz; c != null; c = c.getSuperclass()) {
        for (Field f : c.getDeclaredFields()) {
            if (Modifier.isStatic(f.getModifiers()) == false) {
                fields.put(unsafe.objectFieldOffset(f), f.getDeclaringClass().getSimpleName() + ""."" + f.getName());
            }
        }
    }
    fields.put(shallowSizeOfInstance(clazz), ""#shallowSizeOfInstance("" + clazz.getName() + "")"");
    StringBuilder b = new StringBuilder();
    Object[] entries = fields.entrySet().toArray();
    for (int i = 0; i < entries.length; i++) {
        Map.Entry<Long, String> e = (Map.Entry<Long, String>) entries[i];
        Map.Entry<Long, String> next = (i + 1 < entries.length ? (Map.Entry<Long, String>) entries[i + 1] : null);
        b.append(String.format(""@%02d %2s %s\n"", e.getKey(), next == null ? """" : next.getKey() - e.getKey(), e.getValue()));
    }
    return b.toString();
}",class Priority { String toString ( ) { return String1; },invocation_new,15,0,1,0,TRUE,toString,0,0,1,com.zeroturnaround.rebellabs.oceanofmemories.common.util.JvmUtil,"public static final java.lang.String JAVA_6;, public static final java.lang.String JAVA_7;, public static final java.lang.String JAVA_8;, public static final java.lang.String JAVA_VERSION;, public static final java.lang.String JAVA_SPEC_VERSION;, public static final java.lang.String JAVA_RUNTIME_VERSION;, public static final java.lang.String JAVA_VENDOR;, public static final java.lang.String JVM_VENDOR;, public static final java.lang.String JVM_VERSION;, public static final java.lang.String JVM_NAME;, public static final java.lang.String OS_ARCH;, public static final java.lang.String OS_NAME;, public static final java.lang.String OS_VERSION;, public static final com.zeroturnaround.rebellabs.oceanofmemories.common.util.JvmUtil$JavaVersionInfo JAVA_VERSION_INFO;, public static final com.zeroturnaround.rebellabs.oceanofmemories.common.util.JvmUtil$JvmInfo JVM_INFO;, public static final byte BITS_32;, public static final byte BITS_64;, public static final byte SIZE_32_BIT;, public static final byte SIZE_64_BIT;, public static final byte DEFAULT_COMPRESSED_REF_SHIFT_SIZE;, public static final byte INVALID_ADDRESS;, public static final byte ADDRESSING_4_BYTE;, public static final byte ADDRESSING_8_BYTE;, public static final byte ADDRESSING_16_BYTE;",[],[],org.apache.log4j.Priority,,
15,../replication_package/raw_data/url27a7ae3508_serkan_ozal_ocean_of_memories_tgz-pJ8-com_zeroturnaround_rebellabs_oceanofmemories_article1_objectlayout_ObjectMemoryLayoutDemoJ8/wala0cfa.csv,75,com/zeroturnaround/rebellabs/oceanofmemories/common/util/JvmUtil$Address64BitWithoutCompressedOopsJvmUtil.addressOfClassInternal:(Ljava/lang/Class;)J,com/zeroturnaround/rebellabs/oceanofmemories/common/util/JvmUtil$Address64BitWithoutCompressedOopsJvmUtil.addressOf:(Ljava/lang/Object;)J,"@Override
public long addressOfClassInternal(Class<?> clazz) {
    long addressOfClass = addressOf(clazz);
    return unsafe.getLong(addressOfClass + classDefPointerOffsetInClass);
}","@Override
public long addressOf(Object obj) {
    if (obj == null) {
        return 0;
    }
    objArray[0] = obj;
    return unsafe.getLong(objArray, baseOffset);
}",invocation_this,2,1,1,0,TRUE,addressOf,1,1,0,com.zeroturnaround.rebellabs.oceanofmemories.common.util.JvmUtil$Address64BitWithoutCompressedOopsJvmUtil,,[com.zeroturnaround.rebellabs.oceanofmemories.common.util.JvmUtil$Address64BitJvmUtil][com.zeroturnaround.rebellabs.oceanofmemories.common.util.JvmUtil$BaseJvmAwaretil][com.zeroturnaround.rebellabs.oceanofmemories.common.util.JvmUtil$JvmAwareUtil],[com.zeroturnaround.rebellabs.oceanofmemories.common.util.JvmUtil$Address64BitWithoutCompressedOopsJRockitJvmUtil],com.zeroturnaround.rebellabs.oceanofmemories.common.util.JvmUtil$Address64BitWithoutCompressedOopsJvmUtil,[com.zeroturnaround.rebellabs.oceanofmemories.common.util.JvmUtil$Address64BitJvmUtil][com.zeroturnaround.rebellabs.oceanofmemories.common.util.JvmUtil$BaseJvmAwaretil][com.zeroturnaround.rebellabs.oceanofmemories.common.util.JvmUtil$JvmAwareUtil],[com.zeroturnaround.rebellabs.oceanofmemories.common.util.JvmUtil$Address64BitWithoutCompressedOopsJRockitJvmUtil]
15,../replication_package/raw_data/url27a7ae3508_serkan_ozal_ocean_of_memories_tgz-pJ8-com_zeroturnaround_rebellabs_oceanofmemories_article1_objectlayout_ObjectMemoryLayoutDemoJ8/wala0cfa.csv,666,com/zeroturnaround/rebellabs/oceanofmemories/common/util/JvmUtil.init:()V,com/zeroturnaround/rebellabs/oceanofmemories/common/util/JvmUtil$Address64BitWithCompressedOopsJvmUtil.<init>:(Lcom/zeroturnaround/rebellabs/oceanofmemories/common/util/JvmUtil$1;)V,"private static void init() {
    if (isJvmSupported() == false) {
        throw new AssertionError(""JVM is not supported: "" + JVM_NAME);
    }
    try {
        Field unsafeField = Unsafe.class.getDeclaredField(""theUnsafe"");
        unsafeField.setAccessible(true);
        unsafe = (Unsafe) unsafeField.get(null);
    } catch (NoSuchFieldException e) {
        throw new RuntimeException(""Unable to get unsafe"", e);
    } catch (IllegalAccessException e) {
        throw new RuntimeException(""Unable to get unsafe"", e);
    }
    try {
        findProcessId();
    } catch (Exception e) {
        throw new RuntimeException(""Couldn't find current process id"", e);
    }
    objArray = new Object[1];
    int headerSize;
    try {
        long off1 = unsafe.objectFieldOffset(HeaderClass.class.getField(""b1""));
        headerSize = (int) off1;
    } catch (NoSuchFieldException e) {
        throw new RuntimeException(""Unable to calculate header size"", e);
    }
    JvmUtil.addressSize = unsafe.addressSize();
    JvmUtil.baseOffset = unsafe.arrayBaseOffset(Object[].class);
    JvmUtil.indexScale = unsafe.arrayIndexScale(Object[].class);
    JvmUtil.headerSize = headerSize;
    JvmUtil.arrayHeaderSize = headerSize + indexScale;
    JvmUtil.options = findOptions();
    switch(addressSize) {
        case SIZE_32_BIT:
            if (isHotspotJvm()) {
                JvmUtil.classDefPointerOffsetInObject = CLASS_DEF_POINTER_OFFSET_IN_OBJECT_FOR_32_BIT;
                if (isJava_6()) {
                    JvmUtil.classDefPointerOffsetInClass = CLASS_DEF_POINTER_OFFSET_IN_CLASS_32_BIT_FOR_JAVA_6;
                } else if (isJava_7()) {
                    JvmUtil.classDefPointerOffsetInClass = CLASS_DEF_POINTER_OFFSET_IN_CLASS_32_BIT_FOR_JAVA_7;
                } else if (isJava_8()) {
                    JvmUtil.classDefPointerOffsetInClass = CLASS_DEF_POINTER_OFFSET_IN_CLASS_32_BIT_FOR_JAVA_8;
                } else {
                    throw new AssertionError(""Java version is not supported: "" + JAVA_SPEC_VERSION);
                }
                JvmUtil.sizeFieldOffsetOffsetInClass = SIZE_FIELD_OFFSET_IN_CLASS_32_BIT;
                jvmAwareUtil = new Address32BitJvmUtil();
            } else if (isJRockitJvm()) {
                jvmAwareUtil = new Address32BitJRockitJvmUtil();
            }
            break;
        case SIZE_64_BIT:
            if (isHotspotJvm()) {
                JvmUtil.classDefPointerOffsetInObject = CLASS_DEF_POINTER_OFFSET_IN_OBJECT_FOR_64_BIT;
                if (isJava_6()) {
                    if (options.compressedRef) {
                        JvmUtil.classDefPointerOffsetInClass = CLASS_DEF_POINTER_OFFSET_IN_CLASS_64_BIT_WITH_COMPRESSED_REF_FOR_JAVA_6;
                        jvmAwareUtil = new Address64BitWithCompressedOopsJvmUtil();
                    } else {
                        JvmUtil.classDefPointerOffsetInClass = CLASS_DEF_POINTER_OFFSET_IN_CLASS_64_BIT_WITHOUT_COMPRESSED_REF_FOR_JAVA_6;
                        jvmAwareUtil = new Address64BitWithoutCompressedOopsJvmUtil();
                    }
                } else if (isJava_7()) {
                    if (options.compressedRef) {
                        JvmUtil.classDefPointerOffsetInClass = CLASS_DEF_POINTER_OFFSET_IN_CLASS_64_BIT_WITH_COMPRESSED_REF_FOR_JAVA_7;
                        jvmAwareUtil = new Address64BitWithCompressedOopsJvmUtil();
                    } else {
                        JvmUtil.classDefPointerOffsetInClass = CLASS_DEF_POINTER_OFFSET_IN_CLASS_64_BIT_WITHOUT_COMPRESSED_REF_FOR_JAVA_7;
                        jvmAwareUtil = new Address64BitWithoutCompressedOopsJvmUtil();
                    }
                } else if (isJava_8()) {
                    if (options.compressedRef) {
                        JvmUtil.classDefPointerOffsetInClass = CLASS_DEF_POINTER_OFFSET_IN_CLASS_64_BIT_WITH_COMPRESSED_REF_FOR_JAVA_8;
                        jvmAwareUtil = new Address64BitWithCompressedOopsJvmUtil();
                    } else {
                        JvmUtil.classDefPointerOffsetInClass = CLASS_DEF_POINTER_OFFSET_IN_CLASS_64_BIT_WITHOUT_COMPRESSED_REF_FOR_JAVA_8;
                        jvmAwareUtil = new Address64BitWithoutCompressedOopsJvmUtil();
                    }
                } else {
                    throw new AssertionError(""Java version is not supported: "" + JAVA_SPEC_VERSION);
                }
                JvmUtil.sizeFieldOffsetOffsetInClass = SIZE_FIELD_OFFSET_IN_CLASS_64_BIT;
            } else if (isJRockitJvm()) {
                if (options.compressedRef) {
                    jvmAwareUtil = new Address64BitWithCompressedOopsJRockitJvmUtil();
                } else {
                    jvmAwareUtil = new Address64BitWithoutCompressedOopsJRockitJvmUtil();
                }
            }
            break;
        default:
            throw new AssertionError(""Unsupported address size: "" + addressSize);
    }
}","class JvmUtil$Address64BitWithCompressedOopsJvmUtil { void <init> ( JvmUtil a0, ) { return void1; }",invocation_constructor,433,1,1,0,TRUE,JvmUtil$Address64BitWithCompressedOopsJvmUtil,1,1,1,com.zeroturnaround.rebellabs.oceanofmemories.common.util.JvmUtil,"public static final java.lang.String JAVA_6;, public static final java.lang.String JAVA_7;, public static final java.lang.String JAVA_8;, public static final java.lang.String JAVA_VERSION;, public static final java.lang.String JAVA_SPEC_VERSION;, public static final java.lang.String JAVA_RUNTIME_VERSION;, public static final java.lang.String JAVA_VENDOR;, public static final java.lang.String JVM_VENDOR;, public static final java.lang.String JVM_VERSION;, public static final java.lang.String JVM_NAME;, public static final java.lang.String OS_ARCH;, public static final java.lang.String OS_NAME;, public static final java.lang.String OS_VERSION;, public static final com.zeroturnaround.rebellabs.oceanofmemories.common.util.JvmUtil$JavaVersionInfo JAVA_VERSION_INFO;, public static final com.zeroturnaround.rebellabs.oceanofmemories.common.util.JvmUtil$JvmInfo JVM_INFO;, public static final byte BITS_32;, public static final byte BITS_64;, public static final byte SIZE_32_BIT;, public static final byte SIZE_64_BIT;, public static final byte DEFAULT_COMPRESSED_REF_SHIFT_SIZE;, public static final byte INVALID_ADDRESS;, public static final byte ADDRESSING_4_BYTE;, public static final byte ADDRESSING_8_BYTE;, public static final byte ADDRESSING_16_BYTE;",[],[],com.zeroturnaround.rebellabs.oceanofmemories.common.util.JvmUtil$Address64BitWithCompressedOopsJvmUtil,[com.zeroturnaround.rebellabs.oceanofmemories.common.util.JvmUtil$Address64BitJvmUtil][com.zeroturnaround.rebellabs.oceanofmemories.common.util.JvmUtil$BaseJvmAwaretil][com.zeroturnaround.rebellabs.oceanofmemories.common.util.JvmUtil$JvmAwareUtil],[com.zeroturnaround.rebellabs.oceanofmemories.common.util.JvmUtil$Address64BitWithCompressedOopsJRockitJvmUtil]
16,../replication_package/raw_data/url416ee5b4ee_martinmarinov_HonProj_tgz-pJ8-martin_gui_MainJ8/wala0cfa.csv,89,martin/math/MathExpression.add:(Lmartin/math/MathsItem;)Z,martin/math/MathIm.clone:()Lmartin/math/MathsItem;,"@Override
public boolean add(MathsItem m) {
    if (m instanceof MathExpression) {
        for (HashSet<MathsItem> multiples : ((MathExpression) m).items) {
            final HashSet<MathsItem> clone = new HashSet<MathsItem>();
            for (MathsItem it : multiples) clone.add(it.clone());
            items.add(clone);
        }
    } else {
        final HashSet<MathsItem> multiple = new HashSet<MathsItem>();
        multiple.add(m.clone());
        items.add(multiple);
    }
    m = null;
    return true;
}","@Override
public MathsItem clone() {
    if (Tools.SIMPLIFICATION_ENABLED) {
        if (expr.isZero())
            return new MathNumber(0);
        if (real) {
            final MathsItem clone = expr.clone();
            if (negative) {
                negative = !negative;
                clone.negate();
            }
            return clone;
        }
    }
    return new MathIm(expr.clone(), negative, real);
}",invocation_error,78,1,1,0,TRUE,clone,0,0,0,martin.math.MathExpression,final java.util.HashSet<java.util.HashSet<martin.math.MathsItem>> items;,[martin.math.MathsItem],[],martin.math.MathIm,[martin.math.MathFunction][martin.math.MathsItem],[]
16,../replication_package/raw_data/url416ee5b4ee_martinmarinov_HonProj_tgz-pJ8-martin_gui_MainJ8/wala0cfa.csv,209,martin/math/MathExp.multiply:(Lmartin/math/MathsItem;)Z,martin/math/MathExpression.add:(Lmartin/math/MathsItem;)Z,"@Override
public boolean multiply(final MathsItem m) {
    if (m instanceof MathExp) {
        final MathExp me = (MathExp) m;
        negative = negative != me.negative;
        return expr.add(me.expr);
    }
    return false;
}","@Override
public boolean add(MathsItem m) {
    if (m instanceof MathExpression) {
        for (HashSet<MathsItem> multiples : ((MathExpression) m).items) {
            final HashSet<MathsItem> clone = new HashSet<MathsItem>();
            for (MathsItem it : multiples) clone.add(it.clone());
            items.add(clone);
        }
    } else {
        final HashSet<MathsItem> multiple = new HashSet<MathsItem>();
        multiple.add(m.clone());
        items.add(multiple);
    }
    m = null;
    return true;
}",invocation_polymorphism,40,1,1,0,TRUE,add,1,1,0,martin.math.MathExp,,[martin.math.MathFunction][martin.math.MathsItem],[],martin.math.MathExpression,[martin.math.MathsItem],[]
16,../replication_package/raw_data/url416ee5b4ee_martinmarinov_HonProj_tgz-pJ8-martin_gui_MainJ8/wala0cfa.csv,1288,martin/math/MathFunction.toString:()Ljava/lang/String;,martin/math/MathExpression.toString:()Ljava/lang/String;,"@Override
public String toString() {
    String name = this.name;
    if (Tools.MATHEMATICA_FRIENDLY_OUTPUT)
        name = name.substring(0, 1).toUpperCase() + name.substring(1);
    if (expr instanceof MathExpression) {
        if (negative)
            return ""-"" + name + expr;
        else
            return name + expr;
    }
    if (negative)
        return ""-"" + name + ""("" + expr + "")"";
    else
        return name + ""("" + expr + "")"";
}","@Override
public String toString() {
    final StringBuilder ans = new StringBuilder();
    ans.append(""("");
    if (DEBUG)
        ans.append("" [Exp]"");
    boolean first = true;
    for (HashSet<MathsItem> multiples : items) {
        if (multiples.isEmpty())
            continue;
        boolean first2 = true;
        for (MathsItem it : multiples) {
            final boolean itnegative = it.hasNegativeSign();
            if (!first2)
                ans.append(""*"");
            else if (DEBUG || (!itnegative && !first))
                ans.append(""+"");
            if (!first2 && itnegative && multiples.size() > 1)
                ans.append(""("");
            ans.append(it);
            if (!first2 && itnegative && multiples.size() > 1)
                ans.append("")"");
            first2 = false;
        }
        first = false;
    }
    ans.append("")"");
    return ans.toString();
}",tostring_not_found_specific,79,0,1,0,FALSE,toString,1,1,0,martin.math.MathFunction,"protected final java.lang.String name;, protected final martin.math.MathExpression expr;",[martin.math.MathsItem],[martin.math.MathExp][martin.math.MathIm][martin.math.MathSqrt],martin.math.MathExpression,[martin.math.MathsItem],[]
17,../replication_package/raw_data/url0067cdd33d_goldolphin_Mi_tgz-pJ8-mi_regex_CommonJ8/wala0cfa.csv,7,mi/regex/Regex.match:(Lmi/stream/ICharStream;Lmi/regex/Match;)Z,mi/regex/AbstractRegex.rollback:(Lmi/stream/ICharStream;Lmi/regex/Match;I)V,"boolean match(ICharStream stream, Match match) {
    int len = match.length();
    if (regex.match(stream, match)) {
        return true;
    }
    AbstractRegex.rollback(stream, match, len);
    return false;
}","static void rollback(ICharStream stream, Match match, int lastLen) {
    int needRetract = match.length() - lastLen;
    if (needRetract > 0) {
        for (int i = 0; i < needRetract; i++) {
            stream.retract();
        }
        match.setLength(lastLen);
    }
}",invocation_static,22,1,1,1,TRUE,rollback,1,1,0,mi.regex.Regex,,[],[],mi.regex.AbstractRegex,[],[mi.regex.AtomRegex][mi.regex.CharRegex][mi.regex.DotRegex][mi.regex.RefRegex][mi.regex.SetRegex][mi.regex.ClosureRegex][mi.regex.ClosureRegex$Loop][mi.regex.DollarRegex][mi.regex.EndRegex][mi.regex.GroupRegex][mi.regex.GroupRegex$GroupEnd][mi.regex.HatRegex][mi.regex.OrRegex]
17,../replication_package/raw_data/url0067cdd33d_goldolphin_Mi_tgz-pJ8-mi_regex_CommonJ8/wala0cfa.csv,58,mi/regex/CharRegex.match:(Lmi/stream/ICharStream;Lmi/regex/Match;)Z,mi/regex/CharRegex.match:(Lmi/stream/ICharStream;Lmi/regex/Match;)Z,"@Override
public boolean match(ICharStream stream, Match match) {
    char c = stream.peek();
    if (c == ch) {
        match.append(stream.poll());
        return next.match(stream, match);
    }
    return false;
}","@Override
public boolean match(ICharStream stream, Match match) {
    char c = stream.peek();
    if (c == ch) {
        match.append(stream.poll());
        return next.match(stream, match);
    }
    return false;
}",invocation_polymorphism,31,1,1,1,TRUE,match,0,0,0,mi.regex.CharRegex,,[mi.regex.AtomRegex][mi.regex.AbstractRegex],[],mi.regex.CharRegex,[mi.regex.AtomRegex][mi.regex.AbstractRegex],[]
17,../replication_package/raw_data/url0067cdd33d_goldolphin_Mi_tgz-pJ8-mi_regex_CommonJ8/wala0cfa.csv,176,mi/regex/Regex.parseClosure:(Lmi/stream/StringStream;)Lmi/regex/AbstractRegex;,mi/regex/Regex.parseNumber:(Lmi/stream/StringStream;)I,"AbstractRegex parseClosure(StringStream stream) {
    switch(stream.peek()) {
        case '^':
            stream.poll();
            return new HatRegex();
        case '$':
            stream.poll();
            return new DollarRegex();
    }
    AbstractRegex term = parseTerm(stream);
    if (term == null) {
        return null;
    }
    switch(stream.peek()) {
        case '*':
            stream.poll();
            return new ClosureRegex(term, 0);
        case '+':
            stream.poll();
            return new ClosureRegex(term, 1);
        case '?':
            stream.poll();
            return new ClosureRegex(term, 0, 1);
        case '{':
            stream.poll();
            int start = parseNumber(stream);
            int end = start;
            if (stream.peek() == ',') {
                stream.poll();
                end = parseNumber(stream);
                verify(start <= end, stream.getPos(), ""Invalid repeat range"");
            }
            verify(stream.poll() == '}', stream.getPos(), ""Missing '}'"");
            return new ClosureRegex(term, start, end);
        default:
            return term;
    }
}","int parseNumber(StringStream stream) {
    StringBuilder buffer = new StringBuilder();
    while (CharType.isDigit(stream.peek())) {
        buffer.append(stream.poll());
    }
    verify(buffer.length() > 0, stream.getPos(), ""Missing number"");
    return Integer.parseInt(buffer.toString());
}",invocation_this,169,1,1,1,TRUE,parseNumber,1,1,0,mi.regex.Regex,,[],[],mi.regex.Regex,[],[]
17,../replication_package/raw_data/url0067cdd33d_goldolphin_Mi_tgz-pJ8-mi_regex_CommonJ8/wala0cfa.csv,323,mi/regex/ClosureRegex.print:(I)V,mi/regex/DotRegex.print:(I)V,"@Override
void print(int indent) {
    describe(indent, String.format(""%d, %s"", loop.lower, loop.upper == MAX_UPPER ? ""MAX"" : loop.upper));
    printChildren(indent, clause);
    loop.next.print(indent);
}","@Override
void print(int indent) {
    describe(indent);
    next.print(indent);
}",invocation_polymorphism,73,1,1,0,TRUE,print,0,0,0,mi.regex.ClosureRegex,,[mi.regex.AbstractRegex],[],mi.regex.DotRegex,[mi.regex.AtomRegex][mi.regex.AbstractRegex],[]
18,../replication_package/raw_data/url2b521cbda7_eobermuhlner_jhuge_tgz-pJ8-ch_obermuhlner_jhuge_example_MeasureHeapJ8/wala0cfa.csv,284,ch/obermuhlner/jhuge/collection/builder/AbstractHugeCollectionBuilder.prepare:()V,ch/obermuhlner/jhuge/converter/SerializableConverter.serializedLength:()I,"private void prepare() {
    if (prepared) {
        return;
    }
    if (elementConverter == null) {
        if (classLoader == null && elementClass != null) {
            classLoader = elementClass.getClassLoader();
        }
        elementConverter = Converters.bestConverter(elementClass, classLoader);
    }
    if (compressElement) {
        elementConverter = new ZipCompressionConverter<E>(elementConverter);
    }
    if (memoryManager == null) {
        if (blockSize == null) {
            int serializedLength = elementConverter.serializedLength();
            blockSize = serializedLength > 0 ? serializedLength : MemoryMappedFileManager.NO_BLOCK_SIZE;
        }
        memoryManager = new MemoryMappedFileManager(bufferSize, blockSize);
    }
    if (capacity == 0) {
        capacity = 8;
    }
    prepared = true;
}","@Override
public int serializedLength() {
    return -1;
}",invocation_polymorphism,95,1,1,1,TRUE,serializedLength,1,1,0,ch.obermuhlner.jhuge.collection.builder.AbstractHugeCollectionBuilder,,,,ch.obermuhlner.jhuge.converter.SerializableConverter,,
18,../replication_package/raw_data/url2b521cbda7_eobermuhlner_jhuge_tgz-pJ8-ch_obermuhlner_jhuge_example_MeasureHeapJ8/wala0cfa.csv,285,ch/obermuhlner/jhuge/collection/builder/AbstractHugeCollectionBuilder.prepare:()V,ch/obermuhlner/jhuge/converter/ZipCompressionConverter.serializedLength:()I,"private void prepare() {
    if (prepared) {
        return;
    }
    if (elementConverter == null) {
        if (classLoader == null && elementClass != null) {
            classLoader = elementClass.getClassLoader();
        }
        elementConverter = Converters.bestConverter(elementClass, classLoader);
    }
    if (compressElement) {
        elementConverter = new ZipCompressionConverter<E>(elementConverter);
    }
    if (memoryManager == null) {
        if (blockSize == null) {
            int serializedLength = elementConverter.serializedLength();
            blockSize = serializedLength > 0 ? serializedLength : MemoryMappedFileManager.NO_BLOCK_SIZE;
        }
        memoryManager = new MemoryMappedFileManager(bufferSize, blockSize);
    }
    if (capacity == 0) {
        capacity = 8;
    }
    prepared = true;
}",class ZipCompressionConverter { int serializedLength ( ) { return int1; },invocation_new,95,1,1,0,TRUE,serializedLength,1,1,0,ch.obermuhlner.jhuge.collection.builder.AbstractHugeCollectionBuilder,,,,ch.obermuhlner.jhuge.converter.ZipCompressionConverter,,
18,../replication_package/raw_data/url2b521cbda7_eobermuhlner_jhuge_tgz-pJ8-ch_obermuhlner_jhuge_example_MeasureHeapJ8/wala0cfa.csv,372,ch/obermuhlner/jhuge/memory/MemoryMappedFileManager.compact:()V,ch/obermuhlner/jhuge/memory/MemoryMappedFileManager.isSameBuffer:(JJ)Z,"public void compact() {
    int n = freeBlocksList.size();
    for (int i = n - 1; i > 0; i--) {
        long leftAddress = freeBlocksList.get(i - 1);
        long rightAddress = freeBlocksList.get(i);
        if (isSameBuffer(leftAddress, rightAddress)) {
            int leftLength = getLengthOfFreeBlock(leftAddress);
            int rightLength = getLengthOfFreeBlock(rightAddress);
            long calulatedAddressAfterLeft = leftAddress + 4 + leftLength;
            if (calulatedAddressAfterLeft == rightAddress) {
                int combinedLength = leftLength + 4 + rightLength;
                setLength(leftAddress, combinedLength);
                freeBlocksList.remove(i);
                freeBytes += 4;
            } else {
                if (calulatedAddressAfterLeft > rightAddress) {
                    throw new IllegalStateException(""left "" + leftAddress + "","" + leftLength + "" overlaps "" + rightAddress + "","" + rightLength);
                }
            }
        }
    }
}","private boolean isSameBuffer(long address1, long address2) {
    int address1BufferIndex = (int) (address1 / bufferSize);
    int address2BufferIndex = (int) (address2 / bufferSize);
    return address1BufferIndex == address2BufferIndex;
}",invocation_this,47,1,1,0,TRUE,isSameBuffer,1,1,0,ch.obermuhlner.jhuge.memory.MemoryMappedFileManager,,[ch.obermuhlner.jhuge.memory.AbstractMemoryManager][ch.obermuhlner.jhuge.memory.MemoryManager],[],ch.obermuhlner.jhuge.memory.MemoryMappedFileManager,[ch.obermuhlner.jhuge.memory.AbstractMemoryManager][ch.obermuhlner.jhuge.memory.MemoryManager],[]
18,../replication_package/raw_data/url2b521cbda7_eobermuhlner_jhuge_tgz-pJ8-ch_obermuhlner_jhuge_example_MeasureHeapJ8/wala0cfa.csv,574,ch/obermuhlner/jhuge/collection/internal/HugeLongArray.setSize:(I)V,ch/obermuhlner/jhuge/collection/internal/HugeLongArray.set:(IJ)J,"public void setSize(int newSize) {
    byte[] data = memoryManager.read(address);
    if (data.length < newSize * ELEMENT_SIZE) {
        byte[] newData = new byte[newSize * ELEMENT_SIZE];
        System.arraycopy(data, 0, newData, 0, size * ELEMENT_SIZE);
        memoryManager.free(address);
        address = memoryManager.allocate(newData);
    } else {
        for (int i = newSize; i < size; i++) {
            set(i, 0);
        }
    }
    size = newSize;
}","@Override
public long set(int index, long value) {
    checkSize(index);
    byte[] data = memoryManager.read(address);
    ByteBuffer wrap = ByteBuffer.wrap(data);
    wrap.position(index * ELEMENT_SIZE);
    long oldValue = wrap.getLong();
    wrap.position(index * ELEMENT_SIZE);
    wrap.putLong(value);
    memoryManager.write(address, data);
    return oldValue;
}",invocation_this,87,1,1,0,TRUE,set,1,1,0,ch.obermuhlner.jhuge.collection.internal.HugeLongArray,,[ch.obermuhlner.jhuge.collection.internal.AbstractLongArray][ch.obermuhlner.jhuge.collection.internal.LongArray],[],ch.obermuhlner.jhuge.collection.internal.HugeLongArray,[ch.obermuhlner.jhuge.collection.internal.AbstractLongArray][ch.obermuhlner.jhuge.collection.internal.LongArray],[]
18,../replication_package/raw_data/url2b521cbda7_eobermuhlner_jhuge_tgz-pJ8-ch_obermuhlner_jhuge_example_MeasureHeapJ8/wala0cfa.csv,943,ch/obermuhlner/jhuge/memory/MemoryMappedFileManager.findFreeBlock:(I)J,ch/obermuhlner/jhuge/memory/MemoryMappedFileManager.compact:()V,"private long findFreeBlock(int length) {
    if (length > bufferSize) {
        throw new IllegalArgumentException(""block.length="" + length + "" > "" + ""buffer.length="" + bufferSize);
    }
    long freeBlock = findFreeBlock2(length);
    if (freeBlock == NO_ADDRESS) {
        compact();
        freeBlock = findFreeBlock2(length);
    }
    if (freeBlock == NO_ADDRESS) {
        addMemoryMappedFile();
        freeBlock = findFreeBlock2(length);
    }
    return freeBlock;
}","public void compact() {
    int n = freeBlocksList.size();
    for (int i = n - 1; i > 0; i--) {
        long leftAddress = freeBlocksList.get(i - 1);
        long rightAddress = freeBlocksList.get(i);
        if (isSameBuffer(leftAddress, rightAddress)) {
            int leftLength = getLengthOfFreeBlock(leftAddress);
            int rightLength = getLengthOfFreeBlock(rightAddress);
            long calulatedAddressAfterLeft = leftAddress + 4 + leftLength;
            if (calulatedAddressAfterLeft == rightAddress) {
                int combinedLength = leftLength + 4 + rightLength;
                setLength(leftAddress, combinedLength);
                freeBlocksList.remove(i);
                freeBytes += 4;
            } else {
                if (calulatedAddressAfterLeft > rightAddress) {
                    throw new IllegalStateException(""left "" + leftAddress + "","" + leftLength + "" overlaps "" + rightAddress + "","" + rightLength);
                }
            }
        }
    }
}",invocation_this,62,1,1,1,TRUE,compact,1,1,0,ch.obermuhlner.jhuge.memory.MemoryMappedFileManager,,[ch.obermuhlner.jhuge.memory.AbstractMemoryManager][ch.obermuhlner.jhuge.memory.MemoryManager],[],ch.obermuhlner.jhuge.memory.MemoryMappedFileManager,[ch.obermuhlner.jhuge.memory.AbstractMemoryManager][ch.obermuhlner.jhuge.memory.MemoryManager],[]
19,../replication_package/raw_data/url27db8982cd_leohinterlang_argFace_tgz-pJ8-com_fidelis_argface_ArgSampleJ8/wala0cfa.csv,321,com/fidelis/argface/ArgBase.parseArgOne:(Lcom/fidelis/argface/ArgNode;[Ljava/lang/String;)I,com/fidelis/argface/ArgNode.toString:()Ljava/lang/String;,"private int parseArgOne(ArgNode start, String[] args) {
    int nArg = 0;
    int firstOperand = -1;
    boolean takeAllArgs = false;
    boolean separatorSeen = false;
    nonOptionList.clear();
    for (nArg = 0; nArg < args.length; nArg++) {
        String arg = args[nArg];
        Debug.trace(""arg: "" + arg);
        if (takeAllArgs) {
            addNonOption(arg);
            continue;
        }
        String name = null;
        boolean doubleDash = false;
        if (arg.startsWith(""--"")) {
            doubleDash = true;
            if (arg.length() == 2) {
                takeAllArgs = true;
                if (posixFormat) {
                    firstOperand = nArg;
                }
                continue;
            } else {
                name = arg.substring(2);
            }
        } else  
        if (arg.startsWith(""-"")) {
            if (arg.length() == 1) {
                addNonOption(arg);
                if (posixFormat) {
                    takeAllArgs = true;
                    firstOperand = nArg;
                }
                continue;
            } else {
                name = arg.substring(1);
            }
        } else  
        {
            addNonOption(arg);
            if (posixFormat) {
                takeAllArgs = true;
                firstOperand = nArg;
            }
            continue;
        }
        separatorSeen = false;
        String value = null;
        if (name.contains(""="") || name.contains("":"")) {
            separatorSeen = true;
            String[] parts = name.split(""[=:]"", 2);
            name = parts[0];
            value = parts[1];
            if (value.isEmpty()) {
                value = null;
            }
        } else  
        if ((!doubleDash) && (letterGroup(letters, name))) {
            for (int n = 0; n < name.length(); n++) {
                String letter = name.substring(n, n + 1);
                ArgOption opt = findOption(start, letter);
                if (opt != null) {
                    setOptionTrue(opt);
                    targetOptions.add(opt);
                } else {
                    return -1;
                }
            }
            continue;
        } else  
        if (letterArg(letters, name)) {
            value = name.substring(1);
            name = name.substring(0, 1);
        }
        ArgOption option = findOption(start, name);
        if (option == null) {
            option = findOptionAbb(start, name);
        }
        if (option == null) {
            if (findOption(name) != null) {
                String text = ""Option -"" + name + "" does not apply to this usage"";
                help.addProblem(start, text);
                return -1;
            } else  
            {
                ArgUtil.printError(""Invalid option: "" + arg);
                return -999;
            }
        } else  
        {
            if (mutexOption(start, option)) {
                return -1;
            }
            setOptionTrue(option);
            targetOptions.add(option);
            if (option.nameMatch(""help"")) {
                if (help.printHelp()) {
                    nArg = args.length;
                    break;
                }
            }
            if (option.nameMatch(""version"")) {
                if (help.printVersion()) {
                    nArg = args.length;
                    break;
                }
            }
            if (option.nameMatch(""about"")) {
                if (help.printAbout()) {
                    nArg = args.length;
                    break;
                }
            }
            String argName = option.getArgName();
            if (argName == null) {
                continue;
            }
            if (value == null) {
                if (option.isArgOptional()) {
                    if (nArg + 1 < args.length) {
                        if (separatorSeen) {
                            value = args[++nArg];
                        } else  
                        {
                            if (!args[nArg + 1].startsWith(""="") && !args[nArg + 1].startsWith("":"")) {
                                continue;
                            } else  
                            {
                                value = args[++nArg].substring(1);
                                if (value.length() == 0) {
                                    if (nArg + 1 < args.length) {
                                        value = args[++nArg];
                                    }
                                }
                            }
                        }
                    }
                } else  
                {
                    while (++nArg < args.length) {
                        value = args[nArg];
                        if (value.startsWith(""="") || value.startsWith("":"")) {
                            value = value.substring(1);
                            if (value.length() > 0) {
                                break;
                            }
                        } else  
                        {
                            break;
                        }
                    }
                }
            }
            Debug.trace(""opt: "" + value);
            setArgString(option, value);
        }
    }
    if (firstOperand >= 0) {
        nArg = firstOperand;
    }
    return nArg;
}","@Override
public String toString() {
    return String.format(""%s %s %s %s %s %s"", (south == null ? "" "" : ""S""), (east == null ? "" "" : ""E""), (entry instanceof ArgOption ? ""Option: "" : (entry instanceof ArgOperand ? ""Operand:"" : ""Group:  "")), (optional ? ""O"" : "" ""), (repeat ? ""R"" : "" ""), entry);
}",tostring_not_found_trans,242,0,1,0,FALSE,toString,0,0,0,com.fidelis.argface.ArgBase,,[com.fidelis.argface.ArgFace],[com.fidelis.argface.ArgProcedure][com.fidelis.argface.ArgPrototype][com.fidelis.argface.ArgStandard][com.fidelis.argface.ArgCommand][com.fidelis.argface.BaseModel],com.fidelis.argface.ArgNode,[],[]
19,../replication_package/raw_data/url27db8982cd_leohinterlang_argFace_tgz-pJ8-com_fidelis_argface_ArgSampleJ8/wala0cfa.csv,329,com/fidelis/argface/ArgSample.checkValue:(Ljava/lang/String;)V,com/fidelis/argface/ArgOption.compareTo:(Ljava/lang/Object;)I,"private void checkValue(String tok) {
    String[] nvs = tok.split(""="", 2);
    String name = nvs[0];
    String value = null;
    if (nvs.length == 2) {
        value = nvs[1];
    }
    if (!argFace.has(name)) {
        System.out.printf(""*** ERROR ***  %s fails \""has\"", should be true%n"", name);
    }
    if (!checkTrue(name)) {
        System.out.printf(""*** ERROR ***  %s program variable should be set%n"", name);
    }
    if (value != null) {
        if (value.startsWith("":"")) {
            value = value.substring(1);
            int valCount = intPositive(value);
            int count = argFace.count(name);
            if (valCount != count) {
                System.out.printf(""*** ERROR ***  %s count expected %d is %d%n"", name, valCount, count);
            }
            return;
        } else if (value.startsWith(""["")) {
            value = value.substring(1);
            String[] values = value.split("","");
            String[] vals = argFace.valueArray(name);
            for (int n = 0; n < vals.length; n++) {
                value = values[n];
                if (!value.equals(vals[n])) {
                    System.out.printf(""*** ERROR ***  "" + ""%s value expected \""%s\"" is \""%s\""%n,"", name, value, vals[n]);
                }
            }
        }
        String val = argFace.value(name);
        if (!value.equals(val)) {
            System.out.printf(""*** ERROR ***  %s value expected \""%s\"" is \""%s\""%n"", name, value, val);
        }
    }
}","class ArgOption { int compareTo ( Object a0, ) { return int1; }",trans,4,0,1,0,FALSE,compareTo,0,0,0,com.fidelis.argface.ArgSample,,[],[],com.fidelis.argface.ArgOption,[java.lang.Comparable<com.fidelis.argface.ArgOption>],[]
19,../replication_package/raw_data/url27db8982cd_leohinterlang_argFace_tgz-pJ8-com_fidelis_argface_ArgSampleJ8/wala0cfa.csv,767,com/fidelis/argface/ArgBase.includeAllOptions:(Lcom/fidelis/argface/ArgNode;)V,com/fidelis/argface/ArgBase.findOption:(Lcom/fidelis/argface/ArgNode;Ljava/lang/String;)Lcom/fidelis/argface/ArgOption;,"private void includeAllOptions(ArgNode node) {
    ArgNode saveNode = argList.getCurrent();
    argList.setCurrent(node);
    for (ArgOption option : optionList) {
        if (findOption(node, option.getName()) != null) {
            continue;
        } else {
            node = argList.insertEast(option);
        }
    }
    argList.setCurrent(saveNode);
}","private ArgOption findOption(ArgNode start, String name) {
    ArgOption option = null;
    ArgNode south = null;
    ArgList group = null;
    ArgNode node = start.getEast();
    while (node != null) {
        option = node.getOption();
        if (option != null) {
            if (option.nameMatch(name)) {
                return option;
            }
        } else  
        if ((group = node.getGroup()) != null) {
            option = findGroup(group, name);
            if (option != null) {
                return option;
            }
        }
        if ((south = node.getSouth()) != null) {
            option = findAlternative(south, name);
            if (option != null) {
                return option;
            }
        }
        node = node.getEast();
    }
    return null;
}",invocation_this,54,1,1,0,TRUE,findOption,1,1,0,com.fidelis.argface.ArgBase,,[com.fidelis.argface.ArgFace],[com.fidelis.argface.ArgProcedure][com.fidelis.argface.ArgPrototype][com.fidelis.argface.ArgStandard][com.fidelis.argface.ArgCommand][com.fidelis.argface.BaseModel],com.fidelis.argface.ArgBase,[com.fidelis.argface.ArgFace],[com.fidelis.argface.ArgProcedure][com.fidelis.argface.ArgPrototype][com.fidelis.argface.ArgStandard][com.fidelis.argface.ArgCommand][com.fidelis.argface.BaseModel]
20,../replication_package/raw_data/url027b37a4db_ctriposs_bigmap_tgz-pJ8-com_ctriposs_bigmap_LimitTestJ8/wala0cfa.csv,3,com/ctriposs/bigmap/LimitTest.main:([Ljava/lang/String;)V,com/ctriposs/bigmap/LimitTest.clear:()V,"public static void main(String[] args) throws IOException {
    try {
        limitTest();
    } catch (Exception ex) {
        ex.printStackTrace();
    } finally {
        clear();
    }
}","public static void clear() throws IOException {
    if (map != null) {
        map.close();
    }
    FileUtil.deleteDirectory(new File(testDir));
}",invocation_this,14,1,1,0,TRUE,clear,1,1,1,com.ctriposs.bigmap.LimitTest,,[],[],com.ctriposs.bigmap.LimitTest,[],[]
20,../replication_package/raw_data/url027b37a4db_ctriposs_bigmap_tgz-pJ8-com_ctriposs_bigmap_LimitTestJ8/wala0cfa.csv,39,com/ctriposs/bigmap/BigConcurrentHashMapImpl.restoreInUseMapEntry:(Lcom/ctriposs/bigmap/MapEntry;)V,com/ctriposs/bigmap/MapEntry.getEntryValue:()[B,"void restoreInUseMapEntry(MapEntry me) {
    try {
        byte[] key = me.getEntryKey();
        if (key == null || key.length == 0)
            throw new NullPointerException(""key is null or empty"");
        if (me.getEntryValue() == null || me.getEntryValue().length == 0)
            throw new NullPointerException(""value is null or empty"");
        if (me.getTimeToLive() < 0)
            throw new IllegalArgumentException(""Invalid time to live value "" + me.getTimeToLive() + "", it must be >= 0."");
        final int hash = Arrays.hashCode(key);
        segmentFor(hash).restoreInUseMapEntry(me, hash);
    } catch (IOException e) {
        throw new RuntimeException(""Fail to restore/put key/value in the map"", e);
    }
}","public byte[] getEntryValue() throws IOException {
    long dataPageIndex = indexPage.getLocal().getLong(indexItemOffset + INDEX_ITEM_DATA_PAGE_INDEX_OFFSET);
    int dataSlotOffset = indexPage.getLocal().getInt(indexItemOffset + INDEX_ITEM_DATA_SLOT_OFFSET_OFFSET);
    int entryValueOffset = dataSlotOffset + this.getKeyLength();
    int entryValueLength = getValueLength();
    IMappedPage dataPage = dataPageFactory.acquirePage(dataPageIndex);
    byte[] value = dataPage.getLocal(entryValueOffset, entryValueLength);
    return value;
}",invocation_same_class,25,1,1,0,TRUE,getEntryValue,1,1,0,com.ctriposs.bigmap.BigConcurrentHashMapImpl,"static final float DEFAULT_LOAD_FACTOR;, final com.ctriposs.bigmap.BigConcurrentHashMapImpl$Segment<byte[]>[] segments;, final com.ctriposs.bigmap.IMapEntryFactory mapEntryFactory;, final java.lang.String mapDir;, final java.lang.String mapName;, java.util.Timer purgeTimer;, final com.ctriposs.bigmap.BigConfig config;, final java.util.concurrent.atomic.AtomicLong purgeCount;",[com.ctriposs.bigmap.IBigConcurrentHashMap][java.io.Closeable],[],com.ctriposs.bigmap.MapEntry,[],[]
20,../replication_package/raw_data/url027b37a4db_ctriposs_bigmap_tgz-pJ8-com_ctriposs_bigmap_LimitTestJ8/wala0cfa.csv,69,com/ctriposs/bigmap/page/MappedPageFactoryImpl.acquirePage:(J)Lcom/ctriposs/bigmap/page/IMappedPage;,com/ctriposs/bigmap/page/MappedPageImpl.toString:()Ljava/lang/String;,"public IMappedPage acquirePage(long index) throws IOException {
    MappedPageImpl mpi = cache.get(index);
    if (mpi == null) {
        synchronized (cache) {
            mpi = cache.get(index);
            if (mpi == null) {
                RandomAccessFile raf = null;
                FileChannel channel = null;
                try {
                    String fileName = this.getFileNameByIndex(index);
                    raf = new RandomAccessFile(fileName, ""rw"");
                    channel = raf.getChannel();
                    MappedByteBuffer mbb = channel.map(READ_WRITE, 0, this.pageSize);
                    mpi = new MappedPageImpl(mbb, fileName, index);
                    cache.put(index, mpi);
                    if (logger.isDebugEnabled()) {
                        logger.debug(""Mapped page for "" + fileName + "" was just created and cached."");
                    }
                } finally {
                    if (channel != null)
                        channel.close();
                    if (raf != null)
                        raf.close();
                }
            }
        }
    } else {
        if (logger.isDebugEnabled()) {
            logger.debug(""Hit mapped page "" + mpi.getPageFile() + "" in cache."");
        }
    }
    return mpi;
}","public String toString() {
    return ""Mapped page for "" + this.pageFile + "", index = "" + this.index + ""."";
}",tostring_not_found_multijump,94,0,1,0,FALSE,toString,0,0,0,com.ctriposs.bigmap.page.MappedPageFactoryImpl,"public static final java.lang.String PAGE_FILE_NAME;, public static final java.lang.String PAGE_FILE_SUFFIX;",[com.ctriposs.bigmap.page.IMappedPageFactory],[],com.ctriposs.bigmap.page.MappedPageImpl,[com.ctriposs.bigmap.page.IMappedPage][java.io.Closeable],[]
20,../replication_package/raw_data/url027b37a4db_ctriposs_bigmap_tgz-pJ8-com_ctriposs_bigmap_LimitTestJ8/wala0cfa.csv,97,com/ctriposs/bigmap/page/MappedPageFactoryImpl.acquirePage:(J)Lcom/ctriposs/bigmap/page/IMappedPage;,org/apache/log4j/config/PropertySetterException.getMessage:()Ljava/lang/String;,"public IMappedPage acquirePage(long index) throws IOException {
    MappedPageImpl mpi = cache.get(index);
    if (mpi == null) {
        synchronized (cache) {
            mpi = cache.get(index);
            if (mpi == null) {
                RandomAccessFile raf = null;
                FileChannel channel = null;
                try {
                    String fileName = this.getFileNameByIndex(index);
                    raf = new RandomAccessFile(fileName, ""rw"");
                    channel = raf.getChannel();
                    MappedByteBuffer mbb = channel.map(READ_WRITE, 0, this.pageSize);
                    mpi = new MappedPageImpl(mbb, fileName, index);
                    cache.put(index, mpi);
                    if (logger.isDebugEnabled()) {
                        logger.debug(""Mapped page for "" + fileName + "" was just created and cached."");
                    }
                } finally {
                    if (channel != null)
                        channel.close();
                    if (raf != null)
                        raf.close();
                }
            }
        }
    } else {
        if (logger.isDebugEnabled()) {
            logger.debug(""Hit mapped page "" + mpi.getPageFile() + "" in cache."");
        }
    }
    return mpi;
}",class PropertySetterException { String getMessage ( ) { return String1; },exception_info,71,0,1,0,FALSE,getMessage,0,0,0,com.ctriposs.bigmap.page.MappedPageFactoryImpl,"public static final java.lang.String PAGE_FILE_NAME;, public static final java.lang.String PAGE_FILE_SUFFIX;",[com.ctriposs.bigmap.page.IMappedPageFactory],[],org.apache.log4j.config.PropertySetterException,,
21,../replication_package/raw_data/url3426a97ee4_rtreffer_minidns_tgz-pJ8-de_measite_minidns_minidnsrepl_MiniDnsReplJ8/wala0cfa.csv,570,de/measite/minidns/source/NetworkDataSource.queryTcp:(Lde/measite/minidns/DNSMessage;Ljava/net/InetAddress;I)Lde/measite/minidns/DNSMessage;,de/measite/minidns/DNSName.length:()I,"protected DNSMessage queryTcp(DNSMessage message, InetAddress address, int port) throws IOException {
    Socket socket = null;
    try {
        socket = new Socket();
        SocketAddress socketAddress = new InetSocketAddress(address, port);
        socket.connect(socketAddress, timeout);
        socket.setSoTimeout(timeout);
        DataOutputStream dos = new DataOutputStream(socket.getOutputStream());
        message.writeTo(dos);
        dos.flush();
        DataInputStream dis = new DataInputStream(socket.getInputStream());
        int length = dis.readUnsignedShort();
        byte[] data = new byte[length];
        int read = 0;
        while (read < length) {
            read += dis.read(data, read, length - read);
        }
        DNSMessage dnsMessage = new DNSMessage(data);
        if (dnsMessage.id != message.id) {
            throw new MiniDNSException.IdMismatch(message, dnsMessage);
        }
        return dnsMessage;
    } finally {
        if (socket != null) {
            socket.close();
        }
    }
}","@Override
public int length() {
    return ace.length();
}",trans,49,0,1,0,FALSE,length,0,0,0,de.measite.minidns.source.NetworkDataSource,protected static final java.util.logging.Logger LOGGER;,[de.measite.minidns.source.DNSDataSource],[de.measite.minidns.source.NetworkDataSourceTest$1TestNetworkDataSource][de.measite.minidns.source.NetworkDataSourceWithAccounting],de.measite.minidns.DNSName,[java.lang.CharSequence][java.io.Serializable][java.lang.Comparable<de.measite.minidns.DNSName>],[]
21,../replication_package/raw_data/url3426a97ee4_rtreffer_minidns_tgz-pJ8-de_measite_minidns_minidnsrepl_MiniDnsReplJ8/wala0cfa.csv,1491,de/measite/minidns/dnssec/DNSSECClient.verifySignedRecords:(Lde/measite/minidns/Question;Lde/measite/minidns/record/RRSIG;Ljava/util/List;)Ljava/util/Set;,de/measite/minidns/dnssec/DNSSECClient.queryDnssec:(Ljava/lang/CharSequence;Lde/measite/minidns/Record$TYPE;)Lde/measite/minidns/dnssec/DNSSECMessage;,"private Set<UnverifiedReason> verifySignedRecords(Question q, RRSIG rrsig, List<Record<? extends Data>> records) throws IOException {
    Set<UnverifiedReason> result = new HashSet<>();
    DNSKEY dnskey = null;
    if (rrsig.typeCovered == TYPE.DNSKEY) {
        for (Record<? extends Data> record : records) {
            Record<DNSKEY> dnsKeyRecord = record.ifPossibleAs(DNSKEY.class);
            if (dnsKeyRecord == null)
                continue;
            if (dnsKeyRecord.payloadData.getKeyTag() == rrsig.keyTag) {
                dnskey = dnsKeyRecord.payloadData;
                break;
            }
        }
    } else if (q.type == TYPE.DS && rrsig.signerName.equals(q.name)) {
        result.add(new NoTrustAnchorReason(q.name.ace));
        return result;
    } else {
        DNSSECMessage dnskeyRes = queryDnssec(rrsig.signerName, TYPE.DNSKEY);
        if (dnskeyRes == null) {
            throw new DNSSECValidationFailedException(q, ""There is no DNSKEY "" + rrsig.signerName + "", but it is used"");
        }
        result.addAll(dnskeyRes.getUnverifiedReasons());
        for (Record<? extends Data> record : dnskeyRes.answerSection) {
            Record<DNSKEY> dnsKeyRecord = record.ifPossibleAs(DNSKEY.class);
            if (dnsKeyRecord == null)
                continue;
            if (dnsKeyRecord.payloadData.getKeyTag() == rrsig.keyTag) {
                dnskey = dnsKeyRecord.payloadData;
            }
        }
    }
    if (dnskey == null) {
        throw new DNSSECValidationFailedException(q, records.size() + "" "" + rrsig.typeCovered + "" record(s) are signed using an unknown key."");
    }
    UnverifiedReason unverifiedReason = verifier.verify(records, rrsig, dnskey);
    if (unverifiedReason != null) {
        result.add(unverifiedReason);
    }
    return result;
}","class DNSSECClient { DNSSECMessage queryDnssec ( CharSequence a0, Record a1, ) { return DNSSECMessage1; }",invocation_this,163,1,1,0,TRUE,queryDnssec,1,1,0,de.measite.minidns.dnssec.DNSSECClient,,[de.measite.minidns.recursive.ReliableDNSClient][de.measite.minidns.AbstractDNSClient],[],de.measite.minidns.dnssec.DNSSECClient,[de.measite.minidns.recursive.ReliableDNSClient][de.measite.minidns.AbstractDNSClient],[]
21,../replication_package/raw_data/url3426a97ee4_rtreffer_minidns_tgz-pJ8-de_measite_minidns_minidnsrepl_MiniDnsReplJ8/wala0cfa.csv,2596,de/measite/minidns/DNSName.parse:(Ljava/io/DataInputStream;[B)Lde/measite/minidns/DNSName;,de/measite/minidns/DNSName.length:()I,"public static DNSName parse(DataInputStream dis, byte[] data) throws IOException {
    int c = dis.readUnsignedByte();
    if ((c & 0xc0) == 0xc0) {
        c = ((c & 0x3f) << 8) + dis.readUnsignedByte();
        HashSet<Integer> jumps = new HashSet<Integer>();
        jumps.add(c);
        return parse(data, c, jumps);
    }
    if (c == 0) {
        return DNSName.EMPTY;
    }
    byte[] b = new byte[c];
    dis.readFully(b);
    String s = IDN.toUnicode(new String(b));
    DNSName t = parse(dis, data);
    if (t.length() > 0) {
        s = s + ""."" + t;
    }
    return new DNSName(s);
}","@Override
public int length() {
    return ace.length();
}",invocation_same_class,67,0,1,0,TRUE,length,1,1,1,de.measite.minidns.DNSName,"public static final de.measite.minidns.DNSName EMPTY;, public static final de.measite.minidns.DNSName ROOT;, public final java.lang.String ace;",[java.lang.CharSequence][java.io.Serializable][java.lang.Comparable<de.measite.minidns.DNSName>],[],de.measite.minidns.DNSName,[java.lang.CharSequence][java.io.Serializable][java.lang.Comparable<de.measite.minidns.DNSName>],[]
21,../replication_package/raw_data/url3426a97ee4_rtreffer_minidns_tgz-pJ8-de_measite_minidns_minidnsrepl_MiniDnsReplJ8/wala0cfa.csv,14274,de/measite/minidns/Record.parse:(Ljava/io/DataInputStream;[B)Lde/measite/minidns/Record;,de/measite/minidns/Record$CLASS.getClass:(I)Lde/measite/minidns/Record$CLASS;,"public static Record<Data> parse(DataInputStream dis, byte[] data) throws IOException {
    DNSName name = DNSName.parse(dis, data);
    int typeValue = dis.readUnsignedShort();
    TYPE type = TYPE.getType(typeValue);
    int clazzValue = dis.readUnsignedShort();
    CLASS clazz = CLASS.getClass(clazzValue & 0x7fff);
    boolean unicastQuery = (clazzValue & 0x8000) > 0;
    long ttl = (((long) dis.readUnsignedShort()) << 16) + dis.readUnsignedShort();
    int payloadLength = dis.readUnsignedShort();
    Data payloadData;
    switch(type) {
        case SOA:
            payloadData = SOA.parse(dis, data);
            break;
        case SRV:
            payloadData = SRV.parse(dis, data);
            break;
        case MX:
            payloadData = MX.parse(dis, data);
            break;
        case AAAA:
            payloadData = AAAA.parse(dis);
            break;
        case A:
            payloadData = A.parse(dis);
            break;
        case NS:
            payloadData = NS.parse(dis, data);
            break;
        case CNAME:
            payloadData = CNAME.parse(dis, data);
            break;
        case PTR:
            payloadData = PTR.parse(dis, data);
            break;
        case TXT:
            payloadData = TXT.parse(dis, payloadLength);
            break;
        case OPT:
            payloadData = OPT.parse(dis, payloadLength);
            break;
        case DNSKEY:
            payloadData = DNSKEY.parse(dis, payloadLength);
            break;
        case RRSIG:
            payloadData = RRSIG.parse(dis, data, payloadLength);
            break;
        case DS:
            payloadData = DS.parse(dis, payloadLength);
            break;
        case NSEC:
            payloadData = NSEC.parse(dis, data, payloadLength);
            break;
        case NSEC3:
            payloadData = NSEC3.parse(dis, payloadLength);
            break;
        case NSEC3PARAM:
            payloadData = NSEC3PARAM.parse(dis);
            break;
        case TLSA:
            payloadData = TLSA.parse(dis, payloadLength);
            break;
        case OPENPGPKEY:
            payloadData = OPENPGPKEY.parse(dis, payloadLength);
            break;
        case DLV:
            payloadData = DLV.parse(dis, payloadLength);
            break;
        case UNKNOWN:
        default:
            payloadData = UNKNOWN.parse(dis, payloadLength, type);
            break;
    }
    return new Record<>(name, type, clazz, clazzValue, ttl, payloadData, unicastQuery);
}","class Record$CLASS { CLASS getClass ( int a0, ) { return CLASS1; }",invocation_static,29,1,1,0,TRUE,getClass,1,1,1,de.measite.minidns.Record,,,,de.measite.minidns.Record$CLASS,[java.lang.Enum<de.measite.minidns.Record$CLASS>],[]
21,../replication_package/raw_data/url3426a97ee4_rtreffer_minidns_tgz-pJ8-de_measite_minidns_minidnsrepl_MiniDnsReplJ8/wala0cfa.csv,15507,de/measite/minidns/EDNS$OptionCode.<clinit>:()V,de/measite/minidns/EDNS$OptionCode.<init>:(Ljava/lang/String;IILjava/lang/Class;)V,class EDNS$OptionCode { void <clinit> ( ) { return void1; },"class EDNS$OptionCode { void <init> ( String a0, int a1, int a2, Class a3, ) { return void1; }",invocation_constructor,26,1,1,0,TRUE,EDNS$OptionCode,1,1,0,de.measite.minidns.EDNS$OptionCode,"public static final de.measite.minidns.EDNS$OptionCode UNKNOWN;, public static final de.measite.minidns.EDNS$OptionCode NSID;, public final java.lang.Class<? extends de.measite.minidns.edns.EDNSOption> clazz;",[java.lang.Enum<de.measite.minidns.EDNS$OptionCode>],[],de.measite.minidns.EDNS$OptionCode,[java.lang.Enum<de.measite.minidns.EDNS$OptionCode>],[]
22,../replication_package/raw_data/url0980c8326f_TobiasScharnowski_Chess_tgz-pJ8-chess_StartJ8/wala0cfa.csv,6,chess/piece/impl/Pawn.<init>:(Lchess/Position;Lchess/piece/ChessColor;Lchess/ChessCoord;)V,chess/piece/impl/AbstractPiece.<init>:(Lchess/Position;Lchess/PieceType;Lchess/piece/ChessColor;Lchess/ChessCoord;)V,"public Pawn(Position pos, ChessColor cc, ChessCoord initialCoord) {
    super(pos, PieceType.PAWN, cc, initialCoord);
    if (ChessColor.WHITE.equals(cc)) {
        this.rankStep = STEP_WHITE;
        this.startRank = START_WHITE;
        this.promotionRank = PROMOTION_RANK_WHITE;
    } else {
        this.rankStep = STEP_BLACK;
        this.startRank = START_BLACK;
        this.promotionRank = PROMOTION_RANK_BLACK;
    }
    this.enPassantRank = promotionRank - (1 + FIRST_MOVE_FACTOR) * rankStep;
}","public AbstractPiece(final Position pos, final PieceType pieceType, final ChessColor color, final ChessCoord initialCoord) {
    this.pieceType = pieceType;
    this.color = color;
    this.pos = pos;
    pos.setPieceAt(this, initialCoord);
}",member_variable_initialization,7,1,1,1,FALSE,AbstractPiece,1,1,0,chess.piece.impl.Pawn,,[chess.piece.impl.AbstractPiece][chess.piece.Piece],[],chess.piece.impl.AbstractPiece,[chess.piece.Piece],[chess.piece.impl.AbstractDirectionalPiece][chess.piece.impl.Bishop][chess.piece.impl.Queen][chess.piece.impl.Rook][chess.piece.impl.King][chess.piece.impl.Knight][chess.piece.impl.Pawn]
22,../replication_package/raw_data/url0980c8326f_TobiasScharnowski_Chess_tgz-pJ8-chess_StartJ8/wala0cfa.csv,22,chess/piece/impl/DefaultPieceFactory.createDefaultPieceSets:(Lchess/Position;)V,chess/piece/impl/DefaultPieceFactory.createPiece:(Lchess/Position;Lchess/PieceType;Lchess/piece/ChessColor;Lchess/ChessCoord;)Lchess/piece/Piece;,"@Override
public void createDefaultPieceSets(final Position pos) {
    int file = 0;
    pos.addPiece(this.createPiece(pos, PieceType.ROOK, ChessColor.WHITE, Coords.coord(file++, 0)));
    pos.addPiece(this.createPiece(pos, PieceType.KNIGHT, ChessColor.WHITE, Coords.coord(file++, 0)));
    pos.addPiece(this.createPiece(pos, PieceType.BISHOP, ChessColor.WHITE, Coords.coord(file++, 0)));
    pos.addPiece(this.createPiece(pos, PieceType.QUEEN, ChessColor.WHITE, Coords.coord(file++, 0)));
    pos.addPiece(this.createPiece(pos, PieceType.KING, ChessColor.WHITE, Coords.coord(file++, 0)));
    pos.addPiece(this.createPiece(pos, PieceType.BISHOP, ChessColor.WHITE, Coords.coord(file++, 0)));
    pos.addPiece(this.createPiece(pos, PieceType.KNIGHT, ChessColor.WHITE, Coords.coord(file++, 0)));
    pos.addPiece(this.createPiece(pos, PieceType.ROOK, ChessColor.WHITE, Coords.coord(file++, 0)));
    for (int i = 0; i <= ChessRules.MAX_FILE; ++i) {
        pos.addPiece(this.createPiece(pos, PieceType.PAWN, ChessColor.WHITE, Coords.coord(i, 1)));
    }
    file = 0;
    pos.addPiece(this.createPiece(pos, PieceType.ROOK, ChessColor.BLACK, Coords.coord(file++, 7)));
    pos.addPiece(this.createPiece(pos, PieceType.KNIGHT, ChessColor.BLACK, Coords.coord(file++, 7)));
    pos.addPiece(this.createPiece(pos, PieceType.BISHOP, ChessColor.BLACK, Coords.coord(file++, 7)));
    pos.addPiece(this.createPiece(pos, PieceType.QUEEN, ChessColor.BLACK, Coords.coord(file++, 7)));
    pos.addPiece(this.createPiece(pos, PieceType.KING, ChessColor.BLACK, Coords.coord(file++, 7)));
    pos.addPiece(this.createPiece(pos, PieceType.BISHOP, ChessColor.BLACK, Coords.coord(file++, 7)));
    pos.addPiece(this.createPiece(pos, PieceType.KNIGHT, ChessColor.BLACK, Coords.coord(file++, 7)));
    pos.addPiece(this.createPiece(pos, PieceType.ROOK, ChessColor.BLACK, Coords.coord(file++, 7)));
    for (int i = 0; i <= ChessRules.MAX_FILE; ++i) {
        pos.addPiece(this.createPiece(pos, PieceType.PAWN, ChessColor.BLACK, Coords.coord(i, 6)));
    }
}","@Override
public Piece createPiece(Position pos, PieceType pieceType, final ChessColor color, ChessCoord initialCoord) {
    Piece result;
    switch(pieceType) {
        case PAWN:
            result = new Pawn(pos, color, initialCoord);
            break;
        case ROOK:
            result = new Rook(pos, color, initialCoord, initialCoord.getFile() > 3);
            break;
        case KNIGHT:
            result = new Knight(pos, color, initialCoord);
            break;
        case BISHOP:
            result = new Bishop(pos, color, initialCoord);
            break;
        case QUEEN:
            result = new Queen(pos, color, initialCoord);
            break;
        case KING:
            result = new King(pos, color, initialCoord);
            break;
        default:
            throw new UnsupportedOperationException(""The passed PieceType is not supported"");
    }
    return result;
}",invocation_this,310,1,1,1,TRUE,createPiece,1,1,0,chess.piece.impl.DefaultPieceFactory,,[chess.piece.PieceFactory],[],chess.piece.impl.DefaultPieceFactory,[chess.piece.PieceFactory],[]
22,../replication_package/raw_data/url0980c8326f_TobiasScharnowski_Chess_tgz-pJ8-chess_StartJ8/wala0cfa.csv,49,chess/impl/DefaultPosition.processMove:(Lchess/move/Move;)Z,chess/move/impl/CastlingMove.doMove:(Lchess/Position;)V,"@Override
public boolean processMove(Move move) {
    move.doMove(this);
    if (this.isLegalPosition()) {
        this.moves.add(move);
        return true;
    } else {
        move.undoMove(this);
        return false;
    }
}","class CastlingMove { void doMove ( Position a0, ) { return void1; }",invocation_same_class,2,1,1,0,TRUE,doMove,1,1,0,chess.impl.DefaultPosition,,[chess.Position],[],chess.move.impl.CastlingMove,[chess.move.impl.SimpleMove][chess.move.Move],[]
22,../replication_package/raw_data/url0980c8326f_TobiasScharnowski_Chess_tgz-pJ8-chess_StartJ8/wala0cfa.csv,57,chess/piece/impl/AbstractPiece.getPossibleMoves:()Ljava/util/List;,chess/piece/impl/Pawn._generateMoves:()Ljava/util/List;,"@Override
public final List<Move> getPossibleMoves() {
    if (!this.isActive()) {
        return Collections.emptyList();
    } else {
        return this._generateMoves();
    }
}",class Pawn { List _generateMoves ( ) { return List1; },invocation_this,12,1,1,1,TRUE,_generateMoves,1,1,0,chess.piece.impl.AbstractPiece,"protected chess.Position pos;, protected chess.PieceType pieceType;, protected chess.piece.ChessColor color;, protected chess.ChessCoord coord;",[chess.piece.Piece],[chess.piece.impl.AbstractDirectionalPiece][chess.piece.impl.Bishop][chess.piece.impl.Queen][chess.piece.impl.Rook][chess.piece.impl.King][chess.piece.impl.Knight][chess.piece.impl.Pawn],chess.piece.impl.Pawn,[chess.piece.impl.AbstractPiece][chess.piece.Piece],[]
22,../replication_package/raw_data/url0980c8326f_TobiasScharnowski_Chess_tgz-pJ8-chess_StartJ8/wala0cfa.csv,108,chess/piece/impl/King._generateMoves:()Ljava/util/List;,chess/move/impl/CastlingMove.<init>:(Lchess/ChessCoord;Lchess/ChessCoord;Lchess/ChessCoord;)V,"@Override
protected List<Move> _generateMoves() {
    if (!this.isActive()) {
        return Collections.emptyList();
    }
    final List<Move> result = new LinkedList<Move>();
    int leftBoundary = this.getCoord().getFile() == ChessRules.MIN_FILE ? ChessRules.MIN_FILE : this.getCoord().getFile() - 1;
    int rightBoundary = this.getCoord().getFile() == ChessRules.MAX_FILE ? ChessRules.MAX_FILE : this.getCoord().getFile() + 1;
    int bottomBoundary = this.getCoord().getRank() == ChessRules.MIN_RANK ? ChessRules.MIN_RANK : this.getCoord().getRank() - 1;
    int topBoundary = this.getCoord().getRank() == ChessRules.MAX_RANK ? ChessRules.MAX_RANK : this.getCoord().getRank() + 1;
    for (int file = leftBoundary; file <= rightBoundary; ++file) {
        for (int rank = bottomBoundary; rank <= topBoundary; ++rank) {
            if (!(file == this.getCoord().getFile() && rank == this.getCoord().getRank())) {
                final ChessCoord destCoord = Coords.coord(file, rank);
                final Piece destCoordPiece = this.getPos().getPieceAt(destCoord);
                if ((!(destCoordPiece != null && destCoordPiece.getColor().equals(this.getColor()))) && !this.getPos().isControlled(destCoord)) {
                    final Move possibleMove = defaultCorrectMoveTypeForValidCoord(destCoord);
                    if (possibleMove != null) {
                        result.add(possibleMove);
                    }
                }
            }
        }
    }
    if (!this.getPos().isControlled(this.coord)) {
        if (castlingPossible(true)) {
            final ChessCoord rookSrc = Coords.coord(pos.getCastlingRookFile(true, color), coord.getRank());
            final ChessCoord targetCoord = ChessRules.getCastlingTargetCoord(true, color);
            result.add(new CastlingMove(getCoord(), targetCoord, rookSrc));
        }
        if (castlingPossible(false)) {
            final ChessCoord rookSrc = Coords.coord(pos.getCastlingRookFile(false, color), coord.getRank());
            final ChessCoord targetCoord = ChessRules.getCastlingTargetCoord(false, color);
            result.add(new CastlingMove(coord, targetCoord, rookSrc));
        }
    }
    return result;
}","public CastlingMove(ChessCoord source, ChessCoord target, ChessCoord rookSrc) {
    super(source, target);
}",invocation_constructor,422,1,1,0,TRUE,CastlingMove,1,1,0,chess.piece.impl.King,,[chess.piece.impl.AbstractPiece][chess.piece.Piece],[],chess.move.impl.CastlingMove,[chess.move.impl.SimpleMove][chess.move.Move],[]
23,../replication_package/raw_data/url2d0aeba8a7_kobantser_Calculator_tgz-pJ8-com_teamdev_students_calculator_impl_StateMachineCalculatorJ8/wala0cfa.csv,710,com/teamdev/students/calculator/impl/parsers/BinaryOperatorParser.parse:(Lcom/teamdev/students/calculator/impl/EvaluationContext;)Lcom/teamdev/students/calculator/impl/EvaluationCommand;,com/teamdev/students/calculator/impl/parsers/BinaryOperatorParser$1.<init>:(Lcom/teamdev/students/calculator/impl/parsers/BinaryOperatorParser;Lcom/teamdev/students/calculator/impl/BinaryOperator;)V,"@Override
public EvaluationCommand parse(EvaluationContext context) {
    LOGGER.info(""Inside BinaryOperatorParser."");
    final MathExpressionReader expressionReader = context.getExpressionReader();
    final BinaryOperatorFactory factory = context.getBinaryOperatorFactory();
    final String remainingExpression = expressionReader.getRemainingExpression();
    for (String presentation : factory.getAllOperators()) {
        if (remainingExpression.startsWith(presentation)) {
            LOGGER.info(""BinaryOperatorParser is accepted."");
            final BinaryOperator binaryOperator = factory.create(presentation);
            expressionReader.incrementIndex(presentation.length());
            return new EvaluationCommand() {
                @Override
                public void evaluate(EvaluationStack stack) throws EvaluationException {
                    stack.pushOperator(binaryOperator);
                }
            };
        }
    }
    return null;
}","class BinaryOperatorParser$ { void <init> ( BinaryOperatorParser a0, BinaryOperator a1, ) { return void1; }",reflect,103,1,1,0,FALSE,BinaryOperatorParser$1,1,1,0,com.teamdev.students.calculator.impl.parsers.BinaryOperatorParser,,[com.teamdev.students.calculator.impl.MathExpressionParser],[],com.teamdev.students.calculator.impl.parsers.BinaryOperatorParser$1,[com.teamdev.students.calculator.impl.EvaluationCommand],[]
24,../replication_package/raw_data/url400631cdd0_ludaiqian_appliedxml_tgz-pJ8-test_simples_TestJ8/wala0cfa.csv,5539,org/jczh/appliedxml/TypeAdapterManager.getAdapter:(Lcom/google/gsoncode/internal/TypeToken;)Lorg/jczh/appliedxml/TypeAdapter;,com/google/gsoncode/internal/TypeToken.hashCode:()I,"@SuppressWarnings(""unchecked"")
<T> TypeAdapter<T> getAdapter(TypeToken<T> type) {
    TypeAdapter<?> cached = typeTokenCache.get(type);
    if (cached != null) {
        return (TypeAdapter<T>) cached;
    }
    Map<TypeToken<?>, FutureTypeAdapter<?>> threadCalls = calls.get();
    FutureTypeAdapter<T> ongoingCall = (FutureTypeAdapter<T>) threadCalls.get(type);
    if (ongoingCall != null) {
        return ongoingCall;
    }
    FutureTypeAdapter<T> call = new FutureTypeAdapter<T>();
    threadCalls.put(type, call);
    try {
        for (TypeAdapterFactory factory : factories) {
            TypeAdapter<T> candidate = factory.create(context, type);
            if (candidate != null) {
                call.setDelegate(candidate);
                typeTokenCache.put(type, candidate);
                return candidate;
            }
        }
        throw new IllegalArgumentException(""xml cannot handle "" + type);
    } finally {
        threadCalls.remove(type);
    }
}","@Override
public final int hashCode() {
    return this.hashCode;
}",trans,5,0,1,1,FALSE,hashCode,0,1,0,org.jczh.appliedxml.TypeAdapterManager,,[],[],com.google.gsoncode.internal.TypeToken,,
24,../replication_package/raw_data/url400631cdd0_ludaiqian_appliedxml_tgz-pJ8-test_simples_TestJ8/wala0cfa.csv,6068,org/jczh/appliedxml/ArrayTypeAdapterFactory$ArrayTypeAdapter.read:(Lorg/jczh/appliedxml/XmlReader;)Ljava/lang/Object;,org/jczh/appliedxml/PullReader$End.getName:()Ljava/lang/String;,"public Object read(XmlReader in) throws IOException {
    if (in.peek() == null) {
        return null;
    }
    EventNode last = in.last();
    List<E> list = new ArrayList<E>();
    while (in.hasNext()) {
        EventNode node = in.next();
        if (node.isStart() && itemName.equals(node.getName())) {
            E instance = componentTypeAdapter.read(in);
            list.add(instance);
        }
        if (node.isEnd() && last.getName().equals(node.getName()) && last.depth() == node.depth())
            break;
    }
    Object array = Array.newInstance(componentType, list.size());
    for (int i = 0; i < list.size(); i++) {
        Array.set(array, i, list.get(i));
    }
    return array;
}","@Override
public String getName() {
    return name;
}",invocation_polymorphism,99,1,1,0,TRUE,getName,1,1,0,org.jczh.appliedxml.ArrayTypeAdapterFactory$ArrayTypeAdapter,,,,org.jczh.appliedxml.PullReader$End,[org.jczh.appliedxml.EventToken][org.jczh.appliedxml.EventNode],[]
24,../replication_package/raw_data/url400631cdd0_ludaiqian_appliedxml_tgz-pJ8-test_simples_TestJ8/wala0cfa.csv,6165,org/jczh/appliedxml/MapTypeAdapterFactory$Adapter.read:(Lorg/jczh/appliedxml/XmlReader;)Ljava/util/Map;,org/jczh/appliedxml/PullReader$Start.getName:()Ljava/lang/String;,"@SuppressWarnings(""unchecked"")
public Map<K, V> read(XmlReader in) throws IOException {
    if (in.peek() == null) {
        return null;
    }
    EventNode last = in.last();
    Map<K, V> map = constructor.construct();
    K key = null;
    V value = null;
    while (in.hasNext()) {
        EventNode node = in.next();
        if (node.isStart()) {
            Start start = (Start) node;
            if (entryName.equals(start.getName())) {
                if (keyIsAttr) {
                    key = (K) TextTypeUtil.convert(keyType, start.getEventAttributes().get(0).getValue());
                } else {
                    boolean hasKey = true;
                    while (in.hasNext()) {
                        EventNode keyNode = in.next();
                        if (keyNode.isStart() && keyName.equals(keyNode.getName())) {
                            start = (Start) keyNode;
                            break;
                        } else if (keyNode.isEnd() && entryName.endsWith(keyNode.getName())) {
                            hasKey = false;
                        }
                    }
                    if (!hasKey)
                        continue;
                    if (!in.hasNext())
                        break;
                    key = keyTypeAdapter.read(in);
                }
                if (valueAsText) {
                    if (in.peek().isText()) {
                        value = (V) TextTypeUtil.convert(valueType, in.next().getValue());
                    }
                } else {
                    boolean hasValue = true;
                    while (in.hasNext()) {
                        EventNode valueNode = in.next();
                        if (valueNode.isStart() && valueName.equals(valueNode.getName())) {
                            start = (Start) valueNode;
                            break;
                        } else if (valueNode.isEnd() && entryName.endsWith(valueNode.getName())) {
                            hasValue = false;
                        }
                    }
                    if (!hasValue)
                        continue;
                    if (!in.hasNext())
                        break;
                    if (valueName.equals(start.getName()))
                        value = valueTypeAdapter.read(in);
                }
                map.put(key, value);
            }
        }
        if (node.isEnd() && last.getName().equals(node.getName()) && last.depth() == node.depth()) {
            break;
        }
    }
    return map;
}","public String getName() {
    return name;
}",invocation_new,376,1,1,0,TRUE,getName,1,1,0,org.jczh.appliedxml.MapTypeAdapterFactory$Adapter,,,,org.jczh.appliedxml.PullReader$Start,[org.jczh.appliedxml.EventElement][org.jczh.appliedxml.EventNode],[]
24,../replication_package/raw_data/url400631cdd0_ludaiqian_appliedxml_tgz-pJ8-test_simples_TestJ8/wala0cfa.csv,7115,com/google/gsoncode/internal/LazilyParsedNumber.doubleValue:()D,com/google/gsoncode/internal/LazilyParsedNumber.doubleValue:()D,"@Override
public double doubleValue() {
    return Double.parseDouble(value);
}","@Override
public double doubleValue() {
    return Double.parseDouble(value);
}",trans,4,0,1,0,FALSE,doubleValue,0,0,0,com.google.gsoncode.internal.LazilyParsedNumber,,[java.lang.Number],[],com.google.gsoncode.internal.LazilyParsedNumber,[java.lang.Number],[]
25,../replication_package/raw_data/url0f7f8f6435_TimmiTBy_Epam_tgz-pJ8-com_epam_electricalappliance_RunnerJ8/wala0cfa.csv,72,com/epam/electricalappliance/utilsfordevices/TotalCounter.countTotalCost:(Lcom/epam/electricalappliance/house/SmartHouse;)I,org/apache/log4j/Category.error:(Ljava/lang/Object;)V,"public int countTotalCost(SmartHouse smartHouse) throws LogicException {
    if (smartHouse == null) {
        LOG.error(""Smarthouse cant be null"");
        throw new LogicException(""ERROR, SmartHouse is NULL"");
    }
    int totalCost = 0;
    Iterator<Device> it = smartHouse.iterator();
    while (it.hasNext()) {
        totalCost = totalCost + it.next().getCost();
    }
    LOG.info(""Total cost: "" + totalCost);
    return totalCost;
}","class Category { void error ( Object a0, ) { return void1; }",invocation_polymorphism,9,1,1,0,TRUE,error,1,1,0,com.epam.electricalappliance.utilsfordevices.TotalCounter,public static final org.apache.log4j.Logger LOG;,[],[],org.apache.log4j.Category,,
25,../replication_package/raw_data/url0f7f8f6435_TimmiTBy_Epam_tgz-pJ8-com_epam_electricalappliance_RunnerJ8/wala0cfa.csv,75,com/epam/electricalappliance/utilsfordevices/TotalCounter.countTotalCost:(Lcom/epam/electricalappliance/house/SmartHouse;)I,org/apache/log4j/Category.info:(Ljava/lang/Object;)V,"public int countTotalCost(SmartHouse smartHouse) throws LogicException {
    if (smartHouse == null) {
        LOG.error(""Smarthouse cant be null"");
        throw new LogicException(""ERROR, SmartHouse is NULL"");
    }
    int totalCost = 0;
    Iterator<Device> it = smartHouse.iterator();
    while (it.hasNext()) {
        totalCost = totalCost + it.next().getCost();
    }
    LOG.info(""Total cost: "" + totalCost);
    return totalCost;
}","class Category { void info ( Object a0, ) { return void1; }",invocation_polymorphism,78,1,1,1,TRUE,info,1,1,0,com.epam.electricalappliance.utilsfordevices.TotalCounter,public static final org.apache.log4j.Logger LOG;,[],[],org.apache.log4j.Category,,
25,../replication_package/raw_data/url0f7f8f6435_TimmiTBy_Epam_tgz-pJ8-com_epam_electricalappliance_RunnerJ8/wala0cfa.csv,698,com/epam/electricalappliance/house/SmartHouse.addDevice:(Lcom/epam/electricalappliance/device/abstractdevice/Device;)V,com/epam/electricalappliance/device/bathroom/HairDryer.toString:()Ljava/lang/String;,"public void addDevice(Device device) {
    devicesInHouse.add(device);
    LOG.info(device + ""Has been added to SmartHouse"");
}","@Override
public String toString() {
    return ""HairDryer with "" + getPower() + "" power, status "" + isOn() + "" "";
}",tostring_not_found_specific,20,0,1,1,FALSE,toString,1,1,0,com.epam.electricalappliance.house.SmartHouse,public static final org.apache.log4j.Logger LOG;,[],[],com.epam.electricalappliance.device.bathroom.HairDryer,[com.epam.electricalappliance.device.abstractdevice.Device],[]
25,../replication_package/raw_data/url0f7f8f6435_TimmiTBy_Epam_tgz-pJ8-com_epam_electricalappliance_RunnerJ8/wala0cfa.csv,1339,com/epam/electricalappliance/device/kitchen/Oven.equals:(Ljava/lang/Object;)Z,com/epam/electricalappliance/device/abstractdevice/Device.isOn:()Z,"@Override
public boolean equals(Object obj) {
    if (this == obj)
        return true;
    if (obj == null)
        return false;
    if (getClass() != obj.getClass())
        return false;
    Oven other = (Oven) obj;
    if (temperature != other.temperature) {
        return false;
    }
    if (this.getPower() != other.getPower()) {
        return false;
    }
    if (this.getCost() != other.getCost()) {
        return false;
    }
    if (this.getWeight() != other.getWeight()) {
        return false;
    }
    if (this.isOn() != other.isOn()) {
        return false;
    }
    return true;
}","public boolean isOn() {
    return isOn;
}",invocation_this,88,1,1,0,TRUE,isOn,1,1,0,com.epam.electricalappliance.device.kitchen.Oven,public static final org.apache.log4j.Logger LOG;,[com.epam.electricalappliance.device.abstractdevice.Device],[],com.epam.electricalappliance.device.abstractdevice.Device,[],[com.epam.electricalappliance.device.bathroom.HairDryer][com.epam.electricalappliance.device.kitchen.Fridge][com.epam.electricalappliance.device.kitchen.Oven]
26,../replication_package/raw_data/url2e4fca7217_mark_lacdao_RPGClient_tgz-pJ8-org_nerv_rpgclient_MainJ8/wala0cfa.csv,139,org/nerv/rpgclient/Main.printHp:(Lorg/nerv/rpgclient/RpgObject;Lorg/nerv/rpgclient/RpgObject;)V,org/apache/log4j/config/PropertySetterException.getMessage:()Ljava/lang/String;,"public static void printHp(RpgObject rpgObject1, RpgObject rpgObject2) {
    System.out.println(rpgObject1.getName() + "" Status: "" + rpgObject1.getStatus().name() + "" PLAYER1 HP : "" + rpgObject1.getStats().getHp() + "" : isAlive? "" + rpgObject1.isAlive());
    System.out.println(rpgObject2.getName() + "" Status: "" + rpgObject2.getStatus().name() + "" PLAYER2 HP : "" + rpgObject2.getStats().getHp() + "" : isAlive? "" + rpgObject2.isAlive());
}",class PropertySetterException { String getMessage ( ) { return String1; },exception_trans,121,0,1,0,FALSE,getMessage,0,0,1,org.nerv.rpgclient.Main,,[],[],org.apache.log4j.config.PropertySetterException,,
26,../replication_package/raw_data/url2e4fca7217_mark_lacdao_RPGClient_tgz-pJ8-org_nerv_rpgclient_MainJ8/wala0cfa.csv,413,org/nerv/rpgclient/Main.createReviveSkill:()Lorg/nerv/rpgclient/Skill;,org/nerv/rpgclient/Skill.<init>:(Lorg/nerv/rpgclient/EffectType;)V,"public static Skill createReviveSkill() {
    Skill skill = new Skill(EffectType.NECROMANCY);
    skill.setName(""Revive"");
    skill.setRecovery(100L);
    return skill;
}","public Skill(EffectType type) {
    this.type = type;
}",invocation_constructor,7,1,1,1,TRUE,Skill,1,1,1,org.nerv.rpgclient.Main,,[],[],org.nerv.rpgclient.Skill,[],[]
26,../replication_package/raw_data/url2e4fca7217_mark_lacdao_RPGClient_tgz-pJ8-org_nerv_rpgclient_MainJ8/wala0cfa.csv,590,org/nerv/rpgclient/player/Job.getSkill:(Ljava/lang/String;)Lorg/nerv/rpgclient/Skill;,org/nerv/rpgclient/player/Job.getSkills:()Ljava/util/List;,"public Skill getSkill(String skillName) {
    skillName = skillName.toLowerCase();
    Skill skill = null;
    for (Skill zkill : getSkills()) {
        String name = zkill.getName().toLowerCase();
        if (name.equals(skillName)) {
            skill = zkill;
            break;
        }
    }
    if (skill == null) {
        System.err.println(""Skill "" + skillName + "" not found."");
        return null;
    }
    return skill;
}","public List<Skill> getSkills() {
    return skills;
}",invocation_this,8,1,1,1,TRUE,getSkills,1,1,0,org.nerv.rpgclient.player.Job,,[],[],org.nerv.rpgclient.player.Job,[],[]
27,../replication_package/raw_data/url458e40ff41_mmacfadden_java_baldwin_ga_tgz-pJ8-edu_sdsu_cs652_si_baldwin_SimulationEngineJ8/wala0cfa.csv,819,edu/sdsu/cs652/si/baldwin/SimulationEngine.main:([Ljava/lang/String;)V,edu/sdsu/cs652/si/baldwin/SimulationEngine.addProfile:(Ledu/sdsu/cs652/si/baldwin/SimulationProfile;)V,"public static void main(String[] args) throws InvalidConfigurationException {
    SimulationEngine engine = new SimulationEngine(32, 8, 100);
    engine.setTestsPerProfile(30);
    engine.addProfile(new SimulationProfile(0, 0.05));
    engine.addProfile(new SimulationProfile(5, 0.05));
    engine.addProfile(new SimulationProfile(8, 0.05));
    engine.addProfile(new SimulationProfile(10, 0.05));
    engine.addProfile(new SimulationProfile(12, 0.05));
    engine.addProfile(new SimulationProfile(15, 0.05));
    engine.addProfile(new SimulationProfile(20, 0.05));
    engine.runSimulations();
}","public void addProfile(SimulationProfile simulationProfile) {
    this.simulationProfiles.add(simulationProfile);
}",invocation_new,127,1,1,1,TRUE,addProfile,1,1,1,edu.sdsu.cs652.si.baldwin.SimulationEngine,,[],[],edu.sdsu.cs652.si.baldwin.SimulationEngine,[],[]
27,../replication_package/raw_data/url458e40ff41_mmacfadden_java_baldwin_ga_tgz-pJ8-edu_sdsu_cs652_si_baldwin_SimulationEngineJ8/wala0cfa.csv,993,edu/sdsu/cs652/si/baldwin/SimulationEngine.runSimulations:()V,org/jgap/Chromosome.toString:()Ljava/lang/String;,"public void runSimulations() throws InvalidConfigurationException {
    for (SimulationProfile simulationProfile : simulationProfiles) {
        BaldwinGASimulationProfile bgaProfile = new BaldwinGASimulationProfile(antigenUniverseSize, antigenExposureNumber, simulationGenerations, simulationProfile.getMaxLearningGuesses(), simulationProfile.getLearningPenalty());
        StringBuilder sb = new StringBuilder();
        sb.append(""Running Simulation {maxLearningGuesses: "");
        sb.append(simulationProfile.getMaxLearningGuesses());
        sb.append("", learniingPenalty: "");
        sb.append(simulationProfile.getLearningPenalty());
        sb.append(""}: "");
        System.out.print(sb.toString());
        double populationAverage = runSimluationProfile(bgaProfile);
        System.out.println(populationAverage);
    }
}",class Chromosome { String toString ( ) { return String1; },invocation_new,118,0,1,0,TRUE,toString,0,0,0,edu.sdsu.cs652.si.baldwin.SimulationEngine,,[],[],org.jgap.Chromosome,,
27,../replication_package/raw_data/url458e40ff41_mmacfadden_java_baldwin_ga_tgz-pJ8-edu_sdsu_cs652_si_baldwin_SimulationEngineJ8/wala0cfa.csv,1676,edu/sdsu/cs652/si/baldwin/BaldwinFitnessFunction.findBestGeneticMatch:([ZLorg/jgap/IChromosome;)Ledu/sdsu/cs652/si/baldwin/GeneticMatchResult;,edu/sdsu/cs652/si/baldwin/GeneticMatchResult.<init>:([ZI)V,"class BaldwinFitnessFunction { GeneticMatchResult findBestGeneticMatch ( boolean[] a0, IChromosome a1, ) { return GeneticMatchResult1; }","public GeneticMatchResult(boolean[] antibody, int geneticMatchScore) {
    super();
    this.antibody = antibody;
    this.geneticMatchScore = geneticMatchScore;
}",invocation_constructor,52,1,1,1,TRUE,GeneticMatchResult,1,1,0,edu.sdsu.cs652.si.baldwin.BaldwinFitnessFunction,"protected static final java.util.Random RANDOM;, protected final edu.sdsu.cs652.si.baldwin.AntigenUniverse antigenUniverse;",[org.jgap.FitnessFunction],[],edu.sdsu.cs652.si.baldwin.GeneticMatchResult,[],[]
27,../replication_package/raw_data/url458e40ff41_mmacfadden_java_baldwin_ga_tgz-pJ8-edu_sdsu_cs652_si_baldwin_SimulationEngineJ8/wala0cfa.csv,1700,edu/sdsu/cs652/si/baldwin/SimulationEngine.runSimulations:()V,edu/sdsu/cs652/si/baldwin/SimulationProfile.getLearningPenalty:()D,"public void runSimulations() throws InvalidConfigurationException {
    for (SimulationProfile simulationProfile : simulationProfiles) {
        BaldwinGASimulationProfile bgaProfile = new BaldwinGASimulationProfile(antigenUniverseSize, antigenExposureNumber, simulationGenerations, simulationProfile.getMaxLearningGuesses(), simulationProfile.getLearningPenalty());
        StringBuilder sb = new StringBuilder();
        sb.append(""Running Simulation {maxLearningGuesses: "");
        sb.append(simulationProfile.getMaxLearningGuesses());
        sb.append("", learniingPenalty: "");
        sb.append(simulationProfile.getLearningPenalty());
        sb.append(""}: "");
        System.out.print(sb.toString());
        double populationAverage = runSimluationProfile(bgaProfile);
        System.out.println(populationAverage);
    }
}","public double getLearningPenalty() {
    return learningPenalty;
}",invocation_same_class,95,1,1,1,TRUE,getLearningPenalty,1,1,0,edu.sdsu.cs652.si.baldwin.SimulationEngine,,[],[],edu.sdsu.cs652.si.baldwin.SimulationProfile,[],[]
28,../replication_package/raw_data/url47ebb27197_asirbu_CorrectiveEvolution_tgz-pJ8-eu_fbk_soa_evolution_engine_impl_test_ProblemToSMVFuncTestJ8/wala0cfa.csv,810,eu/fbk/soa/process/StateFormula.negateUnitClausesExceptOneFormula:(Leu/fbk/soa/process/StateFormula;)Leu/fbk/soa/process/StateFormula;,eu/fbk/soa/process/StateLiteralClause.isUnitClause:()Z,"private StateFormula negateUnitClausesExceptOneFormula(StateFormula stateFormula) {
    List<StateLiteralClause> newClauses = new ArrayList<StateLiteralClause>();
    for (StateLiteralClause clause : stateFormula.getClauses()) {
        if (!clause.isUnitClause()) {
            for (StateLiteral lit : clause.getLiterals()) {
                StateLiteral negLit = lit.getNegation();
                StateLiteralClause newClause = new StateLiteralClause(negLit);
                newClauses.add(newClause);
            }
            break;
        }
    }
    for (StateLiteralClause clause : stateFormula.getClauses()) {
        if (clause.isUnitClause()) {
            StateLiteral lit = clause.getLiterals().iterator().next();
            StateLiteral negLit = lit.getNegation();
            for (StateLiteralClause newClause : newClauses) {
                newClause.addLiteral(negLit);
            }
        }
    }
    return new StateFormula(newClauses);
}","public boolean isUnitClause() {
    return (literals.size() == 1);
}",invocation_same_class,148,1,1,0,TRUE,isUnitClause,1,1,0,eu.fbk.soa.process.StateFormula,,[],[],eu.fbk.soa.process.StateLiteralClause,[eu.fbk.soa.evolution.sts.Clause<eu.fbk.soa.process.domain.StateLiteral>],[]
28,../replication_package/raw_data/url47ebb27197_asirbu_CorrectiveEvolution_tgz-pJ8-eu_fbk_soa_evolution_engine_impl_test_ProblemToSMVFuncTestJ8/wala0cfa.csv,11714,eu/fbk/soa/process/Activity.findActivityInAndBlock:(Leu/fbk/soa/process/Activity;Leu/fbk/soa/process/node/ActivityNode;Leu/fbk/soa/process/node/AndSplit;Leu/fbk/soa/process/ProcessModel;)Z,eu/fbk/soa/process/DefaultProcessModel.outgoingEdgesOf:(Leu/fbk/soa/process/node/ProcessNode;)Ljava/util/Set;,"private boolean findActivityInAndBlock(Activity prevAct, ActivityNode actNode, AndSplit andSplit, ProcessModel model) {
    List<ProcessNode> differentBranchNodes = new ArrayList<ProcessNode>();
    for (ProcessEdge edge : model.outgoingEdgesOf(andSplit)) {
        List<ProcessNode> branchNodes = new ArrayList<ProcessNode>();
        boolean foundOnBranch = false;
        while (!foundOnBranch) {
            ProcessNode next = model.getEdgeTarget(edge);
            if (next instanceof AndJoin) {
                break;
            }
            if (next.equals(actNode)) {
                foundOnBranch = true;
            } else {
                branchNodes.add(next);
            }
            edge = model.outgoingEdgesOf(next).iterator().next();
        }
        if (!foundOnBranch) {
            differentBranchNodes.addAll(branchNodes);
        }
    }
    while (!differentBranchNodes.isEmpty()) {
        ProcessNode prev = differentBranchNodes.remove(0);
        if (prev instanceof ActivityNode) {
            ActivityNode actPrev = (ActivityNode) prev;
            if (actPrev.getActivity().equals(prevAct)) {
                return true;
            }
        }
    }
    return false;
}","class DefaultProcessModel { Set outgoingEdgesOf ( ProcessNode a0, ) { return Set1; }",invocation_polymorphism,12,1,1,0,TRUE,outgoingEdgesOf,1,1,0,eu.fbk.soa.process.Activity,,[],[],eu.fbk.soa.process.DefaultProcessModel,"[org.jgrapht.graph.DefaultDirectedGraph<eu.fbk.soa.process.node.ProcessNode, eu.fbk.soa.process.ProcessEdge>][eu.fbk.soa.process.ProcessModel]",[]
28,../replication_package/raw_data/url47ebb27197_asirbu_CorrectiveEvolution_tgz-pJ8-eu_fbk_soa_evolution_engine_impl_test_ProblemToSMVFuncTestJ8/wala0cfa.csv,16979,eu/fbk/soa/evolution/engine/impl/ProblemToSMV.translateCondition:(Leu/fbk/soa/process/StateFormula;I)Ljava/lang/String;,eu/fbk/soa/evolution/engine/impl/STSToSMV.translateSTS:(Leu/fbk/soa/evolution/sts/STS;Ljava/lang/Object;)Ljava/lang/String;,"private String translateCondition(StateFormula formula, int index) {
    Condition properCond = new Condition();
    for (Condition condition : this.properCondIDs.keySet()) {
        if (condition.getIndex() == index && condition.getFormula().equals(formula)) {
            properCond = condition;
        }
    }
    if (properCond.isEmpty()) {
        return """";
    }
    STS condSTS = pb2STS.getConditionSTS(properCond);
    if (condSTS.getStates().size() < 2) {
        return """";
    }
    String translation = createConditionHeader(properCond) + sts2smv.translateSTS(condSTS, properCond);
    return translation;
}","public String translateSTS(STS sts, Object translatedEntity) {
    String input = getActionDeclaration(sts.getInputActions(), translatedEntity, ""input"");
    String output = getActionDeclaration(sts.getOutputActions(), translatedEntity, ""output"");
    String translation = input + output;
    translation += ""VAR state: {"" + StringUtils.getCommaSeparatedString(sts.getStates()) + ""};\n"";
    if (sts.getStates().size() > 1 && sts.getInitialState() != null) {
        translation += ""INIT state = "" + sts.getInitialState() + ""\n\n"";
    }
    if (sts.getTransitions().size() > 0) {
        translation += ""ASSIGN next(state) :=\n  case\n"";
        translation += translateTransitions(sts, translatedEntity);
        translation += ""TRUE : state;\n esac; \n\n"";
    }
    for (Action action : sts.getActions()) {
        String stateCond = """";
        if (!action.getRelatedEntity().equals(translatedEntity)) {
            continue;
        }
        for (Transition trans : sts.getTransitions()) {
            if (trans.getAction().equals(action) || (action.getName().equals(""UNDEF"") && !trans.getAction().getRelatedEntity().equals(translatedEntity))) {
                if (!stateCond.isEmpty()) {
                    stateCond += "" | "";
                }
                stateCond += translateTransitionCondition(trans, translatedEntity);
            }
        }
        if (!stateCond.isEmpty()) {
            translation += ""TRANS "" + this.translateAction(action, translatedEntity) + "" & !("" + stateCond + "") -> FALSE\n"";
        }
    }
    translation += ""\n"";
    return translation;
}",invocation_polymorphism,134,1,1,0,TRUE,translateSTS,1,1,0,eu.fbk.soa.evolution.engine.impl.ProblemToSMV,static org.apache.log4j.Logger logger;,[],[],eu.fbk.soa.evolution.engine.impl.STSToSMV,[],[]
28,../replication_package/raw_data/url47ebb27197_asirbu_CorrectiveEvolution_tgz-pJ8-eu_fbk_soa_evolution_engine_impl_test_ProblemToSMVFuncTestJ8/wala0cfa.csv,19713,eu/fbk/soa/evolution/engine/impl/ProblemToSMV.translateDomainObject:(Leu/fbk/soa/process/domain/DomainObject;)Ljava/lang/String;,eu/fbk/soa/process/domain/DomainObject.getName:()Ljava/lang/String;,"private String translateDomainObject(DomainObject object) {
    String translation = ""---------------------\n"" + ""MODULE "" + object.getName() + "" "";
    Set<String> ids = this.getParameters(objIDs.get(object));
    String paramList = ""("" + StringUtils.getCommaSeparatedString(ids) + "")"";
    id2header.put(objIDs.get(object), object.getName() + paramList);
    translation += paramList + ""\n\n"";
    STS sts = pb2STS.getDomainObjectSTS(object);
    translation += sts2smv.translateSTS(sts, object);
    translation += ""\n"";
    return translation;
}","public String getName() {
    return name;
}",invocation_same_class,97,1,1,1,TRUE,getName,1,1,0,eu.fbk.soa.evolution.engine.impl.ProblemToSMV,static org.apache.log4j.Logger logger;,[],[],eu.fbk.soa.process.domain.DomainObject,[],[]
28,../replication_package/raw_data/url47ebb27197_asirbu_CorrectiveEvolution_tgz-pJ8-eu_fbk_soa_evolution_engine_impl_test_ProblemToSMVFuncTestJ8/wala0cfa.csv,22518,eu/fbk/soa/evolution/test/InputConstructor.constructSimpleLogisticsCorrection:(Leu/fbk/soa/process/ProcessModel;)Leu/fbk/soa/evolution/Correction;,org/jgrapht/util/ArrayUnenforcedSet$SetForEquality.iterator:()Ljava/util/Iterator;,"public static Correction constructSimpleLogisticsCorrection(ProcessModel model) {
    Set<DomainObject> domainObjects = model.getRelatedDomainObjects();
    DomainObject health = null;
    ObjectState dmg = null;
    for (DomainObject obj : domainObjects) {
        if (obj.getName().equals(""CarHealth"")) {
            health = obj;
            Set<ObjectState> states = obj.getStates();
            for (ObjectState state : states) {
                if (state.getName().equals(""Damaged"")) {
                    dmg = state;
                }
            }
        }
    }
    List<Activity> actList = new ArrayList<Activity>();
    Activity start = model.getStartNode().getActivity();
    actList.add(start);
    ProcessEdge edge = model.outgoingEdgesOf(model.getStartNode()).iterator().next();
    ActivityNode fromNode = (ActivityNode) model.getEdgeTarget(edge);
    actList.add(fromNode.getActivity());
    ProcessEdge edge2 = model.outgoingEdgesOf(fromNode).iterator().next();
    ActivityNode toNode = (ActivityNode) model.getEdgeTarget(edge2);
    Trace trace = new Trace(actList);
    StateFormula cond = new StateFormula(new StateLiteral(health, dmg));
    Set<ProcessNode> adaptNodes = new HashSet<ProcessNode>();
    adaptNodes.add(new ActivityNode(""Assess damage""));
    ProcessModel adaptPM = new DefaultProcessModel(""ScheduleRepair"", adaptNodes);
    Adaptation adaptation = new Adaptation(adaptPM, fromNode, toNode);
    Correction correction = new Correction(Type.STRICT, trace, cond, adaptation);
    return correction;
}",class ArrayUnenforcedSet$SetForEquality { Iterator iterator ( ) { return Iterator1; },invocation_polymorphism,213,0,1,0,TRUE,iterator,0,0,1,eu.fbk.soa.evolution.test.InputConstructor,,[],[],org.jgrapht.util.ArrayUnenforcedSet$SetForEquality,,
29,../replication_package/raw_data/url2f44efcfa6_wangyudong_sohutw_java_sdk_2_0_tgz-pJ8-com_sohu_t_api_sdk_json_TestJ8/wala0cfa.csv,455,com/sohu/t/api/sdk/json/JSONArray.write:(Ljava/io/Writer;)Ljava/io/Writer;,com/sohu/t/api/sdk/json/JSONArray.write:(Ljava/io/Writer;)Ljava/io/Writer;,"public Writer write(Writer writer) throws JSONException {
    try {
        boolean b = false;
        int len = length();
        writer.write('[');
        for (int i = 0; i < len; i += 1) {
            if (b) {
                writer.write(',');
            }
            Object v = this.myArrayList.get(i);
            if (v instanceof JSONObject) {
                ((JSONObject) v).write(writer);
            } else if (v instanceof JSONArray) {
                ((JSONArray) v).write(writer);
            } else {
                writer.write(JSONObject.valueToString(v));
            }
            b = true;
        }
        writer.write(']');
        return writer;
    } catch (IOException e) {
        throw new JSONException(e);
    }
}","public Writer write(Writer writer) throws JSONException {
    try {
        boolean b = false;
        int len = length();
        writer.write('[');
        for (int i = 0; i < len; i += 1) {
            if (b) {
                writer.write(',');
            }
            Object v = this.myArrayList.get(i);
            if (v instanceof JSONObject) {
                ((JSONObject) v).write(writer);
            } else if (v instanceof JSONArray) {
                ((JSONArray) v).write(writer);
            } else {
                writer.write(JSONObject.valueToString(v));
            }
            b = true;
        }
        writer.write(']');
        return writer;
    } catch (IOException e) {
        throw new JSONException(e);
    }
}",invocation_new,78,1,1,0,TRUE,write,1,1,0,com.sohu.t.api.sdk.json.JSONArray,,[],[],com.sohu.t.api.sdk.json.JSONArray,[],[]
29,../replication_package/raw_data/url2f44efcfa6_wangyudong_sohutw_java_sdk_2_0_tgz-pJ8-com_sohu_t_api_sdk_json_TestJ8/wala0cfa.csv,461,com/sohu/t/api/sdk/json/XMLTokener.nextToken:()Ljava/lang/Object;,com/sohu/t/api/sdk/json/XMLTokener.nextEntity:(C)Ljava/lang/Object;,"public Object nextToken() throws JSONException {
    char c;
    char q;
    StringBuffer sb;
    do {
        c = next();
    } while (Character.isWhitespace(c));
    switch(c) {
        case 0:
            throw syntaxError(""Misshaped element"");
        case '<':
            throw syntaxError(""Misplaced '<'"");
        case '>':
            return XML.GT;
        case '/':
            return XML.SLASH;
        case '=':
            return XML.EQ;
        case '!':
            return XML.BANG;
        case '?':
            return XML.QUEST;
        case '""':
        case '\'':
            q = c;
            sb = new StringBuffer();
            for (; ; ) {
                c = next();
                if (c == 0) {
                    throw syntaxError(""Unterminated string"");
                }
                if (c == q) {
                    return sb.toString();
                }
                if (c == '&') {
                    sb.append(nextEntity(c));
                } else {
                    sb.append(c);
                }
            }
        default:
            sb = new StringBuffer();
            for (; ; ) {
                sb.append(c);
                c = next();
                if (Character.isWhitespace(c)) {
                    return sb.toString();
                }
                switch(c) {
                    case 0:
                        return sb.toString();
                    case '>':
                    case '/':
                    case '=':
                    case '!':
                    case '?':
                    case '[':
                    case ']':
                        back();
                        return sb.toString();
                    case '<':
                    case '""':
                    case '\'':
                        throw syntaxError(""Bad character in a name"");
                }
            }
    }
}","public Object nextEntity(char a) throws JSONException {
    StringBuffer sb = new StringBuffer();
    for (; ; ) {
        char c = next();
        if (Character.isLetterOrDigit(c) || c == '#') {
            sb.append(Character.toLowerCase(c));
        } else if (c == ';') {
            break;
        } else {
            throw syntaxError(""Missing ';' in XML entity: &"" + sb);
        }
    }
    String s = sb.toString();
    Object e = entity.get(s);
    return e != null ? e : a + s + "";"";
}",invocation_this,175,1,1,0,TRUE,nextEntity,1,1,0,com.sohu.t.api.sdk.json.XMLTokener,public static final java.util.HashMap entity;,[com.sohu.t.api.sdk.json.JSONTokener],[],com.sohu.t.api.sdk.json.XMLTokener,[com.sohu.t.api.sdk.json.JSONTokener],[]
29,../replication_package/raw_data/url2f44efcfa6_wangyudong_sohutw_java_sdk_2_0_tgz-pJ8-com_sohu_t_api_sdk_json_TestJ8/wala0cfa.csv,1119,com/sohu/t/api/sdk/json/XML.noSpace:(Ljava/lang/String;)V,com/sohu/t/api/sdk/json/JSONException.<init>:(Ljava/lang/String;)V,"public static void noSpace(String string) throws JSONException {
    int i, length = string.length();
    if (length == 0) {
        throw new JSONException(""Empty string."");
    }
    for (i = 0; i < length; i += 1) {
        if (Character.isWhitespace(string.charAt(i))) {
            throw new JSONException(""'"" + string + ""' contains a space character."");
        }
    }
}","class JSONException { void <init> ( String a0, ) { return void1; }",exception_throw,15,1,1,0,TRUE,JSONException,1,1,1,com.sohu.t.api.sdk.json.XML,"public static final java.lang.Character AMP;, public static final java.lang.Character APOS;, public static final java.lang.Character BANG;, public static final java.lang.Character EQ;, public static final java.lang.Character GT;, public static final java.lang.Character LT;, public static final java.lang.Character QUEST;, public static final java.lang.Character QUOT;, public static final java.lang.Character SLASH;",[],[],com.sohu.t.api.sdk.json.JSONException,[java.lang.Exception],[]
29,../replication_package/raw_data/url2f44efcfa6_wangyudong_sohutw_java_sdk_2_0_tgz-pJ8-com_sohu_t_api_sdk_json_TestJ8/wala0cfa.csv,2607,com/sohu/t/api/sdk/json/JSONArray.put:(Ljava/util/Collection;)Lcom/sohu/t/api/sdk/json/JSONArray;,com/sohu/t/api/sdk/json/JSONArray.put:(Ljava/lang/Object;)Lcom/sohu/t/api/sdk/json/JSONArray;,"public JSONArray put(Collection value) {
    put(new JSONArray(value));
    return this;
}","public JSONArray put(Object value) {
    this.myArrayList.add(value);
    return this;
}",invocation_this,9,1,1,0,TRUE,put,1,1,0,com.sohu.t.api.sdk.json.JSONArray,,[],[],com.sohu.t.api.sdk.json.JSONArray,[],[]
29,../replication_package/raw_data/url2f44efcfa6_wangyudong_sohutw_java_sdk_2_0_tgz-pJ8-com_sohu_t_api_sdk_json_TestJ8/wala0cfa.csv,3035,com/sohu/t/api/sdk/json/JSONObject.populateInternalMap:(Ljava/lang/Object;Z)V,com/sohu/t/api/sdk/json/JSONException.getCause:()Ljava/lang/Throwable;,"private void populateInternalMap(Object bean, boolean includeSuperClass) {
    Class klass = bean.getClass();
    if (klass.getClassLoader() == null) {
        includeSuperClass = false;
    }
    Method[] methods = (includeSuperClass) ? klass.getMethods() : klass.getDeclaredMethods();
    for (int i = 0; i < methods.length; i += 1) {
        try {
            Method method = methods[i];
            String name = method.getName();
            String key = """";
            if (name.startsWith(""get"")) {
                key = name.substring(3);
            } else if (name.startsWith(""is"")) {
                key = name.substring(2);
            }
            if (key.length() > 0 && Character.isUpperCase(key.charAt(0)) && method.getParameterTypes().length == 0) {
                if (key.length() == 1) {
                    key = key.toLowerCase();
                } else if (!Character.isUpperCase(key.charAt(1))) {
                    key = key.substring(0, 1).toLowerCase() + key.substring(1);
                }
                Object result = method.invoke(bean, (Object[]) null);
                if (result == null) {
                    map.put(key, NULL);
                } else if (result.getClass().isArray()) {
                    map.put(key, new JSONArray(result, includeSuperClass));
                } else if (result instanceof Collection) {
                    map.put(key, new JSONArray((Collection) result, includeSuperClass));
                } else if (result instanceof Map) {
                    map.put(key, new JSONObject((Map) result, includeSuperClass));
                } else if (isStandardProperty(result.getClass())) {
                    map.put(key, result);
                } else {
                    if (result.getClass().getPackage().getName().startsWith(""java"") || result.getClass().getClassLoader() == null) {
                        map.put(key, result.toString());
                    } else {
                        map.put(key, new JSONObject(result, includeSuperClass));
                    }
                }
            }
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
}","public Throwable getCause() {
    return this.cause;
}",exception_info,26,0,1,0,FALSE,getCause,0,1,0,com.sohu.t.api.sdk.json.JSONObject,public static final java.lang.Object NULL;,[],[],com.sohu.t.api.sdk.json.JSONException,[java.lang.Exception],[]
30,../replication_package/raw_data/url47e6aca666_pocorall_automaton_tgz-pJ8-net_pocorall_automaton_DatatypesJ8/wala0cfa.csv,156,net/pocorall/automaton/BasicAutomataFactory.between:(Ljava/lang/String;Ljava/lang/String;ILjava/util/Collection;Z)Lnet/pocorall/automaton/State;,net/pocorall/automaton/BasicAutomataFactory.atLeast:(Ljava/lang/String;ILjava/util/Collection;Z)Lnet/pocorall/automaton/State;,"private static State between(String x, String y, int n, Collection<State> initials, boolean zeros) {
    State s = new State();
    if (x.length() == n)
        s.setAccept(true);
    else {
        if (zeros)
            initials.add(s);
        char cx = x.charAt(n);
        char cy = y.charAt(n);
        if (cx == cy)
            s.addTransition(new Transition(cx, between(x, y, n + 1, initials, zeros && cx == '0')));
        else {
            s.addTransition(new Transition(cx, atLeast(x, n + 1, initials, zeros && cx == '0')));
            s.addTransition(new Transition(cy, atMost(y, n + 1)));
            if (cx + 1 < cy)
                s.addTransition(new Transition((char) (cx + 1), (char) (cy - 1), anyOfRightLength(x, n + 1)));
        }
    }
    return s;
}","class BasicAutomataFactory { State atLeast ( String a0, int a1, Collection a2, boolean a3, ) { return State1; }",invocation_this,137,1,1,0,TRUE,atLeast,1,1,1,net.pocorall.automaton.BasicAutomataFactory,"net.pocorall.automaton.RegExp$Kind kind;, net.pocorall.automaton.RegExp exp1;, net.pocorall.automaton.RegExp exp2;, java.lang.String s;, java.lang.String b;",[],[],net.pocorall.automaton.BasicAutomataFactory,[],[]
30,../replication_package/raw_data/url47e6aca666_pocorall_automaton_tgz-pJ8-net_pocorall_automaton_DatatypesJ8/wala0cfa.csv,159,net/pocorall/automaton/BasicAutomataFactory.between:(Ljava/lang/String;Ljava/lang/String;ILjava/util/Collection;Z)Lnet/pocorall/automaton/State;,net/pocorall/automaton/BasicAutomataFactory.between:(Ljava/lang/String;Ljava/lang/String;ILjava/util/Collection;Z)Lnet/pocorall/automaton/State;,"private static State between(String x, String y, int n, Collection<State> initials, boolean zeros) {
    State s = new State();
    if (x.length() == n)
        s.setAccept(true);
    else {
        if (zeros)
            initials.add(s);
        char cx = x.charAt(n);
        char cy = y.charAt(n);
        if (cx == cy)
            s.addTransition(new Transition(cx, between(x, y, n + 1, initials, zeros && cx == '0')));
        else {
            s.addTransition(new Transition(cx, atLeast(x, n + 1, initials, zeros && cx == '0')));
            s.addTransition(new Transition(cy, atMost(y, n + 1)));
            if (cx + 1 < cy)
                s.addTransition(new Transition((char) (cx + 1), (char) (cy - 1), anyOfRightLength(x, n + 1)));
        }
    }
    return s;
}","private static State between(String x, String y, int n, Collection<State> initials, boolean zeros) {
    State s = new State();
    if (x.length() == n)
        s.setAccept(true);
    else {
        if (zeros)
            initials.add(s);
        char cx = x.charAt(n);
        char cy = y.charAt(n);
        if (cx == cy)
            s.addTransition(new Transition(cx, between(x, y, n + 1, initials, zeros && cx == '0')));
        else {
            s.addTransition(new Transition(cx, atLeast(x, n + 1, initials, zeros && cx == '0')));
            s.addTransition(new Transition(cy, atMost(y, n + 1)));
            if (cx + 1 < cy)
                s.addTransition(new Transition((char) (cx + 1), (char) (cy - 1), anyOfRightLength(x, n + 1)));
        }
    }
    return s;
}",invocation_this,95,1,1,0,TRUE,between,1,1,1,net.pocorall.automaton.BasicAutomataFactory,java.lang.String singleton;,[],[],net.pocorall.automaton.BasicAutomataFactory,[],[]
30,../replication_package/raw_data/url47e6aca666_pocorall_automaton_tgz-pJ8-net_pocorall_automaton_DatatypesJ8/wala0cfa.csv,163,net/pocorall/automaton/BasicOperations.concatenate:(Lnet/pocorall/automaton/DefaultAutomaton;Lnet/pocorall/automaton/DefaultAutomaton;)Lnet/pocorall/automaton/DefaultAutomaton;,net/pocorall/automaton/LinkedAutomaton.checkMinimizeAlways:()V,"static public DefaultAutomaton concatenate(DefaultAutomaton a1, DefaultAutomaton a2) {
    if (a1.isSingleton() && a2.isSingleton())
        return makeString(a1.singleton + a2.singleton);
    if (a1.isEmpty() || a2.isEmpty())
        return makeEmpty();
    boolean deterministic = a1.isSingleton() && a2.isDeterministic();
    if (a1 == a2) {
        a1 = a1.cloneExpanded();
        a2 = a2.cloneExpanded();
    } else {
        a1 = a1.cloneExpandedIfRequired();
        a2 = a2.cloneExpandedIfRequired();
    }
    for (State s : a1.getAcceptStates()) {
        s.accept = false;
        s.addEpsilon(a2.initial);
    }
    a1.deterministic = deterministic;
    a1.clearHashCode();
    a1.checkMinimizeAlways();
    return a1;
}","void checkMinimizeAlways() {
    if (minimize_always)
        minimize();
}",invocation_error,169,1,1,0,TRUE,checkMinimizeAlways,0,0,1,net.pocorall.automaton.BasicOperations,,[],[],net.pocorall.automaton.LinkedAutomaton,[java.io.Serializable][java.lang.Cloneable][net.pocorall.automaton.Automaton],[net.pocorall.automaton.DefaultAutomaton]
30,../replication_package/raw_data/url47e6aca666_pocorall_automaton_tgz-pJ8-net_pocorall_automaton_DatatypesJ8/wala0cfa.csv,337,net/pocorall/automaton/DefaultAutomaton.cloneIfRequired:()Lnet/pocorall/automaton/DefaultAutomaton;,net/pocorall/automaton/DefaultAutomaton.clone:()Lnet/pocorall/automaton/DefaultAutomaton;,"DefaultAutomaton cloneIfRequired() {
    if (allow_mutation)
        return this;
    else
        return clone();
}","@Override
public DefaultAutomaton clone() {
    return (DefaultAutomaton) super.clone();
}",invocation_this,9,1,1,0,TRUE,clone,1,1,0,net.pocorall.automaton.DefaultAutomaton,,[net.pocorall.automaton.LinkedAutomaton][java.io.Serializable][java.lang.Cloneable][net.pocorall.automaton.Automaton],[],net.pocorall.automaton.DefaultAutomaton,[net.pocorall.automaton.LinkedAutomaton][java.io.Serializable][java.lang.Cloneable][net.pocorall.automaton.Automaton],[]
30,../replication_package/raw_data/url47e6aca666_pocorall_automaton_tgz-pJ8-net_pocorall_automaton_DatatypesJ8/wala0cfa.csv,1111,net/pocorall/automaton/DefaultAutomaton.complement:()Lnet/pocorall/automaton/DefaultAutomaton;,net/pocorall/automaton/BasicOperations.complement:(Lnet/pocorall/automaton/DefaultAutomaton;)Lnet/pocorall/automaton/DefaultAutomaton;,"public DefaultAutomaton complement() {
    return BasicOperations.complement(this);
}","static public DefaultAutomaton complement(DefaultAutomaton a) {
    a = a.cloneExpandedIfRequired();
    BasicOperations.determinize(a);
    a.totalize();
    for (State p : a.getStates()) {
        if (p.accept == null) {
            p.accept = Object.class;
        } else {
            p.accept = null;
        }
    }
    a.removeDeadTransitions();
    return a;
}",invocation_static,1,1,1,0,TRUE,complement,1,1,0,net.pocorall.automaton.DefaultAutomaton,,[net.pocorall.automaton.LinkedAutomaton][java.io.Serializable][java.lang.Cloneable][net.pocorall.automaton.Automaton],[],net.pocorall.automaton.BasicOperations,[],[]
31,../replication_package/raw_data/url270fc4f5ee_ykcilborw_Joust_tgz-pJ8-fri_patterns_interpreter_parsergenerator_examples_HowToOverrideLexerImplJ8/wala0cfa.csv,5,fri/patterns/interpreter/parsergenerator/lexer/Input.<init>:(Ljava/lang/Object;)V,fri/patterns/interpreter/parsergenerator/syntax/Rule.hashCode:()I,"Input(Object input) throws IOException {
    if (input instanceof InputStream)
        this.inputStream = input instanceof BufferedInputStream ? (InputStream) input : new BufferedInputStream((InputStream) input);
    else if (input instanceof Reader)
        this.reader = input instanceof BufferedReader ? (Reader) input : new BufferedReader((Reader) input);
    else if (input instanceof File)
        this.reader = new BufferedReader(new FileReader((File) input));
    else if (input instanceof StringBuffer || input instanceof String)
        this.reader = new StringReader(input.toString());
    else
        throw new IllegalArgumentException(""Unknown input object: "" + (input != null ? input.getClass().getName() : ""null""));
}",class Rule { int hashCode ( ) { return int1; },trans,112,0,1,0,FALSE,hashCode,0,0,0,fri.patterns.interpreter.parsergenerator.lexer.Input,,[],[fri.patterns.interpreter.parsergenerator.lexer.InputText],fri.patterns.interpreter.parsergenerator.syntax.Rule,[java.io.Serializable],[]
31,../replication_package/raw_data/url270fc4f5ee_ykcilborw_Joust_tgz-pJ8-fri_patterns_interpreter_parsergenerator_examples_HowToOverrideLexerImplJ8/wala0cfa.csv,357,fri/patterns/interpreter/parsergenerator/lexer/Consumer.listToString:(Ljava/util/List;Ljava/lang/StringBuffer;Ljava/lang/String;Z)V,fri/patterns/interpreter/parsergenerator/lexer/Strategy$Item.hashCode:()I,"protected void listToString(List list, StringBuffer sb, String separator, boolean separatorAtFirst) {
    for (int i = 0; list != null && i < list.size(); i++) {
        Object o = list.get(i);
        if (separatorAtFirst || i > 0)
            sb.append(separator);
        if (o instanceof Consumer)
            sb.append(""["" + o.hashCode() + ""]"");
        else
            sb.append(o.toString());
    }
}","public int hashCode() {
    return consumer.hashCode();
}",invocation_polymorphism,67,1,1,0,TRUE,hashCode,0,0,0,fri.patterns.interpreter.parsergenerator.lexer.Consumer,,[java.lang.Comparable][java.io.Serializable],[fri.patterns.interpreter.parsergenerator.lexer.ConsumerAlternatives],fri.patterns.interpreter.parsergenerator.lexer.Strategy$Item,[java.lang.Comparable][java.io.Serializable],[]
31,../replication_package/raw_data/url270fc4f5ee_ykcilborw_Joust_tgz-pJ8-fri_patterns_interpreter_parsergenerator_examples_HowToOverrideLexerImplJ8/wala0cfa.csv,790,fri/patterns/interpreter/parsergenerator/syntax/builder/SyntaxBuilderParserTables.loadGoto_1:()V,fri/util/collections/AggregatingHashtable.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;,"private void loadGoto_1() {
    Hashtable g = new Hashtable(1, 1);
    gotoTable.add(g);
    g.put(""\""::=\"""", new Integer(4));
}","public Object put(Object key, Object value) {
    List list = (List) super.get(key);
    Object ret = null;
    if (list == null) {
        list = createAggregationList();
        super.put(key, list);
    } else {
        if (shouldAdd(list, value) == false)
            return list;
        ret = list;
    }
    list.add(value);
    return ret;
}",invocation_new,6,0,1,0,TRUE,put,0,0,0,fri.patterns.interpreter.parsergenerator.syntax.builder.SyntaxBuilderParserTables,,[fri.patterns.interpreter.parsergenerator.parsertables.AbstractParserTables][fri.patterns.interpreter.parsergenerator.ParserTables][java.io.Serializable],[],fri.util.collections.AggregatingHashtable,[java.util.Hashtable],[fri.util.collections.UniqueAggregatingHashtable][fri.patterns.interpreter.parsergenerator.parsertables.FirstSets][fri.patterns.interpreter.parsergenerator.parsertables.FollowSets]
31,../replication_package/raw_data/url270fc4f5ee_ykcilborw_Joust_tgz-pJ8-fri_patterns_interpreter_parsergenerator_examples_HowToOverrideLexerImplJ8/wala0cfa.csv,2000,fri/patterns/interpreter/parsergenerator/lexer/Consumer.compareTo:(Ljava/lang/Object;)I,fri/patterns/interpreter/parsergenerator/lexer/ConsumerAlternatives.getStartVariance:()I,"public int compareTo(Object o) {
    Consumer cc = (Consumer) o;
    int i;
    i = getStartVariance() - cc.getStartVariance();
    if (i != 0)
        return i;
    i = cc.getStartLength() - getStartLength();
    if (i != 0)
        return i;
    i = cc.getFixedLength() - getFixedLength();
    if (i != 0)
        return i;
    return 0;
}","public int getStartVariance() {
    if (getStartCharacter() != null)
        return 1;
    int v = 0;
    for (int i = 0; i < alternates.size(); i++) v += ((Consumer) alternates.get(i)).getStartVariance();
    return v;
}",invocation_this,10,1,1,0,TRUE,getStartVariance,0,0,0,fri.patterns.interpreter.parsergenerator.lexer.Consumer,,[java.lang.Comparable][java.io.Serializable],[fri.patterns.interpreter.parsergenerator.lexer.ConsumerAlternatives],fri.patterns.interpreter.parsergenerator.lexer.ConsumerAlternatives,[fri.patterns.interpreter.parsergenerator.lexer.Consumer][java.lang.Comparable][java.io.Serializable],[]
31,../replication_package/raw_data/url270fc4f5ee_ykcilborw_Joust_tgz-pJ8-fri_patterns_interpreter_parsergenerator_examples_HowToOverrideLexerImplJ8/wala0cfa.csv,5693,fri/patterns/interpreter/parsergenerator/syntax/builder/SyntaxBuilderParserTables.<init>:()V,fri/patterns/interpreter/parsergenerator/syntax/Rule.addRightSymbol:(Ljava/lang/String;)V,"public SyntaxBuilderParserTables() {
    syntax = new Syntax(26);
    Rule s;
    syntax.addRule(s = new Rule(""<START>"", 1));
    s.addRightSymbol(""syntax"");
    syntax.addRule(s = new Rule(""syntax"", 2));
    s.addRightSymbol(""syntax"");
    s.addRightSymbol(""rule"");
    syntax.addRule(s = new Rule(""syntax"", 1));
    s.addRightSymbol(""rule"");
    syntax.addRule(s = new Rule(""set"", 3));
    s.addRightSymbol(""`bnf_chardef`"");
    s.addRightSymbol(""\""..\"""");
    s.addRightSymbol(""`bnf_chardef`"");
    syntax.addRule(s = new Rule(""intersectionstartunit"", 1));
    s.addRightSymbol(""set"");
    syntax.addRule(s = new Rule(""intersectionstartunit"", 1));
    s.addRightSymbol(""`identifier`"");
    syntax.addRule(s = new Rule(""intersectionstartunit"", 1));
    s.addRightSymbol(""`ruleref`"");
    syntax.addRule(s = new Rule(""intersectionunit"", 1));
    s.addRightSymbol(""`bnf_chardef`"");
    syntax.addRule(s = new Rule(""intersectionunit"", 1));
    s.addRightSymbol(""`stringdef`"");
    syntax.addRule(s = new Rule(""intersectionunit"", 1));
    s.addRightSymbol(""intersectionstartunit"");
    syntax.addRule(s = new Rule(""intersectionsubtracts"", 2));
    s.addRightSymbol(""intersectionsubtracts"");
    s.addRightSymbol(""intersectionsubtract"");
    syntax.addRule(s = new Rule(""intersectionsubtracts"", 1));
    s.addRightSymbol(""intersectionsubtract"");
    syntax.addRule(s = new Rule(""intersectionsubtract"", 2));
    s.addRightSymbol(""'-'"");
    s.addRightSymbol(""intersectionunit"");
    syntax.addRule(s = new Rule(""intersection"", 2));
    s.addRightSymbol(""intersectionstartunit"");
    s.addRightSymbol(""intersectionsubtracts"");
    syntax.addRule(s = new Rule(""sequnit"", 1));
    s.addRightSymbol(""intersection"");
    syntax.addRule(s = new Rule(""sequnit"", 1));
    s.addRightSymbol(""intersectionunit"");
    syntax.addRule(s = new Rule(""sequnit"", 3));
    s.addRightSymbol(""'('"");
    s.addRightSymbol(""unionseq"");
    s.addRightSymbol(""')'"");
    syntax.addRule(s = new Rule(""quantifiedsequnit"", 2));
    s.addRightSymbol(""sequnit"");
    s.addRightSymbol(""`quantifier`"");
    syntax.addRule(s = new Rule(""quantifiedsequnit"", 1));
    s.addRightSymbol(""sequnit"");
    syntax.addRule(s = new Rule(""sequence"", 2));
    s.addRightSymbol(""sequence"");
    s.addRightSymbol(""quantifiedsequnit"");
    syntax.addRule(s = new Rule(""sequence"", 1));
    s.addRightSymbol(""quantifiedsequnit"");
    syntax.addRule(s = new Rule(""sequence_opt"", 1));
    s.addRightSymbol(""sequence"");
    syntax.addRule(s = new Rule(""sequence_opt"", 0));
    syntax.addRule(s = new Rule(""unionseq"", 3));
    s.addRightSymbol(""unionseq"");
    s.addRightSymbol(""'|'"");
    s.addRightSymbol(""sequence_opt"");
    syntax.addRule(s = new Rule(""unionseq"", 1));
    s.addRightSymbol(""sequence_opt"");
    syntax.addRule(s = new Rule(""rule"", 4));
    s.addRightSymbol(""`identifier`"");
    s.addRightSymbol(""\""::=\"""");
    s.addRightSymbol(""unionseq"");
    s.addRightSymbol(""';'"");
    loadGotoTable();
    loadParseActionTable();
    terminalsWithoutEpsilon = new ArrayList(12);
    terminalsWithoutEpsilon.add(""`bnf_chardef`"");
    terminalsWithoutEpsilon.add(""\""..\"""");
    terminalsWithoutEpsilon.add(""`identifier`"");
    terminalsWithoutEpsilon.add(""`ruleref`"");
    terminalsWithoutEpsilon.add(""`stringdef`"");
    terminalsWithoutEpsilon.add(""'-'"");
    terminalsWithoutEpsilon.add(""'('"");
    terminalsWithoutEpsilon.add(""')'"");
    terminalsWithoutEpsilon.add(""`quantifier`"");
    terminalsWithoutEpsilon.add(""'|'"");
    terminalsWithoutEpsilon.add(""\""::=\"""");
    terminalsWithoutEpsilon.add(""';'"");
}","public void addRightSymbol(String symbol) {
    symbols.add(symbol);
}",invocation_same_class,157,1,1,0,TRUE,addRightSymbol,1,1,0,fri.patterns.interpreter.parsergenerator.syntax.builder.SyntaxBuilderParserTables,,[fri.patterns.interpreter.parsergenerator.parsertables.AbstractParserTables][fri.patterns.interpreter.parsergenerator.ParserTables][java.io.Serializable],[],fri.patterns.interpreter.parsergenerator.syntax.Rule,[java.io.Serializable],[]
32,../replication_package/raw_data/url24d793285d_auzll_gengweibo_tgz-pJ8-org_json_TestJ8/wala0cfa.csv,872,org/json/JSONObject.getBoolean:(Ljava/lang/String;)Z,org/json/JSONObject.quote:(Ljava/lang/String;)Ljava/lang/String;,"public boolean getBoolean(String key) throws JSONException {
    Object o = get(key);
    if (o == null)
        return false;
    if (o.equals(Boolean.FALSE) || (o instanceof String && ((String) o).equalsIgnoreCase(""false""))) {
        return false;
    } else if (o.equals(Boolean.TRUE) || (o instanceof String && ((String) o).equalsIgnoreCase(""true""))) {
        return true;
    }
    throw new JSONException(""JSONObject["" + quote(key) + ""] is not a Boolean."");
}","public static String quote(String string) {
    if (string == null || string.length() == 0) {
        return ""\""\"""";
    }
    char b;
    char c = 0;
    int i;
    int len = string.length();
    StringBuffer sb = new StringBuffer(len + 4);
    String t;
    sb.append('""');
    for (i = 0; i < len; i += 1) {
        b = c;
        c = string.charAt(i);
        switch(c) {
            case '\\':
            case '""':
                sb.append('\\');
                sb.append(c);
                break;
            case '/':
                if (b == '<') {
                    sb.append('\\');
                }
                sb.append(c);
                break;
            case '\b':
                sb.append(""\\b"");
                break;
            case '\t':
                sb.append(""\\t"");
                break;
            case '\n':
                sb.append(""\\n"");
                break;
            case '\f':
                sb.append(""\\f"");
                break;
            case '\r':
                sb.append(""\\r"");
                break;
            default:
                if (c < ' ' || (c >= '\u0080' && c < '\u00a0') || (c >= '\u2000' && c < '\u2100')) {
                    t = ""000"" + Integer.toHexString(c);
                    sb.append(""\\u"" + t.substring(t.length() - 4));
                } else {
                    sb.append(c);
                }
        }
    }
    sb.append('""');
    return sb.toString();
}",invocation_this,91,1,1,0,TRUE,quote,1,1,0,org.json.JSONObject,public static final java.lang.Object NULL;,[],[],org.json.JSONObject,[],[]
32,../replication_package/raw_data/url24d793285d_auzll_gengweibo_tgz-pJ8-org_json_TestJ8/wala0cfa.csv,1062,org/json/JSONObject.accumulate:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;,org/json/JSONArray.put:(Ljava/lang/Object;)Lorg/json/JSONArray;,"public JSONObject accumulate(String key, Object value) throws JSONException {
    testValidity(value);
    Object o = opt(key);
    if (o == null) {
        put(key, value instanceof JSONArray ? new JSONArray().put(value) : value);
    } else if (o instanceof JSONArray) {
        ((JSONArray) o).put(value);
    } else {
        put(key, new JSONArray().put(o).put(value));
    }
    return this;
}","public JSONArray put(Object value) {
    this.myArrayList.add(value);
    return this;
}",invocation_new,74,1,1,1,TRUE,put,1,1,0,org.json.JSONObject,public static final java.lang.Object NULL;,[],[],org.json.JSONArray,[],[]
32,../replication_package/raw_data/url24d793285d_auzll_gengweibo_tgz-pJ8-org_json_TestJ8/wala0cfa.csv,2888,org/json/CDL.rowToJSONArray:(Lorg/json/JSONTokener;)Lorg/json/JSONArray;,org/json/JSONArray.length:()I,"public static JSONArray rowToJSONArray(JSONTokener x) throws JSONException {
    JSONArray ja = new JSONArray();
    for (; ; ) {
        String value = getValue(x);
        if (value == null || (ja.length() == 0 && value.length() == 0)) {
            return null;
        }
        ja.put(value);
        for (; ; ) {
            char c = x.next();
            if (c == ',') {
                break;
            }
            if (c != ' ') {
                if (c == '\n' || c == '\r' || c == 0) {
                    return ja;
                }
                throw x.syntaxError(""Bad character '"" + c + ""' ("" + (int) c + "")."");
            }
        }
    }
}","public int length() {
    return this.myArrayList.size();
}",invocation_new,18,1,1,1,TRUE,length,1,1,1,org.json.CDL,,[],[],org.json.JSONArray,[],[]
32,../replication_package/raw_data/url24d793285d_auzll_gengweibo_tgz-pJ8-org_json_TestJ8/wala0cfa.csv,2924,org/json/JSONWriter.object:()Lorg/json/JSONWriter;,org/json/JSONObject.<init>:()V,"public JSONWriter object() throws JSONException {
    if (this.mode == 'i') {
        this.mode = 'o';
    }
    if (this.mode == 'o' || this.mode == 'a') {
        this.append(""{"");
        this.push(new JSONObject());
        this.comma = false;
        return this;
    }
    throw new JSONException(""Misplaced object."");
}","public JSONObject() {
    this.map = new HashMap();
}",invocation_constructor,45,1,1,1,TRUE,JSONObject,1,1,0,org.json.JSONWriter,protected java.io.Writer writer;,[],[org.json.JSONStringer],org.json.JSONObject,[],[]
32,../replication_package/raw_data/url24d793285d_auzll_gengweibo_tgz-pJ8-org_json_TestJ8/wala0cfa.csv,2939,org/json/HTTP.toString:(Lorg/json/JSONObject;)Ljava/lang/String;,org/json/JSONObject.keys:()Ljava/util/Iterator;,"public static String toString(JSONObject o) throws JSONException {
    Iterator keys = o.keys();
    String s;
    StringBuffer sb = new StringBuffer();
    if (o.has(""Status-Code"") && o.has(""Reason-Phrase"")) {
        sb.append(o.getString(""HTTP-Version""));
        sb.append(' ');
        sb.append(o.getString(""Status-Code""));
        sb.append(' ');
        sb.append(o.getString(""Reason-Phrase""));
    } else if (o.has(""Method"") && o.has(""Request-URI"")) {
        sb.append(o.getString(""Method""));
        sb.append(' ');
        sb.append('""');
        sb.append(o.getString(""Request-URI""));
        sb.append('""');
        sb.append(' ');
        sb.append(o.getString(""HTTP-Version""));
    } else {
        throw new JSONException(""Not enough material for an HTTP header."");
    }
    sb.append(CRLF);
    while (keys.hasNext()) {
        s = keys.next().toString();
        if (!s.equals(""HTTP-Version"") && !s.equals(""Status-Code"") && !s.equals(""Reason-Phrase"") && !s.equals(""Method"") && !s.equals(""Request-URI"") && !o.isNull(s)) {
            sb.append(s);
            sb.append("": "");
            sb.append(o.getString(s));
            sb.append(CRLF);
        }
    }
    sb.append(CRLF);
    return sb.toString();
}","public Iterator keys() {
    return this.map.keySet().iterator();
}",invocation_same_class,1,1,1,1,TRUE,keys,1,1,1,org.json.HTTP,public static final java.lang.String CRLF;,[],[],org.json.JSONObject,[],[]
33,../replication_package/raw_data/url088e9d87be_jpush_jpush_java_library_tgz-pJ8-cn_jpush_example_JPushClientExampleJ8/wala0cfa.csv,2129,cn/jpush/api/HttpPostClient.sendPost:(Ljava/lang/String;Z[B)Lcn/jpush/api/MessageResult;,com/google/gson/internal/$Gson$Types$ParameterizedTypeImpl.equals:(Ljava/lang/Object;)Z,"protected MessageResult sendPost(final String path, final boolean enableSSL, byte[] data) {
    HttpURLConnection conn = null;
    DataOutputStream outStream = null;
    MessageResult messageResult = null;
    try {
        if (enableSSL) {
            initSSL();
        }
        URL url = new URL(BaseURL.getUrlForPath(path, enableSSL));
        conn = (HttpURLConnection) url.openConnection();
        conn.setConnectTimeout(DEFAULT_CONNECTION_TIMEOUT);
        conn.setReadTimeout(DEFAULT_SOCKET_TIMEOUT);
        conn.setUseCaches(false);
        conn.setDoOutput(true);
        conn.setRequestMethod(""POST"");
        conn.setRequestProperty(""Connection"", ""Keep-Alive"");
        conn.setRequestProperty(""Charset"", CHARSET);
        conn.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");
        conn.setRequestProperty(""Content-Length"", String.valueOf(data.length));
        outStream = new DataOutputStream(conn.getOutputStream());
        outStream.write(data);
        outStream.flush();
        if (conn.getResponseCode() == 200) {
            InputStream in = conn.getInputStream();
            StringBuffer sb = new StringBuffer();
            InputStreamReader reader = new InputStreamReader(in, CHARSET);
            char[] buff = new char[1024];
            int len;
            while ((len = reader.read(buff)) > 0) {
                sb.append(buff, 0, len);
            }
            if (!"""".equals(sb.toString())) {
                messageResult = MessageResult.fromValue(sb.toString());
            }
        } else {
            throw new Exception(""ResponseCode="" + conn.getResponseCode());
        }
    } catch (Exception ex) {
        ex.printStackTrace();
    } finally {
        if (null != outStream) {
            try {
                outStream.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        if (null != conn) {
            conn.disconnect();
        }
    }
    return messageResult;
}","class $Gson { boolean equals ( Object a0, ) { return boolean1; }",invocation_error,26,0,1,0,TRUE,equals,0,0,0,cn.jpush.api.HttpPostClient,,[],[],com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl,,
33,../replication_package/raw_data/url088e9d87be_jpush_jpush_java_library_tgz-pJ8-cn_jpush_example_JPushClientExampleJ8/wala0cfa.csv,4419,cn/jpush/api/StringUtils.toMD5:(Ljava/lang/String;)Ljava/lang/String;,com/google/gson/internal/StringMap.get:(Ljava/lang/Object;)Ljava/lang/Object;,"public static String toMD5(String origin) {
    String resultString = null;
    try {
        resultString = new String(origin);
        MessageDigest md = MessageDigest.getInstance(""MD5"");
        resultString = byteArrayToHexString(md.digest(resultString.getBytes()));
    } catch (Exception ex) {
        ex.printStackTrace();
    }
    return resultString;
}","class StringMap { Object get ( Object a0, ) { return Object1; }",trans,19,0,1,0,FALSE,get,0,0,1,cn.jpush.api.StringUtils,,[],[],com.google.gson.internal.StringMap,,
33,../replication_package/raw_data/url088e9d87be_jpush_jpush_java_library_tgz-pJ8-cn_jpush_example_JPushClientExampleJ8/wala0cfa.csv,11573,cn/jpush/api/ValidateRequestParams.vidateParams:(Lcn/jpush/api/MessageParams;)Lcn/jpush/api/MessageResult;,cn/jpush/api/MessageParams.getReceiverValue:()Ljava/lang/String;,"public static MessageResult vidateParams(MessageParams params) {
    if (null == params.getAppKey() || """".equals(params.getAppKey()) || params.getAppKey().length() != 24 || pattern.matcher(params.getAppKey()).find()) {
        return new MessageResult(sendNo, ErrorCodeEnum.MissingRequiredParameters.value(), ""app_key format is error."");
    }
    if (null == params.getMasterSecret() || """".equals(params.getMasterSecret()) || params.getMasterSecret().length() != 24) {
        return new MessageResult(sendNo, ErrorCodeEnum.ValidateFailed.value(), ""Failed to verify the request. (verification_code is incorrect)."");
    }
    if (params.getSendNo() < 1) {
        return new MessageResult(sendNo, ErrorCodeEnum.InvalidParameter.value(), ""sendno value is error, (1-4294967295)."");
    }
    if (params.getReceiverType().value() == ReceiverTypeEnum.TAG.value() && params.getReceiverValue().split("","").length > 10) {
        return new MessageResult(sendNo, ErrorCodeEnum.InvalidParameter.value(), ""exceed maximum of 10 tags."");
    }
    if (params.getReceiverType().value() == ReceiverTypeEnum.ALIAS.value() && params.getReceiverValue().split("","").length > 1000) {
        return new MessageResult(sendNo, ErrorCodeEnum.InvalidParameter.value(), ""exceed maximum of 1000 alias."");
    }
    return null;
}","public String getReceiverValue() {
    return this.receiverValue;
}",invocation_same_class,156,1,1,0,TRUE,getReceiverValue,1,1,1,cn.jpush.api.ValidateRequestParams,,[],[],cn.jpush.api.MessageParams,[],[cn.jpush.api.CustomMessageParams][cn.jpush.api.NotifyMessageParams]
33,../replication_package/raw_data/url088e9d87be_jpush_jpush_java_library_tgz-pJ8-cn_jpush_example_JPushClientExampleJ8/wala0cfa.csv,11913,cn/jpush/api/JPushClient.sendCustomMessage:(Lcn/jpush/api/CustomMessageParams;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/Map;)Lcn/jpush/api/MessageResult;,cn/jpush/api/CustomMessageParams.getMsgContent:()Lcn/jpush/api/CustomMessageParams$CustomMsgContent;,"protected MessageResult sendCustomMessage(CustomMessageParams p, int sendNo, String msgTitle, String msgContent, String msgContentType, Map<String, Object> extra) {
    if (null != msgContentType) {
        p.getMsgContent().setContentType(msgContentType);
    }
    if (null != extra) {
        p.getMsgContent().setExtra(extra);
    }
    return sendMessage(p, sendNo, msgTitle, msgContent);
}",class CustomMessageParams { CustomMsgContent getMsgContent ( ) { return CustomMsgContent1; },invocation_same_class,7,1,1,0,TRUE,getMsgContent,1,1,0,cn.jpush.api.JPushClient,protected static cn.jpush.api.HttpPostClient httpClient;,[cn.jpush.api.BaseClient],[],cn.jpush.api.CustomMessageParams,[cn.jpush.api.MessageParams],[]
34,../replication_package/raw_data/url43a0865bb0_kevinjdolan_darwin_tgz-pJ8-tui_DriverJ8/wala0cfa.csv,12,tui/Driver.createAndShowGUI:(Ldarwin/problemObject/Output;[Ldarwin/population/Individual;[Ljava/lang/Object;)V,glass/drawing/Picture.paint:(Ljava/awt/Graphics;)V,"private static void createAndShowGUI(Output output, Individual[] individuals, Object[] environments) {
    JFrame frame = new JFrame(""Best Individual Outputs"");
    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    JTabbedPane tabs = new JTabbedPane();
    tabs.setPreferredSize(new Dimension(800, 600));
    for (int i = 0; i < individuals.length; i++) {
        JComponent comp = output.getOutput(individuals[i], environments[i]);
        JScrollPane scroll = new JScrollPane(comp);
        scroll.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
        scroll.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        tabs.addTab(""Population "" + i, scroll);
    }
    frame.getContentPane().add(tabs);
    frame.pack();
    frame.setVisible(true);
}","public void paint(Graphics g) {
    int width = getWidth();
    int height = getHeight();
    for (double x = 0; x < width; x++) {
        for (double y = 0; y < height; y++) {
            Point2D.Double p = new Point2D.Double(x / (width - 1), y / (height - 1));
            Color color = shapes.getPointColor(p);
            g.setColor(color);
            g.drawRect((int) x, (int) y, 1, 1);
        }
    }
}",listener,6,0,1,0,FALSE,paint,0,1,1,tui.Driver,,[],[],glass.drawing.Picture,[javax.swing.JComponent],[]
34,../replication_package/raw_data/url43a0865bb0_kevinjdolan_darwin_tgz-pJ8-tui_DriverJ8/wala0cfa.csv,13,tui/Driver.createAndShowGUI:(Ldarwin/problemObject/Output;[Ldarwin/population/Individual;[Ljava/lang/Object;)V,darwin/problemObject/Processable.toString:()Ljava/lang/String;,"private static void createAndShowGUI(Output output, Individual[] individuals, Object[] environments) {
    JFrame frame = new JFrame(""Best Individual Outputs"");
    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    JTabbedPane tabs = new JTabbedPane();
    tabs.setPreferredSize(new Dimension(800, 600));
    for (int i = 0; i < individuals.length; i++) {
        JComponent comp = output.getOutput(individuals[i], environments[i]);
        JScrollPane scroll = new JScrollPane(comp);
        scroll.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
        scroll.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        tabs.addTab(""Population "" + i, scroll);
    }
    frame.getContentPane().add(tabs);
    frame.pack();
    frame.setVisible(true);
}","public String toString() {
    String name = getClass().getName();
    return name.substring(name.lastIndexOf('.') + 1);
}",tostring_not_found_trans,6,0,1,0,FALSE,toString,0,0,1,tui.Driver,,[],[],darwin.problemObject.Processable,,
34,../replication_package/raw_data/url43a0865bb0_kevinjdolan_darwin_tgz-pJ8-tui_DriverJ8/wala0cfa.csv,36,darwin/geneticOperation/NodeReplacementMutation.performOperation:([Ldarwin/population/Individual;IZ)[Ldarwin/population/Individual;,darwin/problemObject/DefaultNodeFactory.getNode:(Ldarwin/nodeFilter/Filter;)Ldarwin/population/Node;,"@Override
public Individual[] performOperation(Individual[] inputs, int maxSize, boolean function) throws UnableToPerformOperationException {
    Individual father = inputs[0];
    List<Node> yList = father.filterTrees(new All());
    int random = (int) (Math.random() * yList.size());
    Node yChromosome = yList.get(random);
    Class<?> expectedType = yChromosome.getExpectedType();
    Class<?>[] childTypes = new Class<?>[yChromosome.getArity()];
    for (int i = 0; i < yChromosome.getArity(); i++) childTypes[i] = yChromosome.getChildNode(i).getReturnType();
    Node replacement;
    try {
        replacement = nodeFactory.getNode(new Signature(expectedType, childTypes));
    } catch (NoAvailableNodeException e) {
        e.printStackTrace();
        replacement = null;
    }
    Node[] childNodes = yChromosome.getChildNodes();
    try {
        for (int i = 0; i < childNodes.length; i++) replacement.setChildNode(i, childNodes[i]);
        yChromosome.replace(replacement);
    } catch (TypeMismatchException e) {
        e.printStackTrace();
    }
    return new Individual[] { father };
}","public Node getNode(Filter filter) throws NoAvailableNodeException {
    List<NodeType> available = getAvailableNodes();
    ArrayList<NodeType> accepted = new ArrayList<NodeType>();
    for (NodeType current : available) if (filter.accept(current))
        accepted.add(current);
    if (accepted.size() == 0)
        throw new NoAvailableNodeException();
    int choice = (int) (Math.random() * accepted.size());
    NodeType pick = accepted.get(choice);
    return new Node(pick);
}",invocation_polymorphism,114,1,1,0,TRUE,getNode,1,1,0,darwin.geneticOperation.NodeReplacementMutation,,[darwin.geneticOperation.GeneticOperation],[],darwin.problemObject.DefaultNodeFactory,[darwin.problemObject.NodeFactory],[darwInvest.NodeFactory][glass.NodeFactory][imageCompression.NodeFactory][symbolicRegression.NodeFactory]
34,../replication_package/raw_data/url43a0865bb0_kevinjdolan_darwin_tgz-pJ8-tui_DriverJ8/wala0cfa.csv,50,darwin/population/Individual.clone:()Ldarwin/population/Individual;,darwin/population/Individual.setTree:(ILdarwin/population/Node;)V,"public Individual clone() {
    Individual individual = new Individual(treeTypes);
    for (int i = 0; i < treeTypes.length; i++) try {
        Node clonedTree = trees[i].cloneSubtree();
        individual.setTree(i, clonedTree);
    } catch (TypeMismatchException e) {
        e.printStackTrace();
        return null;
    }
    return individual;
}","public void setTree(int index, Node tree) throws TypeMismatchException {
    if (treeTypes[index].isAssignableFrom(tree.getReturnType())) {
        trees[index] = tree;
        trees[index].setGrandParent(this, index);
    } else
        throw new TypeMismatchException();
}",invocation_new,36,1,1,0,TRUE,setTree,1,1,0,darwin.population.Individual,"darwin.population.Node[] trees;, java.lang.Class<?>[] treeTypes;",[java.io.Serializable],[],darwin.population.Individual,[java.io.Serializable],[]
35,../replication_package/raw_data/url21b471891f_Agetac_Model_tgz-pJ8-org_json_TestJ8/wala0cfa.csv,92,org/json/HTTP.toString:(Lorg/json/JSONObject;)Ljava/lang/String;,org/json/JSONObject.getString:(Ljava/lang/String;)Ljava/lang/String;,"public static String toString(JSONObject o) throws JSONException {
    Iterator keys = o.keys();
    String s;
    StringBuffer sb = new StringBuffer();
    if (o.has(""Status-Code"") && o.has(""Reason-Phrase"")) {
        sb.append(o.getString(""HTTP-Version""));
        sb.append(' ');
        sb.append(o.getString(""Status-Code""));
        sb.append(' ');
        sb.append(o.getString(""Reason-Phrase""));
    } else if (o.has(""Method"") && o.has(""Request-URI"")) {
        sb.append(o.getString(""Method""));
        sb.append(' ');
        sb.append('""');
        sb.append(o.getString(""Request-URI""));
        sb.append('""');
        sb.append(' ');
        sb.append(o.getString(""HTTP-Version""));
    } else {
        throw new JSONException(""Not enough material for an HTTP header."");
    }
    sb.append(CRLF);
    while (keys.hasNext()) {
        s = keys.next().toString();
        if (!s.equals(""HTTP-Version"") && !s.equals(""Status-Code"") && !s.equals(""Reason-Phrase"") && !s.equals(""Method"") && !s.equals(""Request-URI"") && !o.isNull(s)) {
            sb.append(s);
            sb.append("": "");
            sb.append(o.getString(s));
            sb.append(CRLF);
        }
    }
    sb.append(CRLF);
    return sb.toString();
}","public String getString(String key) throws JSONException {
    return get(key).toString();
}",invocation_same_class,35,1,1,1,TRUE,getString,1,1,1,org.json.HTTP,public static final java.lang.String CRLF;,[],[],org.json.JSONObject,[],[]
35,../replication_package/raw_data/url21b471891f_Agetac_Model_tgz-pJ8-org_json_TestJ8/wala0cfa.csv,249,org/json/JSONObject.valueToString:(Ljava/lang/Object;II)Ljava/lang/String;,org/json/JSONArray.toString:(II)Ljava/lang/String;,"static String valueToString(Object value, int indentFactor, int indent) throws JSONException {
    if (value == null || value.equals(null)) {
        return ""null"";
    }
    try {
        if (value instanceof JSONString) {
            Object o = ((JSONString) value).toJSONString();
            if (o instanceof String) {
                return (String) o;
            }
        }
    } catch (Exception e) {
    }
    if (value instanceof Number) {
        return numberToString((Number) value);
    }
    if (value instanceof Boolean) {
        return value.toString();
    }
    if (value instanceof JSONObject) {
        return ((JSONObject) value).toString(indentFactor, indent);
    }
    if (value instanceof JSONArray) {
        return ((JSONArray) value).toString(indentFactor, indent);
    }
    if (value instanceof Map) {
        return new JSONObject((Map) value).toString(indentFactor, indent);
    }
    if (value instanceof Collection) {
        return new JSONArray((Collection) value).toString(indentFactor, indent);
    }
    if (value.getClass().isArray()) {
        return new JSONArray(value).toString(indentFactor, indent);
    }
    return quote(value.toString());
}","String toString(int indentFactor, int indent) throws JSONException {
    int len = length();
    if (len == 0) {
        return ""[]"";
    }
    int i;
    StringBuffer sb = new StringBuffer(""["");
    if (len == 1) {
        sb.append(JSONObject.valueToString(this.myArrayList.get(0), indentFactor, indent));
    } else {
        int newindent = indent + indentFactor;
        sb.append('\n');
        for (i = 0; i < len; i += 1) {
            if (i > 0) {
                sb.append("",\n"");
            }
            for (int j = 0; j < newindent; j += 1) {
                sb.append(' ');
            }
            sb.append(JSONObject.valueToString(this.myArrayList.get(i), indentFactor, newindent));
        }
        sb.append('\n');
        for (i = 0; i < indent; i += 1) {
            sb.append(' ');
        }
    }
    sb.append(']');
    return sb.toString();
}",invocation_new,153,1,1,0,TRUE,toString,1,1,1,org.json.JSONObject,public static final java.lang.Object NULL;,[],[],org.json.JSONArray,[],[]
35,../replication_package/raw_data/url21b471891f_Agetac_Model_tgz-pJ8-org_json_TestJ8/wala0cfa.csv,332,org/json/XML.parse:(Lorg/json/XMLTokener;Lorg/json/JSONObject;Ljava/lang/String;)Z,org/json/XMLTokener.skipPast:(Ljava/lang/String;)Z,"private static boolean parse(XMLTokener x, JSONObject context, String name) throws JSONException {
    char c;
    int i;
    String n;
    JSONObject o = null;
    String s;
    Object t;
    t = x.nextToken();
    if (t == BANG) {
        c = x.next();
        if (c == '-') {
            if (x.next() == '-') {
                x.skipPast(""-->"");
                return false;
            }
            x.back();
        } else if (c == '[') {
            t = x.nextToken();
            if (t.equals(""CDATA"")) {
                if (x.next() == '[') {
                    s = x.nextCDATA();
                    if (s.length() > 0) {
                        context.accumulate(""content"", s);
                    }
                    return false;
                }
            }
            throw x.syntaxError(""Expected 'CDATA['"");
        }
        i = 1;
        do {
            t = x.nextMeta();
            if (t == null) {
                throw x.syntaxError(""Missing '>' after '<!'."");
            } else if (t == LT) {
                i += 1;
            } else if (t == GT) {
                i -= 1;
            }
        } while (i > 0);
        return false;
    } else if (t == QUEST) {
        x.skipPast(""?>"");
        return false;
    } else if (t == SLASH) {
        t = x.nextToken();
        if (name == null) {
            throw x.syntaxError(""Mismatched close tag"" + t);
        }
        if (!t.equals(name)) {
            throw x.syntaxError(""Mismatched "" + name + "" and "" + t);
        }
        if (x.nextToken() != GT) {
            throw x.syntaxError(""Misshaped close tag"");
        }
        return true;
    } else if (t instanceof Character) {
        throw x.syntaxError(""Misshaped tag"");
    } else {
        n = (String) t;
        t = null;
        o = new JSONObject();
        for (; ; ) {
            if (t == null) {
                t = x.nextToken();
            }
            if (t instanceof String) {
                s = (String) t;
                t = x.nextToken();
                if (t == EQ) {
                    t = x.nextToken();
                    if (!(t instanceof String)) {
                        throw x.syntaxError(""Missing value"");
                    }
                    o.accumulate(s, JSONObject.stringToValue((String) t));
                    t = null;
                } else {
                    o.accumulate(s, """");
                }
            } else if (t == SLASH) {
                if (x.nextToken() != GT) {
                    throw x.syntaxError(""Misshaped tag"");
                }
                context.accumulate(n, o);
                return false;
            } else if (t == GT) {
                for (; ; ) {
                    t = x.nextContent();
                    if (t == null) {
                        if (n != null) {
                            throw x.syntaxError(""Unclosed tag "" + n);
                        }
                        return false;
                    } else if (t instanceof String) {
                        s = (String) t;
                        if (s.length() > 0) {
                            o.accumulate(""content"", JSONObject.stringToValue(s));
                        }
                    } else if (t == LT) {
                        if (parse(x, o, n)) {
                            if (o.length() == 0) {
                                context.accumulate(n, """");
                            } else if (o.length() == 1 && o.opt(""content"") != null) {
                                context.accumulate(n, o.opt(""content""));
                            } else {
                                context.accumulate(n, o);
                            }
                            return false;
                        }
                    }
                }
            } else {
                throw x.syntaxError(""Misshaped tag"");
            }
        }
    }
}","public boolean skipPast(String to) throws JSONException {
    boolean b;
    char c;
    int i;
    int j;
    int offset = 0;
    int n = to.length();
    char[] circle = new char[n];
    for (i = 0; i < n; i += 1) {
        c = next();
        if (c == 0) {
            return false;
        }
        circle[i] = c;
    }
    for (; ; ) {
        j = offset;
        b = true;
        for (i = 0; i < n; i += 1) {
            if (circle[j] != to.charAt(i)) {
                b = false;
                break;
            }
            j += 1;
            if (j >= n) {
                j -= n;
            }
        }
        if (b) {
            return true;
        }
        c = next();
        if (c == 0) {
            return false;
        }
        circle[offset] = c;
        offset += 1;
        if (offset >= n) {
            offset -= n;
        }
    }
}",invocation_same_class,40,1,1,0,TRUE,skipPast,1,1,1,org.json.XML,"public static final java.lang.Character AMP;, public static final java.lang.Character APOS;, public static final java.lang.Character BANG;, public static final java.lang.Character EQ;, public static final java.lang.Character GT;, public static final java.lang.Character LT;, public static final java.lang.Character QUEST;, public static final java.lang.Character QUOT;, public static final java.lang.Character SLASH;",[],[],org.json.XMLTokener,[org.json.JSONTokener],[]
35,../replication_package/raw_data/url21b471891f_Agetac_Model_tgz-pJ8-org_json_TestJ8/wala0cfa.csv,786,org/json/JSONArray.<init>:(Ljava/lang/Object;Z)V,org/json/JSONObject.isStandardProperty:(Ljava/lang/Class;)Z,"public JSONArray(Object array, boolean includeSuperClass) throws JSONException {
    this();
    if (array.getClass().isArray()) {
        int length = Array.getLength(array);
        for (int i = 0; i < length; i += 1) {
            Object o = Array.get(array, i);
            if (JSONObject.isStandardProperty(o.getClass())) {
                this.myArrayList.add(o);
            } else {
                this.myArrayList.add(new JSONObject(o, includeSuperClass));
            }
        }
    } else {
        throw new JSONException(""JSONArray initial value should be a string or collection or array."");
    }
}","static boolean isStandardProperty(Class clazz) {
    return clazz.isPrimitive() || clazz.isAssignableFrom(Byte.class) || clazz.isAssignableFrom(Short.class) || clazz.isAssignableFrom(Integer.class) || clazz.isAssignableFrom(Long.class) || clazz.isAssignableFrom(Float.class) || clazz.isAssignableFrom(Double.class) || clazz.isAssignableFrom(Character.class) || clazz.isAssignableFrom(String.class) || clazz.isAssignableFrom(Boolean.class);
}",invocation_static,41,1,1,0,TRUE,isStandardProperty,1,1,0,org.json.JSONArray,,[],[],org.json.JSONObject,[],[]
35,../replication_package/raw_data/url21b471891f_Agetac_Model_tgz-pJ8-org_json_TestJ8/wala0cfa.csv,797,org/json/JSONObject.getJSONArray:(Ljava/lang/String;)Lorg/json/JSONArray;,org/json/JSONObject.quote:(Ljava/lang/String;)Ljava/lang/String;,"public JSONArray getJSONArray(String key) throws JSONException {
    Object o = get(key);
    if (o instanceof JSONArray) {
        return (JSONArray) o;
    }
    throw new JSONException(""JSONObject["" + quote(key) + ""] is not a JSONArray."");
}","public static String quote(String string) {
    if (string == null || string.length() == 0) {
        return ""\""\"""";
    }
    char b;
    char c = 0;
    int i;
    int len = string.length();
    StringBuffer sb = new StringBuffer(len + 4);
    String t;
    sb.append('""');
    for (i = 0; i < len; i += 1) {
        b = c;
        c = string.charAt(i);
        switch(c) {
            case '\\':
            case '""':
                sb.append('\\');
                sb.append(c);
                break;
            case '/':
                if (b == '<') {
                    sb.append('\\');
                }
                sb.append(c);
                break;
            case '\b':
                sb.append(""\\b"");
                break;
            case '\t':
                sb.append(""\\t"");
                break;
            case '\n':
                sb.append(""\\n"");
                break;
            case '\f':
                sb.append(""\\f"");
                break;
            case '\r':
                sb.append(""\\r"");
                break;
            default:
                if (c < ' ' || (c >= '\u0080' && c < '\u00a0') || (c >= '\u2000' && c < '\u2100')) {
                    t = ""000"" + Integer.toHexString(c);
                    sb.append(""\\u"" + t.substring(t.length() - 4));
                } else {
                    sb.append(c);
                }
        }
    }
    sb.append('""');
    return sb.toString();
}",invocation_this,35,1,1,0,TRUE,quote,1,1,0,org.json.JSONObject,public static final java.lang.Object NULL;,[],[],org.json.JSONObject,[],[]
36,../replication_package/raw_data/url1d5e9d990f_Telsis_jOCP_tgz-pJ8-com_telsis_jocp_sampleApp_BasicOCPAppJ8/wala0cfa.csv,803,com/telsis/jocp/OCPLinkManager.disconnect:()V,com/telsis/jocp/OCPLinkManager$RxThread.shutdownThread:()V,"public final void disconnect() {
    if (linkState == LinkStates.DISCONNECTED) {
        return;
    }
    if (rxThread != null) {
        rxThread.shutdownThread();
        rxThread = null;
    }
    changeLinkState(LinkStates.DISCONNECTED);
}","public void shutdownThread() {
    log.debug(""RxThread: thread shutdown requested"");
    shutdownThread = true;
    if (myThread != null) {
        while (myThread.isAlive()) {
            try {
                myThread.join();
            } catch (InterruptedException e) {
            }
        }
    }
}",invocation_polymorphism,22,1,1,0,TRUE,shutdownThread,1,1,0,com.telsis.jocp.OCPLinkManager,,[com.telsis.jocp.OCPMessageHandler][com.telsis.jocp.OCPLink][com.telsis.jocp.OCPMessageHandler],[],com.telsis.jocp.OCPLinkManager$RxThread,[java.lang.Runnable],[]
36,../replication_package/raw_data/url1d5e9d990f_Telsis_jOCP_tgz-pJ8-com_telsis_jocp_sampleApp_BasicOCPAppJ8/wala0cfa.csv,1210,com/telsis/jocp/OCPLinkManager$TxThread.run:()V,org/apache/log4j/Category.debug:(Ljava/lang/Object;)V,"@Override
public void run() {
    log.debug(""TxThread: thread starting"");
    watchdog.start();
    myThread = Thread.currentThread();
    boolean moreToDo = false;
    lastActivity = System.currentTimeMillis();
    lastHeartbeat = lastActivity;
    try {
        socketSelector = Selector.open();
        channel.register(socketSelector, SelectionKey.OP_WRITE);
        currentState = TxThreadStates.UNINITIALISED;
        while (true) {
            watchdog.pat();
            moreToDo = internalRun();
            if (shutdownThread) {
                break;
            }
            long now = System.currentTimeMillis();
            if (now - lastActivity > inactiveHeartbeatInterval || now - lastHeartbeat > fixedHeartbeatInterval) {
                needHeartbeat = true;
                log.debug(""TxThread: requested heartbeat"");
            }
            if (!moreToDo) {
                socketSelector.select(1 * MILLISECONDS);
                socketSelector.selectedKeys().clear();
            }
        }
    } catch (IOException e) {
        log.error(""TxThread: exception in thread"", e);
    } finally {
        try {
            socketSelector.close();
        } catch (IOException e) {
        }
    }
    watchdog.stop();
    log.debug(""TxThread: thread exiting"");
}","class Category { void debug ( Object a0, ) { return void1; }",invocation_polymorphism,256,1,1,0,TRUE,debug,1,1,0,com.telsis.jocp.OCPLinkManager$TxThread,final com.telsis.jocp.OCPLinkManager this$0;,[java.lang.Runnable],[],org.apache.log4j.Category,,
36,../replication_package/raw_data/url1d5e9d990f_Telsis_jOCP_tgz-pJ8-com_telsis_jocp_sampleApp_BasicOCPAppJ8/wala0cfa.csv,1417,com/telsis/jocp/OCPSystemManager.disconnect:()V,com/telsis/jocp/OCPSystemManager$SystemThread.shutdownThread:()V,"@Override
public final synchronized void disconnect() {
    if (state == SystemState.STOPPED) {
        return;
    }
    sysThread.shutdownThread();
    state = recalcMode();
}","public void shutdownThread() {
    log.debug(""SystemThread: requesting shutdown"");
    synchronized (this) {
        shutdownThread = true;
        this.notify();
    }
    if (myThread != null) {
        while (myThread.isAlive()) {
            try {
                myThread.join();
            } catch (InterruptedException e) {
            }
        }
    }
    myThread = null;
}",invocation_polymorphism,15,1,1,0,TRUE,shutdownThread,1,1,0,com.telsis.jocp.OCPSystemManager,,[com.telsis.jutils.interfaces.ServerEventNotifier][com.telsis.jocp.OCPClient],[],com.telsis.jocp.OCPSystemManager$SystemThread,[java.lang.Runnable],[]
36,../replication_package/raw_data/url1d5e9d990f_Telsis_jOCP_tgz-pJ8-com_telsis_jocp_sampleApp_BasicOCPAppJ8/wala0cfa.csv,5286,com/telsis/jocp/OCPLinkManager$RxThread.handleUnconnected:()Z,com/telsis/jocp/OCPLinkManager.access$400:(Lcom/telsis/jocp/OCPLinkManager;)Ljava/nio/channels/SocketChannel;,"private boolean handleUnconnected() {
    lastActivity = System.currentTimeMillis();
    try {
        channel = SocketChannel.open();
        socket = channel.socket();
        socket.bind(new InetSocketAddress(localAddress, localPort));
        socket.setSoTimeout(timeout);
        channel.configureBlocking(false);
        while (socketSelector == null) {
            try {
                socketSelector = Selector.open();
            } catch (NullPointerException e) {
                log.debug(""RxThread: Java bug 6427854 seen"");
            }
        }
        channel.register(socketSelector, SelectionKey.OP_CONNECT);
        if (channel.connect(new InetSocketAddress(remoteAddress, remotePort))) {
            currentState = RxThreadStates.CONNECTED;
        } else {
            currentState = RxThreadStates.CONNECTING;
        }
        changeLinkState(LinkStates.CONNECTING);
    } catch (IOException e) {
        stats.incrementStat(statPrefix + STAT_CONNECTION_FAIL);
        log.debug(""RxThread: exception caught while trying to "" + ""connect to server"", e);
        currentState = RxThreadStates.RESET;
        return false;
    }
    return true;
}","class OCPLinkManager { SocketChannel access ( OCPLinkManager a0, ) { return SocketChannel1; }",jvm_method_generation,26,1,1,1,FALSE,access$400,0,1,0,com.telsis.jocp.OCPLinkManager$RxThread,final com.telsis.jocp.OCPLinkManager this$0;,[java.lang.Runnable],[],com.telsis.jocp.OCPLinkManager,[com.telsis.jocp.OCPMessageHandler][com.telsis.jocp.OCPLink][com.telsis.jocp.OCPMessageHandler],[]
37,../replication_package/raw_data/url063b9533f6_karlney_tetris_ai_tgz-pJ8-karlney_tetris_cmd_TetrisGameRunnerJ8/wala0cfa.csv,69,karlney/tetris/core/Player.processInput:(Lkarlney/tetris/core/PlayerInput;)V,karlney/tetris/core/PieceO.rotateIfPossible:()Z,"public void processInput(PlayerInput input) {
    switch(input) {
        case ROTATE:
            currentPiece.rotateIfPossible();
            break;
        case DOWN:
            t.interrupt();
            break;
        case LEFT:
            currentPiece.moveSideWays(input);
            break;
        case RIGHT:
            currentPiece.moveSideWays(input);
            break;
        case DROP:
            currentPiece.drop();
            t.interrupt();
            break;
    }
}","@Override
public boolean rotateIfPossible() {
    return false;
}",invocation_polymorphism,48,1,1,0,TRUE,rotateIfPossible,1,1,0,karlney.tetris.core.Player,"protected karlney.tetris.core.Piece currentPiece;, protected karlney.tetris.core.Piece nextPiece;",[java.lang.Runnable],[karlney.tetris.ai.AIPlayer],karlney.tetris.core.PieceO,[karlney.tetris.core.AbstractPiece][karlney.tetris.core.Piece],[]
37,../replication_package/raw_data/url063b9533f6_karlney_tetris_ai_tgz-pJ8-karlney_tetris_cmd_TetrisGameRunnerJ8/wala0cfa.csv,127,karlney/tetris/core/Player.updateDistribution:(Lkarlney/tetris/core/PieceType;)V,karlney/tetris/core/AbstractPiece.toString:()Ljava/lang/String;,"private synchronized void updateDistribution(PieceType type) {
    if (pieceStatistics.containsKey(type)) {
        pieceStatistics.put(type, pieceStatistics.get(type) + 1);
    }
}","public String toString() {
    return getType() + "" {x="" + x + "" y="" + y + "" h="" + rotation + ""} "";
}",tostring_not_found_trans,5,0,1,0,FALSE,toString,0,0,0,karlney.tetris.core.Player,"protected karlney.tetris.core.Piece currentPiece;, protected karlney.tetris.core.Piece nextPiece;",[java.lang.Runnable],[karlney.tetris.ai.AIPlayer],karlney.tetris.core.AbstractPiece,[karlney.tetris.core.Piece],[karlney.tetris.core.PieceISZ][karlney.tetris.core.PieceI][karlney.tetris.core.PieceS][karlney.tetris.core.PieceZ][karlney.tetris.core.PieceJLT][karlney.tetris.core.PieceO]
37,../replication_package/raw_data/url063b9533f6_karlney_tetris_ai_tgz-pJ8-karlney_tetris_cmd_TetrisGameRunnerJ8/wala0cfa.csv,132,karlney/tetris/core/Player.updateDistribution:(Lkarlney/tetris/core/PieceType;)V,org/apache/log4j/CategoryKey.equals:(Ljava/lang/Object;)Z,"private synchronized void updateDistribution(PieceType type) {
    if (pieceStatistics.containsKey(type)) {
        pieceStatistics.put(type, pieceStatistics.get(type) + 1);
    }
}","class CategoryKey { boolean equals ( Object a0, ) { return boolean1; }",trans,5,0,1,0,FALSE,equals,0,0,0,karlney.tetris.core.Player,"protected karlney.tetris.core.Piece currentPiece;, protected karlney.tetris.core.Piece nextPiece;",[java.lang.Runnable],[karlney.tetris.ai.AIPlayer],org.apache.log4j.CategoryKey,,
37,../replication_package/raw_data/url063b9533f6_karlney_tetris_ai_tgz-pJ8-karlney_tetris_cmd_TetrisGameRunnerJ8/wala0cfa.csv,154,karlney/tetris/ai/OnePieceNoPathCheckPiecePlacer.bestPlacement:(Lkarlney/tetris/ai/BoardEvaluator;Lkarlney/tetris/core/Board;Lkarlney/tetris/core/Piece;Lkarlney/tetris/core/Piece;)Lkarlney/tetris/core/Piece;,karlney/tetris/core/Board.<init>:(Lkarlney/tetris/core/Board;)V,"@Override
public Piece bestPlacement(BoardEvaluator evaluator, Board board, Piece currentPiece, Piece nextPiece) {
    double bestUtility = Integer.MIN_VALUE;
    int y = 0;
    Piece best = currentPiece.getTranslatedCopy(currentPiece.getX(), currentPiece.getY(), 0, board);
    best.stepDownAFAP();
    try {
        for (int h = 0; h < currentPiece.getPossibleOrientations(); h++) {
            for (int x = -1; x < board.getCols(); x++) {
                Board boardCopy = new Board(board);
                Piece tb = currentPiece.getTranslatedCopy(x, y, h, boardCopy);
                tb.stepDownAFAP();
                if (board.allowedPlacement(tb)) {
                    boardCopy.placePieceOnBoard(tb);
                    int rows = boardCopy.removeFullRows();
                    double utility = evaluator.score(boardCopy, tb, rows);
                    if (utility > bestUtility) {
                        bestUtility = utility;
                        best = tb.getTranslatedCopy(tb.getX(), tb.getY(), 0, board);
                    }
                }
            }
        }
    } catch (Exception e) {
        log.error(""Best placement crashed"", e);
    }
    return best;
}","public Board(Board copy) {
    this.cols = copy.cols;
    this.rows = copy.rows;
    board = new Square[cols + 2][rows + 2];
    for (int i = 0; i < cols + 2; i++) {
        System.arraycopy(copy.board[i], 0, board[i], 0, rows + 2);
    }
}",invocation_constructor,68,1,1,1,TRUE,Board,1,1,0,karlney.tetris.ai.OnePieceNoPathCheckPiecePlacer,,[karlney.tetris.ai.PiecePlacer],[],karlney.tetris.core.Board,[],[]
38,../replication_package/raw_data/url49584c1d41_Arrem_GGS_tgz-pJ8-com_gamezgalaxy_test_console_MainJ8/wala0cfa.csv,16,com/gamezgalaxy/GGS/world/Level.Load:(Ljava/lang/String;)Lcom/gamezgalaxy/GGS/world/Level;,com/gamezgalaxy/GGS/chat/ChatColor.toString:()Ljava/lang/String;,"public static Level Load(String filename) throws IOException, ClassNotFoundException {
    Level l = null;
    if (filename.endsWith("".dat""))
        l = Convert(filename);
    else {
        FileInputStream fis = new FileInputStream(filename);
        GZIPInputStream gis = new GZIPInputStream(fis);
        ObjectInputStream obj = new ObjectInputStream(gis);
        long version = obj.readLong();
        if (version == serialVersionUID) {
            l = (Level) obj.readObject();
        } else {
            obj.close();
            throw new IOException(""The level version does not match the current"");
        }
        l.ticks = new ArrayList<Tick>();
        l.physics = l.new Ticker();
        l.name = new File(filename).getName().split(""\\."")[0];
        l.run = true;
        l.physics.start();
        obj.close();
        gis.close();
        fis.close();
    }
    return l;
}",class ChatColor { String toString ( ) { return String1; },tostring_not_found_trans,159,0,1,0,FALSE,toString,0,0,1,com.gamezgalaxy.GGS.world.Level,"java.util.ArrayList<com.gamezgalaxy.GGS.server.Tick> ticks;, public java.lang.String name;",[java.io.Serializable],[],com.gamezgalaxy.GGS.chat.ChatColor,[java.lang.Enum<com.gamezgalaxy.GGS.chat.ChatColor>],[]
38,../replication_package/raw_data/url49584c1d41_Arrem_GGS_tgz-pJ8-com_gamezgalaxy_test_console_MainJ8/wala0cfa.csv,111,com/gamezgalaxy/GGS/util/properties/Properties.init:(Lcom/gamezgalaxy/GGS/server/Server;)Lcom/gamezgalaxy/GGS/util/properties/Properties;,com/gamezgalaxy/GGS/util/properties/Properties.load:(Ljava/lang/String;)V,"public static Properties init(Server server) {
    if (init)
        return null;
    Properties p = new Properties();
    if (!new File(""properties"").exists())
        new File(""properties"").mkdir();
    if (!new File(""properties/"" + server.configpath).exists())
        makeDefaults(server.configpath, server, p);
    else {
        try {
            p.load(server.configpath);
            init = true;
        } catch (IOException e) {
            server.Log(""ERROR LOADING CONFIG!"");
            e.printStackTrace();
        }
    }
    return p;
}","public void load(String filename) throws IOException {
    if (settings.size() > 0)
        settings.clear();
    FileInputStream fstream = new FileInputStream(""properties/"" + filename);
    DataInputStream in = new DataInputStream(fstream);
    BufferedReader br = new BufferedReader(new InputStreamReader(in));
    String strLine;
    while ((strLine = br.readLine()) != null) {
        if (strLine.startsWith(""#""))
            continue;
        settings.add(strLine);
    }
    in.close();
}",invocation_new,105,1,1,0,TRUE,load,1,1,1,com.gamezgalaxy.GGS.util.properties.Properties,,[],[],com.gamezgalaxy.GGS.util.properties.Properties,[],[]
38,../replication_package/raw_data/url49584c1d41_Arrem_GGS_tgz-pJ8-com_gamezgalaxy_test_console_MainJ8/wala0cfa.csv,114,com/gamezgalaxy/GGS/API/EventSystem.callEvent:(Lcom/gamezgalaxy/GGS/API/Event;)V,com/gamezgalaxy/GGS/API/RegisteredListener.execute:(Lcom/gamezgalaxy/GGS/API/Event;)V,"public void callEvent(Event event) {
    EventList events = event.getEvents();
    RegisteredListener[] listeners = events.getRegisteredListeners();
    for (RegisteredListener listen : listeners) {
        try {
            listen.execute(event);
        } catch (Exception e) {
            server.Log(""==!EVENT ERROR!=="");
            e.printStackTrace();
        }
    }
}","public void execute(Event event) throws Exception {
    if (event instanceof Cancelable) {
        if (((Cancelable) event).isCancelled())
            return;
    }
    executor.execute(listen, event);
}",invocation_same_class,38,1,1,0,TRUE,execute,1,1,0,com.gamezgalaxy.GGS.API.EventSystem,,[],[],com.gamezgalaxy.GGS.API.RegisteredListener,[],[]
38,../replication_package/raw_data/url49584c1d41_Arrem_GGS_tgz-pJ8-com_gamezgalaxy_test_console_MainJ8/wala0cfa.csv,269,com/gamezgalaxy/GGS/iomodel/Player$SendLevel.run:()V,com/gamezgalaxy/GGS/networking/packets/minecraft/FinishLevelSend.Write:(Lcom/gamezgalaxy/GGS/networking/IOClient;Lcom/gamezgalaxy/GGS/server/Server;)V,"@Override
public void run() {
    Packet pa;
    pa = pm.getPacket((byte) 0x02);
    pa.Write(p, pm.server);
    pa = null;
    pa = pm.getPacket((byte) 0x03);
    pa.Write(p, pm.server);
    pa = null;
    pa = pm.getPacket((byte) 0x04);
    pa.Write(p, pm.server);
    pa = null;
    p.finishLevel();
}","@Override
public void Write(IOClient p, Server server) {
    PacketPrepareEvent event = new PacketPrepareEvent(p, this, server);
    server.getEventSystem().callEvent(event);
    if (event.isCancelled())
        return;
    Player player;
    if (p instanceof Player) {
        player = (Player) p;
    } else
        return;
    try {
        ByteBuffer bb = ByteBuffer.allocate(7);
        bb.order(ByteOrder.BIG_ENDIAN);
        bb.put(ID);
        bb.putShort(player.getLevel().width);
        bb.putShort(player.getLevel().height);
        bb.putShort(player.getLevel().depth);
        player.WriteData(bb.array());
    } catch (IOException e) {
        e.printStackTrace();
    }
}",invocation_polymorphism,27,1,1,0,TRUE,Write,1,1,0,com.gamezgalaxy.GGS.iomodel.Player$SendLevel,"com.gamezgalaxy.GGS.iomodel.Player p;, final com.gamezgalaxy.GGS.iomodel.Player this$0;",[java.lang.Thread],[],com.gamezgalaxy.GGS.networking.packets.minecraft.FinishLevelSend,[com.gamezgalaxy.GGS.networking.packets.Packet],[]
38,../replication_package/raw_data/url49584c1d41_Arrem_GGS_tgz-pJ8-com_gamezgalaxy_test_console_MainJ8/wala0cfa.csv,374,com/gamezgalaxy/GGS/networking/packets/PacketManager.<init>:(Lcom/gamezgalaxy/GGS/server/Server;)V,com/gamezgalaxy/GGS/networking/packets/minecraft/Kick.<init>:(Lcom/gamezgalaxy/GGS/networking/packets/PacketManager;)V,"public PacketManager(Server instance) {
    this.server = instance;
    try {
        serverSocket = new ServerSocket(this.server.Port);
    } catch (IOException e) {
        e.printStackTrace();
    }
}","class Kick { void <init> ( PacketManager a0, ) { return void1; }",member_variable_initialization,61,1,1,1,FALSE,Kick,1,1,0,com.gamezgalaxy.GGS.networking.packets.PacketManager,"protected com.gamezgalaxy.GGS.networking.packets.Packet[] packets;, protected java.net.ServerSocket serverSocket;, protected java.lang.Thread reader;, public com.gamezgalaxy.GGS.server.Server server;",[],[],com.gamezgalaxy.GGS.networking.packets.minecraft.Kick,[com.gamezgalaxy.GGS.networking.packets.Packet],[]
39,../replication_package/raw_data/url28f181064f_simonjupp_java_skos_api_tgz-pJ8-example_CreateSKOSExampleJ8/wala0cfa.csv,17425,uk/ac/manchester/cs/skos/SKOSDatasetImpl.getSKOSObjectRelatedConcepts:(Ljava/util/Set;Lorg/semanticweb/skos/SKOSObjectProperty;)Ljava/util/Set;,uk/ac/manchester/cs/owl/owlapi/OWLObjectPropertyImpl.equals:(Ljava/lang/Object;)Z,"public Set<SKOSConcept> getSKOSObjectRelatedConcepts(Set<SKOSObjectRelationAssertion> assertionSet, SKOSObjectProperty prop) {
    Set<SKOSConcept> con = new HashSet<SKOSConcept>();
    for (SKOSObjectRelationAssertion rel : assertionSet) {
        if (rel.getSKOSProperty().getURI().equals(prop.getURI())) {
            URI uri = rel.getSKOSObject().getURI();
            if (!SKOSEntity.containsKey(uri)) {
                SKOSEntity.put(uri, entityCreationHandler(skos2owlConverter.getAsOWLIndiviudal(rel.getSKOSObject())));
            }
            if (SKOSEntity.get(uri).isSKOSConcept()) {
                con.add(SKOSEntity.get(uri).asSKOSConcept());
            }
        }
    }
    return con;
}","class OWLObjectPropertyImpl { boolean equals ( Object a0, ) { return boolean1; }",invocation_error,162,0,1,0,TRUE,equals,0,0,0,uk.ac.manchester.cs.skos.SKOSDatasetImpl,,[org.semanticweb.skos.SKOSDataset],[],uk.ac.manchester.cs.owl.owlapi.OWLObjectPropertyImpl,,
39,../replication_package/raw_data/url28f181064f_simonjupp_java_skos_api_tgz-pJ8-example_CreateSKOSExampleJ8/wala0cfa.csv,43275,uk/ac/manchester/cs/skos/SKOSDatasetImpl.getSKOSObjectRelationAssertions:(Lorg/semanticweb/skos/SKOSEntity;)Ljava/util/Set;,org/semanticweb/owlapi/util/CollectionFactory$ConditionalCopySet.contains:(Ljava/lang/Object;)Z,"public Set<SKOSObjectRelationAssertion> getSKOSObjectRelationAssertions(SKOSEntity skosEntity) {
    Set<SKOSObjectRelationAssertion> assertion = new HashSet<SKOSObjectRelationAssertion>(50);
    if (!SKOSEntity.containsKey(skosEntity.getURI())) {
        SKOSEntity.put(skosEntity.getURI(), skosEntity);
    }
    for (OWLObjectPropertyAssertionAxiom ax : owlOntology.getObjectPropertyAssertionAxioms(skos2owlConverter.getAsOWLIndiviudal(skosEntity))) {
        OWLIndividual object = ax.getObject();
        OWLIndividual subject = ax.getSubject();
        OWLObjectPropertyExpression prop = ax.getProperty();
        SKOSEntity entOb = SKOSEntity.get(object.asOWLNamedIndividual().getIRI().toURI());
        SKOSEntity entSub = SKOSEntity.get(subject.asOWLNamedIndividual().getIRI().toURI());
        if (entOb == null) {
            entOb = entityCreationHandler(object.asOWLNamedIndividual());
            SKOSEntity.put(object.asOWLNamedIndividual().getIRI().toURI(), entOb);
        }
        if (entSub == null) {
            entSub = entityCreationHandler(subject.asOWLNamedIndividual());
            SKOSEntity.put(subject.asOWLNamedIndividual().getIRI().toURI(), entSub);
        }
        SKOSObjectProperty skosProp = skosManContent.getSKOSDataFactory().getSKOSObjectProperty(prop.asOWLObjectProperty().getIRI().toURI());
        assertion.add(skosManContent.getSKOSDataFactory().getSKOSObjectRelationAssertion(entSub, skosProp, entOb));
    }
    return assertion;
}","class CollectionFactory$ConditionalCopySet { boolean contains ( Object a0, ) { return boolean1; }",trans,218,0,1,0,FALSE,contains,0,0,0,uk.ac.manchester.cs.skos.SKOSDatasetImpl,,[org.semanticweb.skos.SKOSDataset],[],org.semanticweb.owlapi.util.CollectionFactory$ConditionalCopySet,,
39,../replication_package/raw_data/url28f181064f_simonjupp_java_skos_api_tgz-pJ8-example_CreateSKOSExampleJ8/wala0cfa.csv,71355,uk/ac/manchester/cs/skos/SKOSDataFactoryImpl.getSKOSConceptScheme:(Ljava/net/URI;)Lorg/semanticweb/skos/SKOSConceptScheme;,uk/ac/manchester/cs/skos/SKOSConceptSchemeImpl.<init>:(Lorg/semanticweb/owlapi/model/OWLDataFactory;Ljava/net/URI;)V,"public SKOSConceptScheme getSKOSConceptScheme(URI uri) {
    SKOSConceptScheme con = conceptSchemeByURI.get(uri);
    if (con == null) {
        con = new SKOSConceptSchemeImpl(this, uri);
        conceptSchemeByURI.put(uri, con);
    }
    return con;
}","class SKOSConceptSchemeImpl { void <init> ( OWLDataFactory a0, URI a1, ) { return void1; }",invocation_constructor,24,1,1,1,TRUE,SKOSConceptSchemeImpl,1,1,0,uk.ac.manchester.cs.skos.SKOSDataFactoryImpl,,[uk.ac.manchester.cs.owl.owlapi.OWLDataFactoryImpl][org.semanticweb.skos.SKOSDataFactory],[],uk.ac.manchester.cs.skos.SKOSConceptSchemeImpl,[org.semanticweb.skos.SKOSConceptScheme][org.semanticweb.skos.SKOSEntity][org.semanticweb.skos.SKOSObject],[]
39,../replication_package/raw_data/url28f181064f_simonjupp_java_skos_api_tgz-pJ8-example_CreateSKOSExampleJ8/wala0cfa.csv,83791,uk/ac/manchester/cs/skos/SKOSEntityAssertionImpl.visit:(Lorg/semanticweb/skos/SKOSConcept;)V,uk/ac/manchester/cs/skos/SKOSConceptImpl.getAsOWLIndividual:()Lorg/semanticweb/owlapi/model/OWLNamedIndividual;,"public void visit(SKOSConcept entity) {
    OWLClass cls = df.getOWLClass(IRI.create(SKOSRDFVocabulary.CONCEPT.getURI()));
    SKOSConceptImpl con = (SKOSConceptImpl) entity;
    OWLIndividual ind = con.getAsOWLIndividual();
    ax = df.getOWLClassAssertionAxiom(cls, ind);
}",class SKOSConceptImpl { OWLNamedIndividual getAsOWLIndividual ( ) { return OWLNamedIndividual1; },invocation_new,23,1,1,1,TRUE,getAsOWLIndividual,1,1,0,uk.ac.manchester.cs.skos.SKOSEntityAssertionImpl,"org.semanticweb.skos.SKOSEntity entity;, java.net.URI uri;, uk.ac.manchester.cs.skos.SKOSDataFactoryImpl df;, org.semanticweb.owlapi.model.OWLClassAssertionAxiom ax;",[org.semanticweb.skos.SKOSEntityAssertion][org.semanticweb.skos.SKOSAssertion][org.semanticweb.skos.SKOSObject][org.semanticweb.skos.SKOSEntityVisitor],[],uk.ac.manchester.cs.skos.SKOSConceptImpl,[org.semanticweb.skos.SKOSConcept][org.semanticweb.skos.SKOSEntity][org.semanticweb.skos.SKOSObject],[]
40,../replication_package/raw_data/url4e79c36700_JacenLakiir_Tivoo_tgz-pJ8-MainJ8/wala0cfa.csv,11,tivoo/output/HTMLBuilder.writeDetailsPageHTML:(Ltivoo/Event;Ljava/io/File;)V,tivoo/filtering/TitleComparator.compare:(Ljava/lang/Object;Ljava/lang/Object;)I,"private void writeDetailsPageHTML(Event currentEvent, File detailPage) throws IOException {
    FileOutputStream fos = new FileOutputStream(detailPage);
    OutputStreamWriter out = new OutputStreamWriter(fos, ""UTF-8"");
    Document doc = initializeHTMLDocument(""Details"", ""../"");
    writeHeader(doc);
    writeDetailsPageContent(currentEvent, doc);
    writeFooter(doc);
    out.write(doc.write());
    out.close();
}","class TitleComparator { int compare ( Object a0, Object a1, ) { return int1; }",trans,5,0,1,0,FALSE,compare,0,0,0,tivoo.output.HTMLBuilder,"protected static final java.util.List<java.lang.String> DAYS_LIST;, protected static final java.util.List<java.lang.String> MONTHS_LIST;",[],[tivoo.output.CalendarViewHTMLBuilder][tivoo.output.ConflictViewHTMLBuilder][tivoo.output.HorizontalViewHTMLBuilder][tivoo.output.SortedViewHTMLBuilder][tivoo.output.VerticalViewHTMLBuilder],tivoo.filtering.TitleComparator,[java.util.Comparator<tivoo.Event>],[]
40,../replication_package/raw_data/url4e79c36700_JacenLakiir_Tivoo_tgz-pJ8-MainJ8/wala0cfa.csv,28,tivoo/input/CalendarParser.parse:(Ljava/lang/String;)Ljava/util/List;,tivoo/input/CalendarParser.getInputSource:(Ljava/lang/String;)Lorg/xml/sax/InputSource;,"public static List<Event> parse(String fileName) throws SAXException, IOException, ParserConfigurationException {
    SAXParser parser = SAX_PARSER_FACTORY.newSAXParser();
    for (int i = 0; i < TYPE_CHECKERS.length; i++) {
        TypeCheckHandler typeCheckHandler = null;
        ParserHandler parserHandler = null;
        try {
            typeCheckHandler = TYPE_CHECKERS[i].newInstance();
            parserHandler = PARSERS[i].newInstance();
            parser.reset();
            parser.parse(getInputSource(fileName), typeCheckHandler);
        } catch (TypeMatchedException e) {
            parser.reset();
            parser.parse(getInputSource(fileName), parserHandler);
            return parserHandler.getEvents();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    System.err.println(""Invalid File Type"");
    return new LinkedList<Event>();
}","class CalendarParser { InputSource getInputSource ( String a0, ) { return InputSource1; }",invocation_this,53,1,1,1,TRUE,getInputSource,1,1,1,tivoo.input.CalendarParser,,[],[],tivoo.input.CalendarParser,[],[]
41,../replication_package/raw_data/url2b9f720f64_jfimbett_QBnB_tgz-pJ8-tests_TestJ8/wala0cfa.csv,184,algorithms/BnB.integerBranch:(Lmodel/Model;)[Lmodel/Model;,algorithms/SimplexAlgorithm.inverse:([[D)[[D,"public Model[] integerBranch(Model m) {
    Model[] branch = new Model[2];
    double[] x = m.getSimplex().getXb();
    String[] Ib = m.getSimplex().getIb();
    String b = """";
    int k = 0;
    for (int i = 0; i < x.length; i++) {
        if (!(doubleIsInteger(x[i])) && m.isInt(Ib[i])) {
            b = Ib[i];
            k = i;
            break;
        }
    }
    double a = Math.floor(x[k]);
    double c = Math.ceil(x[k]);
    double[] cost = m.getC();
    String[] II = m.getI();
    double[] rhs = m.getB();
    Model a1 = new Model();
    Model a2 = new Model();
    ArrayList<QBnBconstr> c1 = m.getConstraints();
    ArrayList<QBnBconstr> c2 = (ArrayList<QBnBconstr>) c1.clone();
    a1.setConstraints(c1);
    ArrayList<QBnBVariable> v1 = m.getVariables();
    a1.setVariables(v1);
    double[] cc1 = m.getC();
    double[] cc2 = cc1.clone();
    a1.setC(cc1);
    a2.setC(cc2);
    a2.setConstraints(c2);
    double[] Ub1 = m.getU();
    double[] Ub2 = Ub1.clone();
    double[] Lb1 = m.getL();
    double[] Lb2 = Lb1.clone();
    changeBound(Ib[k], a, Ub1, a1.varNames());
    changeBound(Ib[k], c, Lb2, a1.varNames());
    a1.setU(Ub1);
    a1.setL(Lb1);
    a2.setU(Ub2);
    a2.setL(Lb2);
    double[][] A = m.getA();
    double[][] A2 = A.clone();
    a1.setA(A);
    a2.setA(A2);
    double[] bb = m.getB();
    double[] bb1 = bb.clone();
    a1.setB(bb);
    a2.setB(bb1);
    if (cuts) {
        SimplexAlgorithm current = m.getSimplex();
        double[][] B = current.getBasis();
        double[][] N = current.getN();
        double[][] Gamma = current.Multiply(current.inverse(B), N);
        double[] r = floor(Gamma[k]);
        double rhs1 = a;
        a1.generateCut(r, current.getIn(), rhs1);
        a2.generateCut(r, current.getIn(), rhs1);
    }
    branch[0] = a1;
    branch[1] = a2;
    a1.setPrint(printSimplex);
    a2.setPrint(printSimplex);
    return branch;
}","public double[][] inverse(double[][] X) {
    Matrix X1 = new Matrix(X);
    return X1.inverse().getArrayCopy();
}",invocation_same_class,398,1,1,0,TRUE,inverse,1,1,0,algorithms.BnB,,[],[],algorithms.SimplexAlgorithm,[],[]
41,../replication_package/raw_data/url2b9f720f64_jfimbett_QBnB_tgz-pJ8-tests_TestJ8/wala0cfa.csv,189,model/Model.preSolveBoundsOnIntegers:()Z,model/QBnBVariable.setLb:(D)V,"public boolean preSolveBoundsOnIntegers() {
    for (int i = 0; i < variables.size(); i++) {
        if (variables.get(i).getType() == 1) {
            variables.get(i).setLb(Math.ceil(variables.get(i).getLb()));
            variables.get(i).setUb(Math.floor(variables.get(i).getUb()));
        } else if (variables.get(i).getType() == 2) {
            if (variables.get(i).getLb() < 0) {
                variables.get(i).setLb(0);
            }
            if (variables.get(i).getUb() > 1) {
                variables.get(i).setUb(1);
            }
        }
    }
    return true;
}","public void setLb(double lb) {
    this.lb = lb;
}",invocation_polymorphism,145,1,1,0,TRUE,setLb,1,1,0,model.Model,,[],[],model.QBnBVariable,[],[]
41,../replication_package/raw_data/url2b9f720f64_jfimbett_QBnB_tgz-pJ8-tests_TestJ8/wala0cfa.csv,223,model/Model.generateCut:([D[Ljava/lang/String;D)V,model/Model.update:()V,"public void generateCut(double[] coeff, String[] vars, double rhs) {
    QBnBLinExp le = new QBnBLinExp();
    for (int i = 0; i < vars.length; i++) {
        le.addTerm(coeff[i], findVarByName(vars[i]));
    }
    QBnBconstr c = new QBnBconstr(le, 2, rhs, ""Cut"", this);
    this.addConst(c);
    this.update();
}","public void update() {
    updateConstraintsE();
    updateBounds();
}",invocation_this,65,1,1,0,TRUE,update,1,1,0,model.Model,,[],[],model.Model,[],[]
41,../replication_package/raw_data/url2b9f720f64_jfimbett_QBnB_tgz-pJ8-tests_TestJ8/wala0cfa.csv,293,model/Model.findVarByName:(Ljava/lang/String;)Lmodel/QBnBVariable;,model/QBnBVariable.getName:()Ljava/lang/String;,"public QBnBVariable findVarByName(String name) {
    for (int i = 0; i < variables.size(); i++) {
        QBnBVariable var = variables.get(i);
        if (variables.get(i).getName().equals(name))
            return var;
    }
    return null;
}","public String getName() {
    return name;
}",invocation_polymorphism,36,1,1,0,TRUE,getName,1,1,0,model.Model,,[],[],model.QBnBVariable,[],[]
41,../replication_package/raw_data/url2b9f720f64_jfimbett_QBnB_tgz-pJ8-tests_TestJ8/wala0cfa.csv,295,model/QBnBLinExp.addTerm:(DLmodel/QBnBVariable;)V,model/QBnBVariable.getName:()Ljava/lang/String;,"public void addTerm(double coeff, QBnBVariable var) {
    coeffs.add(coeff);
    varNames.add(var.getName());
}","public String getName() {
    return name;
}",invocation_same_class,17,1,1,1,TRUE,getName,1,1,0,model.QBnBLinExp,,[],[],model.QBnBVariable,[],[]
